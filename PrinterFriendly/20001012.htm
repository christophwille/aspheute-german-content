<HTML>
<HEAD>
<TITLE>Einf&uuml;hrung: C#-Klassen in ASP.NET</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="In diesem Artikel erhalten Sie eine Einf&uuml;hrung in die C#-Klassenprogrammierung innerhalb der ASP.NET Umgebung.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,C Sharp,Klassen,ASP Plus,Properties,Methods,.NET,Constructor,Class,Eigenschaften,Functions,ASP.NET">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Einf&uuml;hrung: C#-Klassen in ASP.NET</H1>
<p>
Geschrieben von: <a href="../autoren/christianholm.htm">Christian Holm</a><br>
Kategorie: <a href="../kategorien/ASPdotNET.htm">ASP.NET</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20001012"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Web Seiten gibt es viele, die meisten sind in HTML geschrieben. Will man Interaktionen mit
dem Webserver, wie Formulare auswerten oder Datenbank-Records auslesen, in eine Webseite integrieren,
so gen&uuml;gt reines HTML nicht mehr. F&uuml;r einen ASP Programmierer ist dies nichts neues,
denn es gibt schon seit geraumer Zeit die M&ouml;glichkeite server-side Skripts mit ASP zu schreiben.
Die f&uuml;r ASP am h&auml;ufigsten verwendeten Sprachen sind VBScript und JScript.
Mit dem Erscheinen der .NET Platform und ASP.NET vollzieht sich allerdings ein Quantensprung in
der Programmierbarkeit von Webseiten. In ASP.NET k&ouml;nnen Sie komplexe Anwendungen einfach implementieren,
und mit C# (C Sharp) haben sie eine vollst&auml;ndige, objektorientierte Programmiersprache 
zur Verf&uuml;gung. Mit C# haben Sie M&ouml;glichkeiten, die weit &uuml;ber die der Scriptsprachen
VBScript und JScript hinaus gehen.
</p>

<p>
Unter der Verwendung von ASP.NET k&ouml;nnen Sie nicht nur professionelle Formulare erstellen, sondern 
haben mit C# auch ein Werkzeug, das die M&ouml;glichkeiten von C++ mit der einfachen Programmierbarkeit
und Fehlersicherheit einer Scriptsprache verbindet. C# ist eine moderne, objektorientierte Programmiersprache 
die die F&auml;higkeiten von C++ besitzt, aber sich fast wie Visual Basic programmieren l&auml;&szlig;t.
Damit sind Sie in der Lage, die Grenzen von VBScript um Lichtjahre zu &uuml;berschreiten, da
Sie mit C# Zugriff auf das Microsoft .NET Framework haben und s&auml;mtliche darin integrierten Klassen
und Namespaces (Familien von Klassen) haben.<p>

<p>
Wie immer bei unseren ASP.NET Artikeln k&ouml;nnen Sie vom downloadbaren Sourcecode
nur dann profitieren, wenn Sie das Microsoft .NET Framework SDK auf einem Webserver installiert haben.
Damit werden auf diesem Webserver ASP.NET Seiten ( <i>.aspx</i> ) ausf&uuml;hrbar.
Weiters ist es von Vorteil, da&szlig; der Leser schon Grundkenntnisse bzw. 
Erfahrung in grundlegenden Programmiertechniken besitzt - es finden sich etliche Artikel auf
ASP-Heute, die Ihnen das notwendige Wissen verst&auml;ndlich n&auml;her bringen. 
</p>

<p>
<b>Anmerkung:</b> Dadurch, da&szlig; in C#, wie auch in C++, die Befehle der Programmiersprache der 
englischen Sprache entlehnt, werde ich die sprachspezifischen Befehle, Schl&uuml;sselw&ouml;rter etc., 
direkt aus der C# Syntax &uuml;bernehmen und egebenfalls das entsprechende deutsche &Auml;quivalent 
erkl&auml;ren.</p>

<h2>Wozu eigentlich Klassenprogrammierung in ASP.NET?</h2>
<p>
Das werden sich sicherlich manche von Ihnen jetzt fragen. Klassen bzw. die damit verbundene 
objektorientierte Programmierweise sind sicherlich keine der leichtesten &Uuml;bungen 
f&uuml;r einen Web-Programmierer.
Jedoch sind Klassen der Hauptbestandteil der objektorientierten Programmierung. Also 
was macht C# Klassen so interessant f&uuml;r Webprogrammierer? 
Nun, f&uuml;r den Fall, da&szlig; Sie schon an die Grenzen von Scriptsprachen 
gesto&szlig;en sind, oder die vielseitigen Funktionen des .NET Framework bzw.
Microsoft Windows 2000 DNA optimal einsetzten wollen, so liefert Ihnen dieser Artikel eine
gute Einf&uuml;hrung in das, was es nach der einfachen ASP/ASP.NET Programmierung zu
erlernen lohnt - C# Klassen.</p>

<p>Zu diesem Artikel: Ich habe versucht, Interessierte ohne Basiswissen in C# nicht zu &uuml;berfordern,
und dennoch Profis nicht zu langweilen. Weiters achten Sie auf die Schreibweise 
der C# Befehle (Gro&szlig;-/Kleinschreibung) in den Sourcecodes - denn C# ist <i>case sensitive</i>
und unterscheidet sehr wohl zwischen Gro&szlig;- und Kleinschreibung!
</p>


<h2>Hello World!</h2>

<p>Schon leicht angestaubt, aber nichts destotrotz Tradition - das simple "Hello World" Beispiel.
Es gibt nat&uuml;rlich weitaus einfachere Methoden den Schriftzug "Hello World" im Browserfester 
darzustellen, als mittels einer C# Klasse in ASP.NET.
Aber hier soll das Beispiel als Einstieg f&uuml;r eine Ihnen vielleicht neue, effiziente und vielseitige 
Programmiertechnik geben - die objektorientierte Klassenprogrammierung.</p>

<p>Das Klassenmodell des .NET Frameworks und damit auch in C# ist hierarchisch aufgebaut, 
d.h. im einfachsten Fall enth&auml;lt eine Klasse untergeordete Methoden, Eigenschaften (Properties) 
und einen <i>Constructor</i>, der bei der Instanzierung der Klasse ausgef&uuml;hrt wird.</p>

<p>Sehen wir uns zur weiteren Erk&auml;rung das <i>Hello World</i>-Beispiel an (im Download die Datei
<i>helloworld.aspx</i>):</p>

<p><pre style="background='silver';">
&lt;script Language=C# runat=server&gt;
public class SimpleClass
{ 
  string strText; //deklariere Variable

  //Constructor
  public SimpleClass(string strText) 
  {
    this.strText = strText;
  }
  //Methode der Klasse
  public string DisplayText()
  {
     return strText;
  }
}
&lt;/script>
&lt;% @Page Language="C#" %&gt;
&lt;%
  SimpleClass simple = new SimpleClass("Hello World");
  
  Response.Write(simple.DisplayText().ToString()+"&lt;br&gt;");
%&gt;
</pre></p>

<p>In dieser ASP.NET Seite ist zu beachten, da&szlig; die eigenliche C#-Klasse in einem sogenannten 
ASP.NET Wrapper eingebunden ist. Dieser erm&ouml;glicht die Ausf&uuml;hrung der Klasse am Webserver.
Der Script-Tag deklariert, da&szlig; die Sprache C# ist, und da&szlig; der Codeblock innerhalb
von &lt;SCRIPT&gt; und &lt;/SCRIPT&gt; am Webserver auszuf&uuml;hren ist (runat=server).</p>

<p>Nun aber zum eigenlichen Thema:<br>
Die &ouml;ffentliche Klasse "SimpleClass" wird mittels <i>class</i> Befehl definiert.
"&Ouml;ffentlich" (<i>Public</i>) bedeutet hier, da&szlig; die Klasse auch von fremden
Programmen aufgerufen werden k&ouml;nnte, nicht nur aus der ASP.NET Seite heraus.</p>


<p><pre style="background='silver';">
public class SimpleClass
{
   //Definition vom Eigenschaften und Methoden
   ...
}
</pre></p>

<p>Weiters besitzt die Klasse einen Constructor, der zwingend den gleichen Namen wie die
ihm zugeteilte Klasse haben mu&szlig;.
Der Constructor ist eine spezielle Function oder Method, die  ausgef&uuml;hrt wird,
wenn die Klasse als Objekt instanziert wird. Im Constructor kann man zum Beispiel Resourcen 
reservieren, Datenbank Verbindungen &ouml;ffnen oder Variablen auf definierte Werte setzen.</p>


<p><pre style="background='silver';">
  //Constructor
  public SimpleClass(...) 
  {
    ...
  }
</pre></p>

<p>Immer dann, wenn man eine Klasse als Objekt instanziert, daher ein Kopie der Klasse an eine Variable
&uuml;bergibt, so wird der Contructor der Klasse ausgef&uuml;hrt.</p>

<p>In C# entspricht eine <i>Method</i> (Methode) im allgemeinen einer <i>Sub</i> bzw. <i>Function</i> 
in Visual Basic. Eine Function eines Objektes, die von ausserhalb des Objektes
aufgerufen wird, nennt man <i>Method</i> oder Methode. Eine Objektmethode ruft man &uuml;ber den 
Syntax <i>Object.Method</i> auf. Eine aufrufbare Methode mu&szlig; innerhalb der Klasse als
<i>public</i> defniert sein. Nat&uuml;rlich kann jede Function auch von innerhalb der Klasse
aufgerufen werden. Dies gilt sowohl f&uuml;r von au&szlig;en zug&auml;ngliche (<i>public</i>) als
f&uuml;r nur von innerhalb der Klasse zug&auml;ngliche (<i>private</i>) Functions.</p>

<p><pre style="background='silver';">
public class SimpleClass
{
  //Public Function. Kann als Methode angesprochen werden
  public string DisplayText()
  {
     return strText;
  }
  
  //Private Function, kann nur von innerhalb der Klasse aufgerufen werden.
  private void DeleteText()
  {
     strText = "";
  }
}
</pre></p>

<p>Damit w&auml;ren wir schon beim n&auml;chsten Punkt: dem reinen ASP.NET Teil des Sourcecodes.
Der ASP.NET Teil wird mit <i>&lt;% @Page Language="C#" %&gt;</i> eingeleitet.
Hier wird die Programmiersprache der ASP.NET Seite festgelegt. Im allgemeinen
mu&szlig;en in einer ASP.NET Seite alle Codebl&ouml;cke, sowohl die innerhalb von &lt;SCRIPT&gt;
als auch die innerhalb von &lt;% %&gt; die gleiche Programmiersprache haben.</p>

<p>Die ASP.NET Seite erstellt mittels <i>new</i> eine neue Instanz des <i>SimpleClass</i> Objektes, 
und speichert sie in der Variablen <i>simple</i>. Nat&uuml;rlich ist damit die Variable <i>simple</i> vom 
Type der Klasse. Der Wert, der in den Klammern des Klassennamens steht, wird automatisch an
den Contructor der Klasse &uuml;bergeben.</p>

<p><pre style="background='silver';">
SimpleClass simple = new SimpleClass("Hello World");
</pre></p>

<p>Bei der Instanzierung des <i>SimpleClass</i> Objektes wird der Wert 
<i>"Hello World"</i> in der klassen-internen Variable <i>strText</i> gespeichert.</p>

<p>Nun zur n&auml;chsten Zeile des Sourcecodes, zur <i>DisplayText</i>-Methode in unserem Beispiel.
Die <i>DisplayText</i> Methode der <i>SimpleClass</i> Klasse tut nicht wirklich viel, sie gibt nur 
einen Wert aus der Klasse zur&uuml;ck, n&auml;mlich den Wert der klassen-intern in 
der String-Variablen <i>strText</i> gespeichert ist. 
Genauere Details &uuml;ber die Verwendung von Methoden k&ouml;nnen Sie in den nachfolgenden
Abschnitten lesen.</p>

<p>Schlie&szlig;lich erfolgt der Aufruf der <i>DisplayText</i> Methode der Klasse:</p>


<p><pre style="background='silver';">
simple.DisplayText()
</pre></p>

Der R&uuml;ckgabewert der <i>DisplayText</i> Methode wird mittels <i>ToString</i>
explizit in eine Zeichenkette umgewandelt und mittels <i>Response.Write</i> im
Browserfenster ausgegeben.</p>

<p><pre style="background='silver';">
  Response.Write(simple.DisplayText().ToString()+"&lt;br&gt;");
</pre></p>

<p><i>Response.Write</i> ist Ihnen sicher von ASP her vertraut. Der Befehl sendet einfach eine Zeichenkette
zum Browser.</p>

<p>Sollten Sie sich jetzt fragen, wo die tollen
ASP.NET Webform Controls bleiben, so mu&szlig; Ich sie vertr&ouml;sten.
Diese will ich Ihnen auch nicht vorenthalten, aber vertage deren Abhandlung auf 
einen der folgenden Artikel, der sich dann mit anspruchsvolleren Themen wie z.B. 
Vererbung von Klassen, Interfaces oder Event-Triggerung besch&auml;ftigt.
Dort sollen dann auch die ersehnten ASP.NET Webform Controls zum Einsatz kommen.</p>



<h2>Methoden</h2>

<p>In dem obigen Beispiel habe ich einen Wert mit Hilfe des Keywords <i>return</i> zur&uuml;ck gegeben. 
Damit der C# Compiler auch wirklich zufrieden ist, mu&szlig; ich in der Method selbst den Datentyp angeben, 
der in diesem Fall <i>string</i> lautet:</p>

<p><pre style="background='silver';">
...
public string DisplayText()
{ 
   ... 
}
...
</pre></p>

<p>Nat&uuml;rlich k&ouml;nnen Sie jeden Datentyp (integer, byte, bool, double, etc.)
den Sie ben&ouml;tigen bei der Deklaration der Method festlegen. 
Sollte die Method einmal keinen Wert mittels <i>return</i> zur&uuml;ckgeben,
so kennzeichen Sie dies bei der Deklaration der Method mit der Angabe von <i>void</i>.</p>

<p>Die benutzte Method <i>DisplayText()</i> war ja nicht besonders anspruchsvoll. 
Sie hat gerade mal einen Wert vom Datentyp <i>string</i> zur&uuml;ckgegeben. 
Wow! Aber C# kann bei Weitem mehr!! Deshalb habe ich auch ein weiteres Beispiel vorbereitet.</p>

<p>Sie erinnern sich sicher noch an das l&ouml;sen von quadratischen Gleichungen aus Ihrer Schulzeit.
Quadratische Gleichungen - einmal abgesehen von der M&ouml;glichkeit, da&szlig; komplexe L&ouml;sungen f&uuml;r manche 
Fachgebiete keine L&ouml;sungen darstellen - besitzten im allgemeinen immer zwei L&ouml;sungen.
Deshalb wird auch unsere Methode zwei L&ouml;sungs-Werte retour liefern.
Nebenbei, mathematische Aufgaben eigenen sich hervorragend zur Demonstration von Konzepten in Zusammenhang
mit Klassen, da sie meist keine allzu gro&szlig;en Gedankenexperimente erfordern und man sich dadurch auf
die Programmiertechnik konzentrieren kann.</p>

<p>Das nun folgende Beispiel verwendet zum L&ouml;sen der Gleichung <i>x<sup>2</sup>+4*x-7=0</i> die
die "kleine L&ouml;sungs Formel" in "p" und "q". Der nun folgende Sourcecode stellt eine von tausenden
M&ouml;glichkeiten der Durchf&uuml;hrung dar - Fangen wir mit dem ersten Abschnitt an:</p>

<p><pre style="background='silver';">
&lt;script Language=C# runat=server &gt;
class QuadExpr
{
 double dVarP, dVarQ;
 double dZwischen;

 //Constructor
 public QuadExpr(double dVarP, double dVarQ)
 {
   this.dVarP = dVarP;
   this.dVarQ = dVarQ;
 }
...
</pre></p>

<p>Wiederum wird eine neue Klasse erstellt, die ben&ouml;tigten Variablen werden deklariert und der Constructor
der Klasse angegeben. Neu ist hier die Verwendung von <i>this</i> in Verbindung mit den 
Namen der Variablen der Klasse innerhalb des Constructors. 
Eine als <i>this</i> bezeichnete Variable ist innerhalb aller <i>Member Functions</i> der Klasse 
verf&uuml;gbar und steht stellvertretend f&uuml;r die aktuellen Instanz der Klasse, also
def&uuml;r das Objekt selbst.</p>

<p><pre style="background='silver';">
//Method
 public void Calculate(out double dResX1, out double dResX2)
 {
  dZwischen = Math.Sqrt(Math.Pow((dVarP/2),2)-dVarQ);
  dResX1 = -dVarP/2 + dZwischen;
  dResX2 = -dVarP/2 - dZwischen;
 }
}
&lt;/script&gt;
</pre></p>

<p>Die angef&uuml;hrte Methode <i>Calculate</i> berechnet die L&ouml;sungen der quadratischen Gleichung.
Damit ich jetzt aber die zwei L&ouml;sungen innerhalb einer Method zur&uuml;ckgeben kann,
mu&szlig; ich bei der Deklaration der Methodenparameter die Ergebnisvariablen <i>dResX1</i> und 
<i>dResX2</i> mittels <i>out</i> als R&uuml;ckgabeparameter kennzeichenen. 
Ein <i>out</i> Parameter erm&ouml;glicht die Wert&uuml;bergabe von noch 
uninitialisierten Variablen. Die beiden Methoden der <i>System.Math</i> Klasse berechnen die 
Quadratwurzel eines Wertes (<i>Sqrt</i>), oder quadrieren (<i>Pow</i>) den &uuml;bergebenen Wert.</p>

<p><pre style="background='silver';">
&lt;%@ Page Language="C#" %&gt;
&lt;%
  QuadExpr quadex =  new QuadExpr(4,-7);
  double dResX1,dResX2;
  quadex.Calculate(out dResX1, out dResX2);
  
  Response.Write("x1: "+dResX1.ToString()+"&lt;br&gt;");
  Response.Write("x2: "+dResX2.ToString());
%&gt;
</pre></p>

<p>Im Hauptteil der ASP.NET Seite wird nach dem Erstellen des <i>quadex</i> Objekts (vom Typ
der Klasse QuadExpr) die Method <i>Calculate</i> aufgerufen, welche die Ergebnisvariablen
der L&ouml;sung der quadratischen Gleichung errechnet und als <i>out</i> Parameter 
an die ASP.NET Seite &uuml;bergibt. Wie gewohnt erfolgt die Ausgabe der Variablenwerte mittels 
<i>Response.Write</i>.</p>

<p>Ein weiterer wichtiger Aspekt in Bezug auf Klassen sind die Eigenschaften oder Propertieseiner Klasse.</p>


<h2>Eigenschaften (Properties)</h2>

<p>Zum Abschlu&szlig; m&ouml;chte ich Ihnen eine Einf&uuml;hrung in die <i>Properties</i> (Eigenschaften) 
von Klassen geben.

Properties sind im allgemeinen die Members (Mitglieder) einer Klasse, &uuml;ber die man Werte an das Objekt
&uuml;bergeben oder aus dem Objekt erhalten kann. Properties stehen in einem engem Verh&auml;ltnis mit den
sogenannten <i>Accessor Functions</i> (<i>get</i> und <i>set</i>), die das Steuern und &Uuml;berwachen der 
Ein- und Ausgaben erlauben, die &uuml;ber eine bestimmte Property des Objektes erfolgen.</p>

<p>Sie k&ouml;nnen mit Properties &uuml;ber den <i>get</i> Accessor die aktuellen Werte von Variablen 
der Klasse auslesen, auch wenn die Variablen selbst innerhalb der Klasse als <i>private</i> deklariert sind.
Mit Hilfe des <i>set</i> Accessors k&ouml;nnen Sie Klassen-Variablen neue Werte zuweisen.
Das kontrollierte Zuweisen und Auslesenvon Variablen der Klasse erfolgt also mit den 
erw&auml;hnten <i>Accessor Functions</i> <i>get {...}</i> und <i>set {...}</i>.</p>

<p>Mit dem n&auml;chsten, einfachen Beispiel m&ouml;chte ich dies demonstrieren.
Der &Uuml;bersicht halber habe ich den gesamten Sourcecode in die Hauptabschnitte aufgeteilt.</p>

<p><pre style="background='silver';">
&lt;script Language=C# runat=server&gt;
public class GetSetVar
{ 
  private int nVar1=0; //deklariere Variable

  //Property
  public int MyProperty 
  {
    //Accessor function get
    get {
      return nVar1;
    }
...
</pre></p>

<p>In dem ersten Abschnitt deklariere ich zun&auml;chst die zu behandelnde Variable <i>nVar1</i>. 
Da die Variable nur von Funktionen innerhalb der Klasse gelesen werden soll, wird so als <i>private</i>
deklariert. 
Dann habe ich die eigentliche Property namens Variable deklariert.
Die Deklaration beinhaltet die oben besprochenen Accessor Function
<i>get</i>, welche den aktuellen Wert einer privaten (<i>private</i>) Variablen holt.
Die Variable hat den momentanen Wert <i>0</i> entsprechend der Variablendekaration. 
Um den Wert der Variablen zu &auml;ndern, definiert man eine <i>set</i> Accessor Function:</p>

<p><pre style="background='silver';">
...
  //Property
  public int MyProperty
  {
    ...
    //Accessor function get
    set {
      nVar1 = value;
    }
  }
}
...
</pre></p>

<p>Das Keyword <i>value</i> innerhalb der Definition des <i>set</i> Accessors enth&auml;lt dabei immer
den Wert, der der Property des Objektes gerade zugewiesen wurde.</p>

<p>Mittels <i>set</i> Accessor definiere ich, was bei der Zuweisung eines Wertes 
zur Property namens MyProperty an geschehen soll. In unserem Beispiel wird der Wert einfach in
der privaten Variablen <i>nVar1</i> im Objekt gespeichert.</p>

<p>Die vollst&auml;ndige Deklaration der Property namens <i>MyProperty</i> innerhalb der Klasse 
sieht also wie folgt aus:</p>

<p><pre style="background='silver';">
...
  //Property
  public int MyProperty
  {
    //Accessor function get
    get {
      return nVar1;
    }
    //Accessor function get
    set {
      nVar1 = value;
    }
  }
}
...
</pre></p>

<p>Nun wird im letzten Abschnitt des Codeblocks der Eigenschaft <i>MyProperty</i>
des <i>GetSetVar</i> Objektes der Wert <i>3</i> zugewiesen. Dabei wird in der Klasse intern der
Teil des <i>set</i> Accessors der <i>MyProperty</i> Eigenschaft ausgef&uuml;hrt.</p>

<p>In der darauffolgenden Anweisung wird der Wert der Property namens <i>MyProperty</i> ausgelesen.
Genauer gesagt, es wird der Wert ausgelesen, den der <i>get</i> Accessor der <i>MyProperty</i>
Eigenschaft zur&uuml;ckgibt.</p>

<p><pre style="background='silver';">
&lt;% @Page Language="C#" %&gt;
&lt;%
  GetSetVar MyVariable = new GetSetVar();
  MyVariable.MyProperty = 3;
  
  Response.Write(MyVariable.MyProperty.ToString());
%&gt;
</pre></p>

<p>Bevor ich der Eigenschaft <i>MyProperty</i> einen neuen Wert zuweisen kann, 
mu&szlig; ich nat&uuml;rlich wieder ein neues Objekt mit der Anweisung <i>new</i> erstellen. 
Danach erfolgt die Zuweisung mit Hilfe der Property (Eigenschaft) namens <i>MyProperty</i> neuen 
Objekts <i>MyVariable</i>. 
Zum Abschlu&szlig; erfolgt wieder die Ausgabe des Wertes der Property an den Browser mittels 
<i>Response.Write</i> Befehl.</p>

<p><b>Beachte:</b> Wie Ihnen sicherlich schon aufgefallen ist, mu&szlig; hier
eine Konvertierung (Umcasten) des Datentyps <i>Integer</i> auf <i>String</i> erfolgen.
Dies ist deshalb erforderlich, da <i>Response.Write</i> in ASP.NET nur Strings behandeln kann.
Andernfalls erwartet Sie ein l&auml;stiger Compiler Error!</p>


<h2>Schlu&szlig;bemerkung</h2>

<p>Dieser Artikel war sicher eine der k&uuml;rzesten Einf&uuml;hrungen in die Verwendung von 
Klassen und eigentlich nur ein kleiner Schritt in die objektorientierte Programmierung. 
&Uuml;ber die objektorientierte Programmiertechnik und &uuml;ber Klassen wurden bereits ganze Berge
von B&uuml;cher geschrieben, aber hier sollten Sie dennoch einen raschen Einstieg in die
wesentlichen Punkte der objektorientierten Programmierung von C# Klassen in ASP.NET erhalten</p>

<p>Sie verf&uuml;gen nun &uuml;ber die Grundlagen um etwas mit dem Begriff "Klassen"
im Bezug auf Programmiersprachen anzufangen. 
Sie k&ouml;nnen Klassen mit oder ohne Constructors instanzieren, Methods definieren und 
diese au&szlig;erhalb des &lt;SCRIPT&gt; Blocks der Klassendefinition in ASP.NET aufrufen. 
Sie k&ouml;nnen den Methods (Methoden) Werte &uuml;bergeben und sogar mehrere Werte zur&uuml;ckgeben.
Nun sollten Sie auch in der Lage sein, mittels Properties Werte aus einem Objekt zu holen oder 
gegebenenfalls wieder im Objekt zu speichern.</p>

<p>Im n&auml;chsten Artikel zu diesem Thema werden Sie dann fortgeschrittene Techniken der
objektorientierten Programmierung unter C# kennenlernen, wie Klassen Vererbung von einer
Basisklasse, die Ben&uuml;tzung von Operatoren oder Wissenswertes &uuml;ber die Event-Behandlung.
Nat&uuml;rlich werde ich Ihnen Interfaces nicht vorenthalten oder wie man externe C#-Dateien in 
ASP.NET Code einbindet.</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p>
<h2>Download des Codes</h2>
<p><a href="../Code/20001012.zip">Klicken Sie hier</a>, um den Download zu starten.<br><SPAN class="content">http://www.aspheute.com/code/20001012.zip</span></p>
<h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20000713.htm">A Brief History of C#</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000713.htm</span><br>
<a href="../artikel/20031010.htm">Einstieg in Visual Studio.NET - die erste Webanwendung mit Visual C#</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20031010.htm</span><br>
<a href="../artikel/20011206.htm">Performancemessungen in .NET</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20011206.htm</span><br>
<a href="../artikel/20001019.htm">Sichere Konvertierungen von Referenztypen</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20001019.htm</span><br>
<a href="../artikel/20011010.htm">Sprachenintegration in .NET</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20011010.htm</span><br>
<a href="../artikel/20020225.htm">Thumbnailgenerierung in .NET</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20020225.htm</span><br>
<a href="../artikel/20010619.htm">Transaktionen in C# Business Tier Komponenten</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010619.htm</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
