<HTML>
<HEAD>
<TITLE>Page Fragment Caching 101</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Mit ASP.NET haben Sie nun die M&ouml;glichkeit einzelne Regionen einer Seite mit Hilfe von ASP.NET User Controls die Content Expiration individuell an den dynamisch generierten Content anzupassen.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,User Control,Pagelet,OutputCache,fragment caching,content expiration,policy,Performance,Optimierung,Caching">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Page Fragment Caching 101</H1>
<p>
Geschrieben von: <a href="../autoren/christianholm.htm">Christian Holm</a><br>
Kategorie: <a href="../kategorien/ASPdotNET.htm">ASP.NET</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20011009"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Eine dynamische Seite zu cachen ist bei vielen gleichzeitigen Userzugriffen ganz praktisch und spart vor allem
Web Server Resourcen. Bei komplexeren dynamischen Seiten kann es aber vorkommen, da&szlig; der dynamische Content
unterschiedliche "Verfallsdaten" haben kann. Mit ASP.NET haben Sie nun die M&ouml;glichkeit einzelne Regionen einer Seite
mit Hilfe von ASP.NET User Controls (vormals ASP+ Pagelets) die Content Expiration individuell an den dynamisch 
generierten Content anzupassen. Dieser Artikel soll Ihnen einen &Uuml;berblick &uuml;ber die ASP.NET Fragment 
Caching Funktionalit&auml;t bieten. 
</p>

<p>
Im Artikel <a href="../artikel/20011008.htm">Output Caching 101</a> haben Sie die Grundfunktionalit&auml;t des
Output Cachings kennengelernt. Nun geht es einen Schritt weiter - dieser Artikel zeigt Ihnen anhand von Beispielen
wie man nun einzelne Regionen einer ASP.NET Seite mit unterschiedlichen Duration-Attributwerten versehen kann, um
den jeweiligen Content nach Ablauf einer unabh&auml;ngigen Zeitspanne erneut in den Cache abzulegen.
</p>

<p>
Wie die Beispiele des <a href="../artikel/20011008.htm">Output Caching 101</a> Artikels gezeigt haben, ist das Caching mit
der OutputCache Directive zu aktivieren. &Auml;hnlich wie bei der <i>Page</i> Directive darf diese nur genau einmal in einer
Web Site vorkommen. Daher mu&szlig; man sich mit ASP.NET User Controls (vormals ASP+ Pagelets) behelfen um so den Content
verschiedene Expiration-Periods zuzuweisen.
</p>

<p>
Als erstes Beispiel habe ich eine dynamische Bef&uuml;llung einer <i>DropDownList</i> Web Control gew&auml;hlt. Der Content der
Control wird aus der Northwind SQL Datenbank geholt. Dabei l&auml;uft der Content der Control, welcher im Cache angelegt ist,
in einer Minute ab. Innerhalb dieser Zeit k&ouml;nnen beliebig oft Postbacks durchgef&uuml;hrt werden, die Listeneintr&auml;ge der
Control werden immer aus dem Cache geholt (die Cache-Location ist hier nicht n&auml;her definiert), und es wird nicht 
andauernd auf die Datenbank zugegriffen. Dies spart einiges an Serverresourcen und da hier das Caching auch serverseitig
m&ouml;glich ist, k&ouml;nnen somit auch mehrere User gleichzeitig aus dem Servercache-Repository bedient werden.
</p>

<p>
Da wir User Controls verwenden, erstellen wir f&uuml;r das Beispiel zwei Dateien (aspx und ascx). Zuerst eine 
.aspx Datei mit dem Namen <b>FragCachedUsrCtrl.aspx</b>. Diese enth&auml;lt die Referenz auf unsere sp&auml;tere User 
Control und die Einbindung derer:
</p>

<pre style="background='silver';">
&lt;%@ Register TagPrefix="DataUsrCtrl" TagName="MyDropDownListSuppliers" Src="MyDropDownListSuppliers.ascx" %&gt;

&lt;html&gt;

  &lt;script language="C#" runat="server"&gt;
      void Page_Load(Object Src, EventArgs E ) 
      {
          TimeStamp.Text = DateTime.Now.ToString();
      }
  &lt;/script&gt;

  &lt;body&gt;
    &lt;form runat=server&gt;
    &lt;h3&gt;Select Shippers&lt;/h3&gt;
    &lt;DataUsrCtrl:MyDropDownListSuppliers runat="server"/&gt;
    &lt;p&gt;
        Page Generated at: &lt;asp:label id="TimeStamp" runat="server" /&gt;
    &lt;/p&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>
Zus&auml;tzlich zur eigentlichen DropDownList Control wird hier eine TimeStamp (ASP.NET Label Control <i>TimeStamp)</i> erstellt, die bei jedem Postback der
Seite das Datum und Uhrzeit des Servers angibt. Damit k&ouml;nnen wir auf einfache Art und Weise das partielle 
Caching der Seite &uuml;berpr&uuml;fen. Die eigentliche Arbeit (das dynamische Bef&uuml;llen der DropDown List Control) 
wird, wie erw&auml;hnt von unserer gecachten User Control (<b>MyDropDownListSuppliers.ascx</b>) durchgef&uuml;hrt:
</p>

<pre style="background='silver';">
&lt;%@ OutputCache Duration="60" VaryByParam="none"%&gt;
&lt;%@ Import Namespace="System.Data" %&gt;
&lt;%@ Import Namespace="System.Data.SqlClient" %&gt;
&lt;script language="C#" runat="server"&gt;
    void Page_Load(Object sender, EventArgs e)
    {
        if(!Page.IsPostBack)
        {
            string strSqlQuery = "SELECT CompanyName, SupplierID FROM Suppliers";
            SqlConnection MyConnection = new SqlConnection("server=BLUESCREEN;
                database=northwind;Trusted_Connection=yes");
            SqlDataAdapter MyCommand = new SqlDataAdapter(strSqlQuery, MyConnection);
            
            DataSet dsetShippers = new DataSet();
            MyCommand.Fill(dsetShippers,"Shippers");
            MyDropDownListSuppliers.DataSource = dsetShippers.Tables["Shippers"].DefaultView;
            MyDropDownListSuppliers.DataTextField = "CompanyName";
            MyDropDownListSuppliers.DataValueField = "SupplierID";

            MyDropDownListSuppliers.DataBind();
            TimeStamp.Text = DateTime.Now.ToString();
         }
     }
&lt;/script&gt;
&lt;p&gt;
    &lt;asp:DropDownList id="MyDropDownListSuppliers" runat="server" /&gt;
    Suppliers' Data Accessed at: &lt;asp:label id="TimeStamp" runat="server" /&gt;
&lt;/p&gt;
</pre>

<p>
Im folgenden Screenshot sehen Sie das Ergebnis des Http-Requests auf die <b>FragCachedUsrCtrl.aspx</b> Datei. Zus&auml;tzlich 
auch das Ergebnis wenn von einem anderen Client aus zugegriffen wird:
</p>

<IMG SRC="/artikel/Bilder/200110/20011009_1.png" width="638" height="484" alt="" border="0">

<p>
Wie Sie unschwer an den unterschiedlichen TimeStamps sehen k&ouml;nnen, werden die Daten aus dem Cache bezogen und nicht
wiederholt aus der Datenbank. Das war ja nun einfach - Wie das Wort <i>Fragment</i> suggeriert k&ouml;nnen Sie damit auch 
mehrere User Controls unabh&auml;ngig im Cache ablegen. Zun&auml;chst die aspx Datei <b>FragCachedUsrCtrMulti.aspx</b>:
</p>

<pre style="background='silver';">
&lt;%@ Register TagPrefix="DataUsrCtrl" TagName="MyDropDownListSuppliers" Src="MyDropDownListSuppliers.ascx" %&gt;
&lt;%@ Register TagPrefix="DataUsrCtrl" TagName="MyDropDownListProducts" Src="MyDropDownListProducts.ascx" %&gt;
&lt;html&gt;
  &lt;script language="C#" runat="server"&gt;
      void Page_Load(Object Src, EventArgs E ) 
      {
          TimeStamp.Text = DateTime.Now.ToString();
      }
  &lt;/script&gt;

  &lt;body&gt;
    &lt;form runat=server&gt;
    &lt;h3&gt;Select Suppliers&lt;/h3&gt;
    &lt;DataUsrCtrl:MyDropDownListSuppliers runat="server"/&gt;
    &lt;h3&gt;Select Products&lt;/h3&gt;
    &lt;DataUsrCtrl:MyDropDownListProducts runat="server"/&gt;
    
    &lt;p&gt;
    Page Generated at: &lt;asp:label id="TimeStamp" runat="server" /&gt;
    &lt;/p&gt;
    &lt;/form&gt;
  &lt;/body&gt;
&lt;/html&gt;
</pre>

<p>
Es wurde lediglich eine Zeile f&uuml;r die Referenz auf die zus&auml;tzliche User Control <b>MyDropDownListProducts.ascx</b> 
und eine Zeile f&uuml;r deren Aufruf hinzugef&uuml;gt. Die User Control unterscheidet sich in der Ausf&uuml;hrung von der
vorig benutzten <b>MyDropDownListSuppliers.ascx</b> nur im Querystring, einer unterschiedlichen
Contentexpriation (120 Sekunden statt 60) und die sonst noch n&ouml;tigen Anpassungen:
</p>

<pre style="background='silver';">
&lt;%@ OutputCache Duration="120" VaryByParam="none"%&gt;
...
string strSqlQuery = "SELECT ProductID, ProductName FROM Products";
...
&lt;p&gt;
    &lt;asp:DropDownList id="MyDropDownListProducts" runat="server" /&gt;
    Products' Data Accessed at: &lt;asp:label id="TimeStamp" runat="server" /&gt;
&lt;/p&gt;
</pre>

<p>
Im Browser sieht man die unterschiedlichen Contentexpirationzeiten anhand der jeweiligen TimeStamps:
</p>

<IMG SRC="/artikel/Bilder/200110/20011009_2.png" width="652" height="352" alt="" border="0">

<p>
Da&szlig; dies nicht nur zuf&auml;llige Ergebnisse sind, sieht man am Pagerenderingvorgang, den man durch das <i>True</i>-setzen
des <i>Trace</i> Attributs der Page Directive erh&auml;lt:
</p>

<pre style="background='silver';">
&lt;%@ Page language="C#" Trace="true"%&gt;
</pre>

<p>
Ergebnis des ersten Http Requests:
</p>

<IMG SRC="/artikel/Bilder/200110/20011009_3.png" width="599" height="701" alt="" border="0">

<p>
Ein paar Sekunden sp&auml;ter sieht der Control Tree nur mehr so aus - das Rendern der Dropdownlisten fehlt hier, da ja diese
im Cache vorhanden (noch g&uuml;ltig) sind:
</p>

<IMG SRC="/artikel/Bilder/200110/20011009_4.png" width="610" height="304" alt="" border="0">

<h2>Schlu&szlig;bemerkung</h2>

<p>
Dies war ein schneller und einfacher Einstieg in die neuen M&ouml;glichkeiten die das .NET Fragment Caching bietet.
Der Programmieraufwand ist gering und der Effekt ist gro&szlig; - der Datenbankserver wird bei vielen gleichzeitigen Zugriffen
deutlich entlastet. Zudem k&ouml;nnen bei komplexen dynamischen ASP.NET Seiten einzelne Regionen (in Form von 
eingebundenen User Controls) unabh&auml;ngig generiert werden.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p>
<h2>Download des Codes</h2>
<p><a href="../Code/20011009.zip">Klicken Sie hier</a>, um den Download zu starten.<br><SPAN class="content">http://www.aspheute.com/code/20011009.zip</span></p>
<h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20001114.htm">ASP.NET User Controls im Einsatz</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20001114.htm</span><br>
<a href="../artikel/20031010.htm">Einstieg in Visual Studio.NET - die erste Webanwendung mit Visual C#</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20031010.htm</span><br>
<a href="../artikel/20011008.htm">Output Caching 101</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20011008.htm</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
