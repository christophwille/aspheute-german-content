<HTML>
<HEAD>
<TITLE>XHTML Strict 1.0 mit ASP.NET 1.1</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Da das Thema XHTML (endlich) immer popul&auml;rer wird, habe ich die Website 
http://www.waltergmbh.de nach ASP.NET 1.1 und XHTML 1.0 Strict portiert. Wie die Umsetzung von XHTML 1.0 Strict mit ASP.NET 1.1 und Visual Studio.NET 2003 funktioniert zeigt ..">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,XHTML,Strict,ASP.NET 1.1,Visual Studio 2003,Validator,valid,gültig,Dokument">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>XHTML Strict 1.0 mit ASP.NET 1.1</H1>
<p>
Geschrieben von: <a href="../autoren/alexanderzeitler.htm">Alexander Zeitler</a><br>
Kategorie: <a href="../kategorien/ASPdotNET.htm">ASP.NET</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20041025"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Da das Thema XHTML (endlich) immer popul&auml;rer wird, habe ich die Website 
<a href="http://www.waltergmbh.de" target="_blank">http://www.waltergmbh.de</a> 
nach ASP.NET 1.1 und XHTML 1.0 Strict portiert. Wie die Umsetzung von XHTML 1.0 Strict mit ASP.NET 1.1 und 
Visual Studio.NET 2003 funktioniert, werde ich in diesem Artikel beschreiben.
</p>

<h2>Grundlagen</h2>
<p>
Um XHTML 1.0 Strict mit ASP.NET 1.1 und Visual Studio.NET zu realisieren sind zwei &Auml;nderungen notwendig:
</p>

<ol>
	<li>Die Unterst&uuml;tzung von XHTML muss bereits in Visual Studio.NET gew&auml;hrleistet sein, damit der erzeugte bzw. 
		eingegebene (X)HTML-Code im Designer bzw. in der HTML-Ansicht bereits validiert wird.
	<li>Nicht XHTML-konformer, von ASP.NET zur Laufzeit erzeugter Code muss zur Laufzeit in XHTML-konformen Code 
		umgewandelt werden.
</ol>

<h2>XHTML in Visual Studio.NET implementieren</h2>
<p>
Visual Studio.NET erlaubt auf Dokumentebene die Festlegung, welche (X)HTML-Version ASP.NET als Output zur Laufzeit 
rendern soll. Festgelegt wird diese Option in den Dokumenteigenschaft &uuml;ber die Eigenschaft "targetSchema". Die 
Informationen &uuml;ber das jeweilige (X)HTML-Schema in Visual Studio.NET werden in sog. XML-Schema-Dateien abgelegt. Diese 
definieren, welches (X)HTML-Tag in welchem Kontext und mit welchen Attributen verwendet werden darf.
</p>
<p>
Um nun XHTML in Visual Studio.NET validieren zu k&ouml;nnen, ben&ouml;tigen wir also eine Erweiterung der bestehenden XML-Schemas.
</p>
<p>
Die bestehenden Schemas befinden sich unter <i>C:\Programme\Microsoft Visual Studio .NET 2003\Common7\Packages\schemas\html</i>. 
Das Schema f&uuml;r HTML 4.0 befindet sich z.B. in der Datei nav4_0.xsd und ist mit einer Gr&ouml;&szlig;e 78kb bereits recht umfangreich. 
F&uuml;r das bessere Verst&auml;ndnis des Aufbaus von XML Schemas empfehle ich den 
<a href="http://www.microsoft.com/germany/library/webparts/mmsredir.aspx?target=/webcasts/msdn/MSDN_WebcastLive_33.wmv" target="_blank">Webcast zu XML Schemas von Dirk Primbs und Frank Fischer</a>.
</p>
<p>
&Ouml;ffnet man das HTML 4.0 XML Schema in Visual Studio.NET, pr&auml;sentiert es sich wie folgt:
</p>

<a href="../artikel/20041025_1l.png" target="_blank"><IMG SRC="/artikel/Bilder/200410/20041025_1s.png" width="590" height="349" alt="" border="0"></a>

<p>
Ich m&ouml;chte an dieser Stelle das Schema nicht ins Detail zerpfl&uuml;cken, eine kurze Erkl&auml;rung anhand des div-Tags soll 
gen&uuml;gen - dessen Definition sieht im Schema wie folgt aus:
</p>

<a href="../artikel/20041025_2l.png" target="_blank"><IMG SRC="/artikel/Bilder/200410/20041025_2s.png" width="590" height="469" alt="" border="0"></a>

<p>
Wie man sieht, steht an oberster Stelle das div-Tag als <i>complexType</i> definiert. Darunter befinden sich die beiden 
Elemente "InlineContent" und "BlockContent", welche ihrerseits wiederum als complexTypes definiert sind und die 
zugelassenen HTML-Elemente innerhalb des div-Tags definieren. Die Attribute wie z.B. "align" werden Attribute dargestellt. 
Wirft man einen Blick in den XML-Code, sieht man, dass align eine Restriction besitzt, welche durch eine Enumeration 
abgebildet wird. Hier tauchen die bekannten Optionen wie left, center usw. f&uuml;r das align-Attribut auf.
</p>

<pre style="background='silver';">
&lt;xsd:element name="div"&gt;
    &lt;xsd:complexType mixed="true"&gt;
        &lt;xsd:choice&gt;
           &lt;xsd:element ref="InlineContent" /&gt;
            &lt;xsd:element ref="BlockContent" /&gt;
        &lt;/xsd:choice&gt;
        &lt;xsd:attribute name="align" default="left"&gt;
            &lt;xsd:simpleType&gt;
                &lt;xsd:restriction base="xsd:NMTOKEN"&gt;
                    &lt;xsd:enumeration value="left" /&gt;
                    &lt;xsd:enumeration value="center" /&gt;
                    &lt;xsd:enumeration value="right" /&gt;
                    &lt;xsd:enumeration value="justify" /&gt;
                &lt;/xsd:restriction&gt;
            &lt;/xsd:simpleType&gt;
        &lt;/xsd:attribute&gt;
        &lt;xsd:attribute name="class" vs:mapstoname="className" /&gt;
        &lt;xsd:attribute name="id" /&gt;
        &lt;xsd:attribute name="style" vs:builder="style" /&gt;
        &lt;xsd:attributeGroup ref="coreLanguage" /&gt;
    &lt;/xsd:complexType&gt;
&lt;/xsd:element&gt;
</pre>

<p>
Um Visual Studio.NET nun mit Schema-Informationen &uuml;ber XHTML 1.0 Strict zu versorgen, m&uuml;ssen also die gesamten HTML-Tags 
gem&auml;&szlig; der Definition von XHTML in einer Schema-Datei abgelegt werden. 
</p>
<p>
Gl&uuml;cklicherweise hat diese Arbeit bereits jemand erledigt: das W3-Consortium definiert die MarkUp-Sprachen wie HTML oder 
eben XHTML in XML-Schemas. Allerdings l&auml;sst sich das 
<a href="http://www.w3.org/2002/08/xhtml/xhtml1-strict.xsd" target="_blank">XHTML-Schema des W3C</a> 
nicht 1:1 f&uuml;r Visual Studio.NET verwenden, da diese einige Charakteristika aufweisen, die Visual Studio.NET nicht 
verarbeiten kann. Deshalb sind einige <a href="http://schneegans.de/frontpage/xhtml-schema/" target="_blank">Anpassungen</a> 
notwendig, die wiederum Christoph Schneegans bereits vorgenommen hat. Diese wurden in Teilen nochmals von Robbie Harris 
<a href="http://www.wellitworkedlasttime.com/robbie/resources/code/" target="_blank">modifiziert</a>. 
Seine Version der Schema-Definition ist es letztlich auch, die ich hier verwende.
</p>
<p>
In dem <a href="http://www.wellitworkedlasttime.com/robbie/resources/code/vsxhtml/vsxhtml.zip" target="_blank">ZIP-File</a>, 
das Robbie zum Download anbietet, befindet sich neben der XHTML-Schema-Definition eine neue Template f&uuml;r WebForms, 
die in das Verzeichnis <i>C:\Programme\Microsoft Visual Studio .NET 2003\VC#\VC#Wizards\CSharpAddWebFormWiz\Templates\1031</i> 
kopiert werden muss. Hierdurch werden neue WebForms als XHTML-Dokumente definiert.
</p>
<p>
Damit ist Schritt 1 abgeschlossen und Visual Studio.NET 2003 XHTML-tauglich.
</p>

<h2>XHTML-konformen Code zur Laufzeit erzeugen</h2>
<p>
Generell haben ASP.NET Seiten zwei Elemente, die nicht XHTML-konform sind. Zum einen ist dies das Hidden-Formularelement, 
welches den ViewState f&uuml;r ASP.NET transportiert. Das Hidden-Element mu&szlig; innerhalb eines anderen Block-Elements stehen, 
damit es valides XHTML darstellt. Bei ASP.NET steht dieses Element jedoch innerhalb des Body-Tags. Die einfachste 
L&ouml;sung ist deshalb, das Hidden-Element in einem div-Element zu verpacken.
</p>
<p>
Das zweite Manko in ASP.NET Seiten ist die Definition des Form-Elements von ASP.NET. Dieses beinhaltet zur Identifizierung 
das name-Attribut, welches allerdings nicht XHTML-konform ist. XHTML erwartet stattdessen das id-Attribut, d.h. die beiden 
Attribute m&uuml;ssen zur Laufzeit ausgewechselt werden.
</p>
<p>
Die Modifikation von (X)HTML-Code zur Laufzeit l&auml;sst sich relativ geschickt durch sog. ResponseFilter realisieren. Eine 
gelungene Implementierung eines solchen ResponseFilters f&uuml;r XHTML hat Milan Negovan in seinem Artikel 
<a href="http://www.aspnetresources.com/articles/HttpFilters.aspx" target="_blank">Producing XHTML-Compliant Pages With Response Filters</a>
vorgestellt.
</p>
<p>
Die Verwendung des ResponseFilters habe ich in einem ASP.NET Projekt, welches im heutigen Artikeldownload 
enthalten ist, dargestellt.
</p>
<p>
Die beiden Dateien aus <a href="http://aspnetresources.com/articles/HttpFilters.zip" target="_blank">Milans Download</a> 
werden zur Projektmappe hinzugef&uuml;gt, umbenannt und die Namespace-Definitionen angepasst:
</p>

<IMG SRC="/artikel/Bilder/200410/20041025_3.png" width="256" height="167" alt="" border="0">

<p>
Die &Auml;nderungen in der Web.config, die zum Aufruf des ResponseFilters notwendig sind, werden am Ende von 
&lt;system.web&gt; eingef&uuml;gt:
</p>

<pre style="background='silver';">
&lt;httpModules&gt;
   &lt;add name="XHtmlModule" type="XHTMLASPNET11.XHtmlModule, XHTMLASPNET11" /&gt; 
&lt;/httpModules&gt;
</pre>

<p>
Nach dem Kompilieren der Beispiel-Applikation und dem Aufruf im 
<a href="http://validator.w3.org/check?uri=http%3A%2F%2Falexonasp.net%2Fxhtmlaspnet11%2F" target="_blank">XHTML-Validator</a> 
des W3-Consortium zeigt sich, da&szlig; das HTTP-Modul seinen Dienst wie gew&uuml;nscht verrichtet:
</p>

<IMG SRC="/artikel/Bilder/200410/20041025_4.png" width="516" height="632" alt="" border="0">

<p>
Auf Dauer deutlich einfacher ist es allerdings, die beiden Dateien XHtmlModule.cs und XHtmlPageFilter.cs in eine 
Klassenbibliothek zu kompilieren und in den ASP.NET-Projekten auf diese DLL zu verweisen. Dies ist in dem zweiten 
Beispiel (XHTMLASPNET112) im Download dargestellt.
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
Damit steht der Entwicklung von XHTML-Seiten mit ASP.NET 1.1 bis auf kleine Einschr&auml;nkungen, die Milan in seinem 
Artikel ebenfalls erw&auml;hnt, nichts mehr im Wege. &Uuml;ber Probleme mit nicht XHTML-konformen ASP.NET Server-Controls 
werde ich sicher an der einen oder anderen Stelle zu gegebener Zeit berichten.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p>
<h2>Download des Codes</h2>
<p><a href="../Code/20041025.zip">Klicken Sie hier</a>, um den Download zu starten.<br><SPAN class="content">http://www.aspheute.com/code/20041025.zip</span></p>
<h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20031010.htm">Einstieg in Visual Studio.NET - die erste Webanwendung mit Visual C#</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20031010.htm</span><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Ewellitworkedlasttime%2Ecom%2Frobbie%2Fresources%2Fcode%2F">Robbie Harris' Code</a><br>
<SPAN class="content">http://www.wellitworkedlasttime.com/robbie/resources/code/</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Emicrosoft%2Ecom%2Fgermany%2Flibrary%2Fwebparts%2Fmmsredir%2Easpx%3Ftarget%3D%2Fwebcasts%2Fmsdn%2FMSDN%5FWebcastLive%5F33%2Ewmv">Webcast zu XML Schemas von Dirk Primbs und Frank Fischer</a><br>
<SPAN class="content">http://www.microsoft.com/germany/library/webparts/mmsredir.aspx?target=/webcasts/msdn/MSDN_WebcastLive_33.wmv</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
