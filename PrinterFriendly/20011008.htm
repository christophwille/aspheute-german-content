<HTML>
<HEAD>
<TITLE>Output Caching 101</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="An sich ist das Cachen von Web Seiten ja nichts Neues. Mit ASP.NET haben Sie nun neue M&ouml;glichkeiten Caching gezielt und einfach in Ihren Web Seiten zu implementieren.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,OutputCache,VaryByParam,VaryByControl,Duration,VaryByHeader,VaryByCustom,Cache,Page Caching,Output Caching">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Output Caching 101</H1>
<p>
Geschrieben von: <a href="../autoren/christianholm.htm">Christian Holm</a><br>
Kategorie: <a href="../kategorien/ASPdotNET.htm">ASP.NET</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20011008"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
An sich ist das Cachen von Web Seiten ja nichts Neues. Caching ist dann sinnvoll, wenn Daten mit (zeit)aufwendigen Tasks 
generiert werden m&uuml;ssen, und eigentlich f&uuml;r mehrere User &uuml;ber einen l&auml;ngeren Zeitraum unver&auml;ndert bleiben. Ein
Beispiel w&auml;ren die Artikelseiten in einem Shop - f&uuml;r jeden User ist die Artikelbeschreibung gleich, also warum
sollte man sie jedes Mal aus der Datenbank holen? Daher gibt es Caching: bei wiederholtem Zugriff, je nach Expiration, werden die 
angeforderten Daten aus dem in-Memory Cache geholt. Dies spart einiges an Web Server Resourcen. Mit ASP.NET haben Sie nun 
neue M&ouml;glichkeiten Caching gezielt und einfach in Ihren Web Seiten zu implementieren.
</p>

<p>
Grunds&auml;tzlich bietet ASP.NET zwei M&ouml;glichkeiten vom Caching zu profitieren:
</p>

<ul>
<li>Output Caching</li>
<li>traditionelles Application-Level Caching</li>
</ul>

<p>
Dieser Artikel soll Ihnen einen &Uuml;berblick &uuml;ber die ASP.NET Output Caching Funktionalit&auml;t bieten. Output Caching wird durch
die Verwendung der <i>OutputCache</i> Directive aktiviert, welche in diesem Artikel n&auml;her betrachtet wird. 
</p>

<p>
Nun zur&uuml;ck zum Thema:
Beim Caching werden also die HTTP Requests, die wiederholt gegen den Server gefahren werden, aus einem in-Memory angelegten
Cache geholt. Dies spart besonders bei dynamisch generierten Seiten Web Server Resourcen. Das ASP.NET Output Caching
Feature (<i>OutputCache</i> Directive) l&auml;&szlig;t sich nun gezielt an Ihre ASP.NET Anwendungen anpassen. Diese Directive
bietet prinzipiell folgende Optionen:
</p>

<ul>
<li>Steuerung &uuml;ber Content Expiration - anhand einer definierten Zeitspanne bleiben die gecachten Objekte im Speicher g&uuml;ltig</li>
<li>Caching anhand von Get/Post Parameter (Attribut: <i>VaryByParam</i>)</li>
<li>Caching anhand von Http Headern (Attribut: <i>VaryByHeader</i>)</li>
<li>Caching anhand einer Festlegung des Browsers oder eines definierten Strings (Attribut: <i>VaryByCustom</i>)</li>
</ul>

<p>
Sie k&ouml;nnen aber noch Finetuning betreiben, indem Sie folgende Techniken einsetzen:
</p>

<ul>
<li>Cachen von bestimmten Teilen einer Web Seite: <i>Fragment Caching</i> (Attribut:<i>VaryByControl</i>), setzt die Verwendung von 
ASP.NET Web Form Controls voraus</li>
<li>Verwendung und Implementation der Cache API (<i>System.Web.UI.Caching</i>)</li>
</ul>

<p>
Diesmal wollen wir uns aber auf das Output Caching beschr&auml;nken und uns die <i>OutputCache</i> Directive einmal n&auml;her ansehen.
Das Output Caching Feature basiert auf Caching Policies, die durch die in der Directive teilweise optional festlegbaren Attribute
angegeben werden k&ouml;nnen. In einer ASP.NET Seite kann also die <i>OutputCache</i> Directive folgenderma&szlig;en angegeben werden:
</p>

<pre style="background='silver';">
&lt;%@ OutputCache Duration="<i>Zeitdauer</i>" Location="<i>Any | Client | Downstream | Server | None</i>" 
VaryByControl="<i>controlname</i>" VaryByCustom="<i>browser | customstring</i>" VaryByHeader="<i>headers</i>" 
VaryByParam="<i>parametername</i>" %&gt;
</pre>

<p>
Die kursiven Angaben stellen die von Ihnen erforderlichen Anpassungen dar. Nun aber die Detailbeschreibungen.
Um den Content im Cache nach einer definierten Zeit ablaufen zu lassen, geben Sie bei dem <i>Duration</i> Attribut
eine Zeitspanne in Sekunden an:
</p>

<pre style="background='silver';">
&lt;%@ OutputCache Duration="180" %&gt;
</pre>

<p>
Was passiert nun? Beim ersten HTTP Request auf die ASP.NET Seite wird der speziell angeforderte Content (die HTTP Response) gleichzeitig
im In-Memory Cache abgelegt. Dieser verweilt dann die angegebene Zeitdauer im Cache bevor der Inhalt wieder neu angefordert wird.
Dieses Attribut ist zwingend erforderlich und mu&szlig; daher immer angegeben werden, da es ein Grundattribut f&uuml;r die Cachingpolicy ist.
</p>

<p>
Das <i>Location</i> Attribut setzt den Typ der Caching-Applikation. Die Werte dieses Atributtes stammen aus der
<i>OutputCacheLocation</i> Enumeration, und kann folgende g&uuml;ltige Werte annehmen:
</p>

<ul>
<li><i>Any</i> - es werden alle vorhandenen Caching Applikationen verwendet, Standardwert. Access ist <i>Public</i></li>
<li><i>Client</i> - setzt den Cache Control Header auf die Einstellung <i>Private</i>. Verwenden Sie diese Einstellung
um Authentifizierungen gesch&uuml;tzt zu cachen</li>
<li><i>Downstream</i> - Hier wird nur der Downstream gecached, d.h. das Caching erfolgt nur clientseitig und daher ist
das Caching f&uuml;r diese Seite serverseitig deaktiviert. Access ist <i>Public</i></li>
<li><i>Server</i> - Gegenteil von Downstream; nur serverseitiges Caching, d.h alle HTTP Responses kommen aus dem serverseitigen Cache</li>
<li><i>None</i> - Hiermit deaktivieren Sie global das Output Caching. Sie k&ouml;nnen aber dennoch einzelne Web Controls
individuell cachen lassen, wenn die Web Control die OutputCache Directive besitzt</li>
</ul>

<p>
Dies waren die allgemein setzbaren Attribute. Sie k&ouml;nnen den Cache aber mit folgenden Attributen auf spezielle
Anforderungen abstimmen. Die folgenden optionalen Attribute sind m&ouml;glich:
</p>

<p>
Das <i>VaryByControl</i> Attribut bietet spezielles Caching f&uuml;r ASP.NET Web Controls und ist daher in der OutputCache
Directive von ASP .NET Seiten nicht zul&auml;ssig. Die Angaben der Web Controls sind
als Fully Qualified Names anzugeben, und werden durch Strichprunkte getrennt. Diese Angabe ist f&uuml;r gezieltes Fragment
Caching zu verwenden und wird in einem weiteren Artikel n&auml;her erl&auml;utert.
</p>

<p>
Beim <i>VaryByCustom</i> Attribut k&ouml;nnen Sie den Cacheinhalt unter anderem auf verschiedene Browsertypen abstimmen
(<i>browser</i>). Bei diesem Setting wird dann nach Browsername und Hauptversionsnummer getrennt. Oder Sie k&ouml;nnen durch 
einen eigenen festgelegten String eine Aufteilung bewirken. Hierbei m&uuml;ssen Sie aber beachten, da&szlig; Sie bei Verwendung
eines eigenen Strings die <i>HttpApplication.GetVaryByCustomString</i> Methode in der <b>gloabl.asax</b> &uuml;berladen.
</p>

<p>
Um den Output Cache auf Grundlage von verschiedenen HTTP Headern aufzuteilen, verwenden Sie das <i>VaryByHeader</i>
Attribut. Hier wird jede HTTP Response nach Headern gecached. Mehrfachangaben werden durch Strichpunkte getrennt. Da 
dieses Attribut an ASP.NET Seiten gebunden ist, ist es nicht m&ouml;glich es bei Web Controls (Fragment Caching) anzugeben.
</p>

<p>
Wenn Sie den Cache nach Formulardaten, welche mit GET oder POST Methode gesendet worden sind, sortieren wollen, ist 
das <i>VaryByParam</i> Attribut Ihre Wahl. Hier werden
Mehrfachangaben wieder durch Strichpunkte getrennt. Der Cache enth&auml;lt dann f&uuml;r jeden m&ouml;glichen Querystring eine
separate Http Response der ASP.NET Seite. Hier sind folgende M&ouml;glichkeiten g&uuml;ltig:
</p>

<pre style="background='silver';">
&lt;%@ OutputCache Duration="180" VaryByParam="*" %&gt;
</pre>

<p>
Mit dieser Angabe ereichen Sie da&szlig; alle Abfragen gecached werden. Dies ben&auml;tigt daher auch den meisten Cache.
Wenn Sie aber nur bestimmte Teile der Formulardaten cachen wollen, dann verwenden Sie:
</p>

<pre style="background='silver';">
&lt;%@ OutputCache Duration="180" VaryByParam="ProductName;UnitPrice" %&gt;
</pre>

<p>
Diese Angabe sortiert und cached nur Anfragen, die die Parameter <i>ProductName</i> und <i>UnitPrice</i>
enthalten. Dieses erforderliche Attribut ist sowohl bei ASP.NET Seiten g&uuml;ltig wie 
auch bei Web Controls. Wenn Sie diese Aufteilung des Caches deaktivieren wollen, verwenden Sie das <i>none</i>
Keyword:

<pre style="background='silver';">
&lt;%@ OutputCache Duration="180" VaryByParam="none" %&gt;
</pre>

<h2>Schlu&szlig;bemerkung</h2>

<p>
Dies war ein grober &Uuml;berblick &uuml;ber das ASP.NET Output Caching. Es wurden die einzelnen M&ouml;glichkeiten
des Cachens von ASP.NET Seiten gezeigt, und wie man anhand von Parametern den Cache auf bestimmte Spezifikationen aufteilt.
Mit diesem Artikel sollte ersichtlich sein, da&szlig; das Cachen von ASP.NET Seiten sehr einfach und dennoch (oder gerade
deswegen) sehr wirkungsvoll eingesetzt werden kann.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20031010.htm">Einstieg in Visual Studio.NET - die erste Webanwendung mit Visual C#</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20031010.htm</span><br>
<a href="../artikel/20001115.htm">HTTP Komprimierung in IIS5</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20001115.htm</span><br>
<a href="../artikel/20011009.htm">Page Fragment Caching 101</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20011009.htm</span><br>
<a href="../artikel/20000817.htm">Serverseitiges Caching mit XCache</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000817.htm</span><br>
<a href="../artikel/20040303.htm">Vergleich von DataGrid, DataList und Repeater-Control - was verwende ich wann?</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20040303.htm</span><br>
<a href="../artikel/20011002.htm">XTune Revisited</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20011002.htm</span><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2Fdefault%2Easp%3Furl%3D%2Flibrary%2Fen%2Dus%2Fcpgenref%2Fhtml%2Fcpconoutputcache%2Easp">@ OutputCache Directive</a><br>
<SPAN class="content">http://msdn.microsoft.com/library../default.htm?url=/library/en-us/cpgenref/html/cpconoutputcache.asp</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2Fdefault%2Easp%3Furl%3D%2Flibrary%2Fen%2Dus%2Fcpguidnf%2Fhtml%2Fcpconaspcachingfeatures%2Easp">ASP.NET Caching Features</a><br>
<SPAN class="content">http://msdn.microsoft.com/library../default.htm?url=/library/en-us/cpguidnf/html/cpconaspcachingfeatures.asp</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2Fdefault%2Easp%3Furl%3D%2Flibrary%2Fen%2Dus%2Fcpguidnf%2Fhtml%2Fcpconaspoutputcache%2Easp">Caching ASP.NET Pages</a><br>
<SPAN class="content">http://msdn.microsoft.com/library../default.htm?url=/library/en-us/cpguidnf/html/cpconaspoutputcache.asp</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2Fdefault%2Easp%3Furl%3D%2Flibrary%2Fen%2Dus%2Fdndotnet%2Fhtml%2Fdotnetperftips%2Easp">Performance Tips and Tricks in .NET Applications</a><br>
<SPAN class="content">http://msdn.microsoft.com/library../default.htm?url=/library/en-us/dndotnet/html/dotnetperftips.asp</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2Fdefault%2Easp%3Furl%3D%2Flibrary%2Fen%2Dus%2Fcpguidnf%2Fhtml%2Fcpconsettingoutputcachelocation%2Easp">Setting the Output Cache Location</a><br>
<SPAN class="content">http://msdn.microsoft.com/library../default.htm?url=/library/en-us/cpguidnf/html/cpconsettingoutputcachelocation.asp</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
