<HTML>
<HEAD>
<TITLE>Erstellung eines Newstickers in ASP - Teil 2</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Willkommen zum zweiten und letzten Teil der Erstellung eines Newstickers mit ASP. 
Wir besch&auml;ftigen uns heute mit der Administration des Newstickers.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Newsticker,Administration,News,Newsscript,ADO,JavaScript,Tips,Tricks,Anwendungsbeispiel">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Erstellung eines Newstickers in ASP - Teil 2</H1>
<p>
Geschrieben von: <a href="../autoren/alexanderzeitler.htm">Alexander Zeitler</a><br>
Kategorie: <a href="../kategorien/ASP%20Tricks.htm">ASP Tricks</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20010209"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Willkommen zum zweiten und letzten Teil der Erstellung eines Newstickers mit ASP. 
Wir besch&auml;ftigen uns heute mit der Administration des Newstickers, das hei&szlig;t mit dem 
Anlegen, Modifizieren und L&ouml;schen von Eintr&auml;gen sowie &Auml;nderungen an den Anzeigeparametern des 
Newstickers.
</p>

<p>
Im Download zum heutigen Artikel finden Sie die ben&ouml;tigte Access-Datenbank sowie den Sourcecode 
zur Administration des Newstickers.
</p>

<p>
Die Administration funktioniert mit dem Internet Explorer und Netscape Navigator ab 
Version 4.0. Ebenfalls unterst&uuml;tzt wird Netscape 6.0. Bei Netscape-Versionen vor 6.0 
kann es - aufgrund von Schw&auml;chen in der CSS-Implementierung von Netscape -  zu leicht abweichenden 
Darstellungen kommen. Die Funktionalit&auml;t ist jedoch gew&auml;hrleistet.
</p>

<h2>Administration allgemein</h2>

<p>
Wie schon im <a href="../artikel/20001205.htm">ersten Teil</a>, sehen Sie zun&auml;chst 
einen Screenshot der fertigen Administrationsseite:
</p>

<IMG SRC="/artikel/Bilder/200102/20010209_1.png" width="543" height="652" alt="" border="0">

<p>
Wie Sie sehen, werden die Eintr&auml;ge in einer Listbox angezeigt. Dies bringt sowohl hinsichtlich 
&Uuml;bersichtlichkeit als auch Bedienbarkeit Vorteile mit sich. Au&szlig;erdem existieren zur Verwaltung 
der Eintr&auml;ge drei Buttons f&uuml;r die Funktionen "Erstellen", "&Auml;ndern" und "L&ouml;schen" von Eintr&auml;gen.
</p>

<p>
Weiters sind vier Textboxen zu sehen, in denen die Werte f&uuml;r die Tickerh&ouml;he, Tickerbreite, 
Anzeigegeschwindigkeit sowie die Anzahl der dargestellten Eintr&auml;ge angezeigt und direkt 
ge&auml;ndert werden k&ouml;nnen. Diese &Auml;nderungen werden durch einen Klick auf den Button 
"Parameter &auml;ndern" in der Datenbank gespeichert.
</p>

<h2>Darstellung der Eintr&auml;ge in der Select-Box</h2>

<p>
Um die Eintr&auml;ge aus der Datenbank in der Select-Box darstellen zu lassen, definieren wir 
eine Listbox mit Zeilenanzahl 10 und lassen den OPTION-Tag in einer Schleife mit den Werten 
f&uuml;llen. Der Code sieht wie folgt aus (<b>admin.asp</b>):
</p>

<pre style="background='silver';">
&lt;select name="id" size=10 style="font-family:Courier New;font-size:9pt;width:480px"&gt;
&lt;%
strSQL = "SELECT * FROM news order by id desc"
Set rs = conn.Execute(strSQL)
Do While Not(rs.EOF)
    Response.Write "&lt;option value='" &amp; rs("id") &amp; "'&gt;"
    
    If rs("eintraganzeigen") = True then
        Response.Write "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;x&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"
    Else
        Response.Write "&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;-&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;"
    End If

    Response.Write rs("datum") &amp; "&amp;nbsp;&amp;nbsp;&amp;nbsp;"
    ueberschrift=rs("ueberschrift")
    uelaenge=Len(ueberschrift)

    If uelaenge &gt; 30 Then
        Response.Write Left(ueberschrift,30) &amp; "..."
    Else
    
        Response.Write ueberschrift

        For i = 1 To (33-uelaenge)
           Response.Write "&amp;nbsp;"
        Next
    End If
    rs.MoveNext
Loop
rs.Close
%&gt;
&lt;/select&gt;
</pre>

<p>
Vielleicht ist der Code entgegen Ihren Erwartungen etwas l&auml;nger geworden. Bevor ich Ihnen nun den 
Code genauer erkl&auml;re, werfen wir kurz einen Blick auf das Ergebnis (siehe oben): Wie Sie 
sehen, sind alle Eintr&auml;ge sauber untereinander gelistet. Au&szlig;erdem sind Eintr&auml;ge, deren Titel 
l&auml;nger als 30 Zeichen sind, gek&uuml;rzt und mit "..." versehen. Weiters wird in der ersten Spalte 
durch "x" bzw. "-" angezeigt - je nach dem, ob der Eintrag im Newsticker angezeigt wird 
oder nicht.
</p>

<p>
Diesen Anforderungen wird in den Zeilen 131 - 135 (&Uuml;berpr&uuml;fung, ob sichtbar oder nicht) 
sowie 137 - 146 (&Uuml;berpr&uuml;fung und Anpassung der Titell&auml;nge) der Datei 
<a href="../artikel/admincc.htm" target="_blank">admin.asp</a> Rechnung getragen. Vorraussetzung f&uuml;r die saubere 
Darstellung ist weiterhin die Verwendung einer nicht-proportionalen Schriftart - in 
diesem Falle Courier New.
</p>

<p>
Die &Uuml;berpr&uuml;fung, ob ein Eintrag als sichtbar oder nicht sichtbar gekennzeichnet dargestellt 
wird, besteht im wesentlichen aus einer if-Abfrage, die &uuml;berpr&uuml;ft, ob in dem Ja/Nein-Feld in 
der Tabelle news der Wert True oder False steht. Entsprechend den Werten wird ein "x" 
(True) oder ein <nobr>"-"</nobr> (False) ausgegeben, umgeben von einigen Leerzeichen (erzeugt durch 
&amp;nbsp; [non-breaking space]), die lediglich der besseren Optik dienen. Zu beachten 
bei dieser Abfrage ist, da&szlig; die Werte True bzw. False nicht in Anf&uuml;hrungszeichen stehen d&uuml;rfen, 
da es sich hierbei um feststehende Begriffe von VBScript bzw. Access handelt.
</p>

<p>
Etwas umfangreicher gestaltet sich die Anpassung und Darstellung der Titel in der Listbox.
Zun&auml;chst lesen wir hierzu das Textfeld "ueberschrift" in die Variable ueberschrift zur weiteren 
Bearbeitung ein. Danach bestimmen wir mit Hilfe der 
<a href="http://www.microsoft.com/germany/scripting/vbscript/doc/vsfctLen.htm" target="_blank">Len-Funktion</a> 
die Anzahl der Zeichen, die der aktuell bearbeitete Titel beinhaltet. In der darauf 
folgenden If-Abfrage &uuml;berpr&uuml;fen wir, ob die Anzahl der Zeichen gr&ouml;&szlig;er 30 ist. Ist dies der 
Fall, so mu&szlig; der Titel auf 30 Zeichen gek&uuml;rzt, und am Ende mit "..." beendet werden. 
Die K&uuml;rzung auf 30 Zeichen erreichen wir durch die 
<a href="http://www.microsoft.com/germany/scripting/vbscript/doc/vsfctLeft.htm" target="_blank">Left-Funktion</a>.
 Die 3 Punkte werden dann einfach an die bestehende Ausgabe angeh&auml;ngt. 
</p>

<p>
Sollte sich bei der If-Abfrage herausstellen, da&szlig; die L&auml;nge des Titels 30 Zeichen unterschreitet,
so m&uuml;ssen wir den Titel auf 33 Zeichen mit Leerzeichen auff&uuml;llen. Dies realisieren wir mit einer 
For-Next-Schleife, die wir bis zur Anzahl der fehlenden Zeichen 
(33 minus aktuelle L&auml;nge des Titels) z&auml;hlen lassen. Bei jedem Durchlauf der Schleife lassen wir 
ein Leerzeichen ausgeben, so da&szlig; am Ende alle Eintr&auml;ge die gleiche L&auml;nge aufweisen, was zur 
Folge hat, da&szlig; die Listbox immer die gleiche Breite aufweist und die Eintr&auml;ge sauber 
untereinander tabellarisch gelistet sind.
</p>

<p>
Weitere Informationen zur Bearbeitung von Strings finden Sie im Artikel 
<a href="../artikel/20000503.htm">Einfache String Operationen</a>.
</p>

<h2>Darstellung der Newsticker-Parameter</h2>

<p>
Die Anzeige der Newsticker-Parameter in den Textboxen beschr&auml;nkt sich auf einen leicht zu 
realisierenden Lesevorgang aus der Tabelle "settings" und findet in den Zeilen 195 - 206 der 
Datei <a href="../artikel/admincc.htm" target="_blank">admin.asp</a> statt. Da sich in der Tabelle "settings" nur eine 
Datenzeile befindet, k&ouml;nnen wir uns eine Do-While-Schleife oder &auml;hnliches sparen. 
Allerdings integrieren wir eine Sicherheitsabfrage, falls sich &uuml;berhaupt keine Parameter in der 
Datenbank befinden:
</p>

<pre style="background='silver';">
&lt;%
strSQL = "SELECT * FROM settings"
Set rs = conn.Execute(strSQL)
If Not rs.EOF Then
%&gt;
&lt;table width="480" border="0" cellspacing="0" cellpadding="0"&gt;
&lt;tr&gt;
&lt;td&gt;&lt;font face="Arial" size="2"&gt;&lt;b&gt;Tickerbreite:&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font face="Arial" size="2"&gt;&lt;b&gt;Tickerh&ouml;he:&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font face="Arial" size="2"&gt;&lt;b&gt;Geschwindigkeit:&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td&gt;&lt;font face="Arial" size="2"&gt;&lt;b&gt;Gezeigte Eintr&auml;ge:&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;
    &lt;input type="text" size="5" VALUE="&lt;%=rs("tickerbreite")%&lt;" name="tickerbreite" 
       id="tickerbreite"&gt;
    &lt;font face="Arial" size="2"&gt;px&lt;/font&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;input type="text" size="5" VALUE="&lt;%=rs("tickerhoehe")%&gt;" name="tickerhoehe" 
       id="tickerhoehe"&gt;
    &lt;font face="Arial" size="2"&gt;px&lt;/font&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;input type="text" size="5" VALUE="&lt;%=rs("geschwindigkeit")%&gt;" name="geschwindigkeit" 
       id="geschwindigkeit"&gt;
    &lt;/td&gt;
    &lt;td&gt;
    &lt;input type="text" size="5" VALUE="&lt;%=rs("anzahlangezeigt")%&gt;" name="anzahlangezeigt" 
        id="anzahlangezeigt"&gt;&lt;input type="hidden" name="form_action" value="chg_params"&gt;
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td colspan="4" align="center"&gt;
    &lt;br&gt;
    &lt;input type="button" value="Parameter &auml;ndern" OnClick="submit_params()"&gt;
    &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;%
rs.Close
conn.Close
Else
Response.Write("&lt;FONT FACE="&amp; chr(39) &amp; "Arial" &amp; chr(39) &amp; " size=2&gt;Es wurden keine 
  Parameter in der Datenbank definiert oder die Parameter wurden gel&ouml;scht!&lt;/FONT&gt;")
End If
%&gt;
</pre>

<h2>Absenden der Formulare</h2>

<p>
Ganz im Sinne der Arbeitsteilung zwischen Server und Browser lassen wir die &Uuml;berpr&uuml;fung der 
Eingaben in den Formularen sowie die Sicherheitsabfrage beim L&ouml;schen von Eintr&auml;gen durch 
clientseitige Javascripts durchf&uuml;hren. Au&szlig;erdem sind die Javascripts notwendig, da wir beim oberen 
Formular mehr als einen Button verwenden und unterschiedliche Aktionen ausl&ouml;sen wollen.
</p>

<p>
Um verschiedene Aktionen von einem Formular ausf&uuml;hren lassen zu k&ouml;nnen, definieren wir uns ein 
verstecktes Eingabe-Feld mit dem Namen "form_action":
</p>

<pre style="background='silver';">
&lt;input type="HIDDEN" name="form_action"&gt;
</pre>

<p>
In diesem Feld wird die Aktion gespeichert, die dann in der Datei logik.asp ausgewertet werden kann 
und die entsprechenden ASP-Prozeduren zum Erstellen, &Auml;ndern und L&ouml;schen von Eintr&auml;gen aufruft.
</p>

<p>
Um den Wert des Feldes form_action innerhalb eines Formulares beliebig &auml;ndern zu k&ouml;nnen, ben&ouml;tigen 
wir die oben erw&auml;hnten JavaScript-Funktionen, die durch einen Klick auf den jeweiligen Button 
aufgerufen werden, z.B.
</p>

<pre style="background='silver';">
&lt;input type="button" value="&amp;Auml;ndern" onclick="change_submit()"&gt;
</pre>

<p>
Au&szlig;erdem m&uuml;ssen wir bei den Funktionen "&Auml;ndern" und "L&ouml;schen" &uuml;berpr&uuml;fen, ob ein Eintrag in der 
Listbox ausgew&auml;hlt wurde. &Uuml;berpr&uuml;fen wir diesen Fall nicht, und es wurde kein Eintrag ausgew&auml;hlt, 
erhalten wir auf der Seite logik.asp eine Fehlermeldung, mit der der normale User nichts anzufangen 
wei&szlig;.
</p>

<p>
Weiters sollte man aus Sicherheitsgr&uuml;nden den User beim Klick auf den L&ouml;schen-Button nochmals 
fragen, ob der Eintrag wirklich gel&ouml;scht werden soll. Daraus ergibt sich, da&szlig; der 
JavaScript-Aufwand f&uuml;r das L&ouml;schen von Eintr&auml;gen am gr&ouml;&szlig;ten ist, weshalb ich den Code auch 
an dieser Funktion erkl&auml;ren m&ouml;chte:
</p>

<pre style="background='silver';">
&lt;script language="JavaScript"&gt;
&lt;!--
function delete_submit() 
{
if(document.news_form.id.selectedIndex==-1)
{
  alert("Sie haben keinen Eintrag gew&auml;hlt!");
}
else
{  
  Check = confirm("Soll der Eintrag wirklich gel&ouml;scht werden?");

if (Check == false)
{
  document.news_form.form_action.value = "back";
  document.news_form.submit();
}
else
  document.news_form.form_action.value = "del"

document.news_form.submit();
}
} // end function delete_submit
// --&gt;
&lt;/script&gt;
</pre>

<p>
Die JavaScript-Funktion delete_submit wird durch einen Klick auf den "L&ouml;schen"-Button in Zeile 
158 der Datei <a href="../artikel/admincc.htm" target="_blank">admin.asp</a> aufgerufen:
</p>

<pre style="background='silver';">
&lt;input type="button" value="L&amp;ouml;schen" onClick="delete_submit()"&gt;
</pre>

<p>
In Zeile 23 wird dann &uuml;berpr&uuml;ft, ob in der Listbox ein Eintrag angeklickt wurde. Ist dies nicht 
der Fall (d.h. selectedIndex == -1), wird eine Javascript-Fehlermeldung mit dem entsprechenden 
Text ausgegeben und nach Best&auml;tigung durch den User wird das Script bis zum n&auml;chsten Klick beendet.
</p>

<p>
Wurde jedoch ein Eintrag ausgew&auml;hlt, so kommt der zweite Teil des JavaScripts ab Zeile 31 zum 
tragen. Dort wird wiederum eine User-Eingabe generiert - diesmal allerdings eine Ja/Nein-Abfrage 
(ob der Eintrag wirklich gel&ouml;scht werden soll). Die Eingabe des Users wird in den folgenden Zeilen 
ausgewertet und wei&szlig;t dem versteckten Formularfeld "form_action" entsprechend den Wert "back" oder 
"del" zu, was in der Datei logik.asp entsprechend weiterverarbeitet wird.
</p>

<p>
Im Prinzip identisch - aber weniger umfangreich und deshalb nicht n&auml;her erl&auml;utert - sind die 
JavaScripts f&uuml;r das Erstellen und &Auml;ndern von Eintr&auml;gen.
</p>

<p>
Was jetzt noch fehlt, ist die &Auml;nderung der Newsticker-Parameter. Auch hier realisieren wir die 
&Uuml;berpr&uuml;fung der Eingaben mittels JavaScript - diesmal allerdings mu&szlig; gepr&uuml;ft werden, ob es sich 
tats&auml;chlich um Zahlen handelt. Die Funktion zur &Uuml;berpr&uuml;fung, ob es sich bei einem Wert um eine 
Zahl handelt, hei&szlig;t bei JavaScript  <a href="http://www.teamone.de/selfhtml/teci.htm#a4" target="_blank">NaN</a> 
(bei VBScript hei&szlig;t diese Funktion &uuml;brigens 
<a href="http://www.microsoft.com/germany/scripting/vbscript/doc/vsfctIsNumeric.htm" target="_blank">IsNumeric</a>).
</p>

<p>
Die Pr&uuml;fung der Felder Tickerbreite, Tickerh&ouml;he, Geschwindigkeit und Anzahl der gezeigten News 
findet in den Zeilen 55 bis 94 der Datei <a href="../artikel/admincc.htm" target="_blank">admin.asp</a> statt:
</p>

<pre style="background='silver';">
&lt;script language="JavaScript"&gt;
function submit_params()
{ 
tickerbreite=document.params_form.tickerbreite.value; 
tickerbreite=Number(tickerbreite); 
if(isNaN(tickerbreite)) 
    { 
    alert("Sie haben f&uuml;r die Tickerbreite keine Zahl eingegeben!");
    } 
else 
    {  
    tickerhoehe=document.params_form.tickerhoehe.value; 
    tickerhoehe=Number(tickerhoehe); 
    if(isNaN(tickerhoehe)) 
        { 
        alert("Sie haben f&uuml;r die Tickerh&ouml;he keine Zahl eingegeben!");
        } 
    else 
    { 
        geschwindigkeit=document.params_form.geschwindigkeit.value; 
        geschwindigkeit=Number(geschwindigkeit); 
        if(isNaN(geschwindigkeit)) 
            { 
            alert("Sie haben f&uuml;r die Geschwindigkeit keine Zahl eingegeben!");
            } 
            else 
            { 
            anzahlangezeigt=document.params_form.anzahlangezeigt.value; 
            anzahlangezeigt=Number(anzahlangezeigt); 
            if(isNaN(anzahlangezeigt)) 
                { 
                alert("Sie haben f&uuml;r die Anzahl der gezeigten Eintr&auml;ge keine Zahl eingegeben!");
                } 
            else 
                { 
                document.params_form.submit(); 
                } 
            } 
        }
    } 
} 
&lt;/script&gt;
</pre>

<p>
Den Code beschreibe ich wiederum nur anhand eines Feldes, da die anderen Felder 
analog behandelt werden.
</p>

<p>
Durch einen Klick auf den Button in Zeile 212 der Datei <a href="../artikel/admincc.htm" target="_blank">admin.asp</a> 
wird die JavaScript-Funktion "submit_params" aufgerufen. Zun&auml;chst liest die Funktion den 
Inhalt des Feldes "tickerbreite" in die Variable "tickerbreite" ein (Zeile 57) und versucht 
diese in eine Nummer umzuwandeln (Zeile 58). Danach wird &uuml;berpr&uuml;ft, ob sich in "tickerbreite" 
jetzt tats&auml;chlich eine Nummer befindet (Zeile 59). Sollte dies nicht der Fall sein, wird wie 
bereits gesehen mittels JavaScript eine Fehlermeldung ausgegeben und die Ausf&uuml;hrung des Skripts 
beendet. Handelt es sich hingegen um eine Nummer, wird das n&auml;chste Feld auf die gleiche 
Art gepr&uuml;ft. Eine &Uuml;berpr&uuml;fung, ob die eingegebenen Zahlen in einem g&uuml;ltigen Bereichen liegen, 
ist nicht notwendig, da dies in der Datei ticker.asp (siehe 
<a href="../artikel/20001205.htm">Teil 1</a>) 
mittels VBScript &uuml;berpr&uuml;ft wird.
</p>

<p>
Nach dem zugegebenerma&szlig;en recht umfangreichen JavaScript-Teil sind wir nun am Ende der Datei 
admin.asp angekommen und k&ouml;nnen uns der JavaScript-freien 
<a href="../artikel/logikcc.htm" target="_blank">logik.asp</a> widmen.
</p>

<h2>Auswertung der Formulare</h2>

<p>
Da die Datei logik.asp au&szlig;er den Best&auml;tigungsmeldungen f&uuml;r die jeweils durchgef&uuml;hrten 
Aktionen keine Ausgaben enth&auml;lt gibt es hierf&uuml;r auch keine Vorschau.
</p>

<p>
Damit unsere Datei wei&szlig;, welche Aktion sie ausf&uuml;hren soll, m&uuml;ssen wir den Wert des &uuml;bergebenen 
Feldes "form_action" auslesen. Au&szlig;erdem ben&ouml;tigen wir bei fast allen Aktionen die ID des 
bearbeiteten Eintrages und bei &Auml;nderung der Newsticker-Parameter nat&uuml;rlich den Inhalt 
der Textboxen:
</p>

<pre style="background='silver';">
&lt;%
form_action=Request.QueryString("form_action")
id=Request.QueryString("id")
tickerbreite=Request.QueryString("tickerbreite")
tickerhoehe=Request.QueryString("tickerhoehe")
geschwindigkeit=Request.QueryString("geschwindigkeit")
anzahlangezeigt=Request.QueryString("anzahlangezeigt")
%&gt;
</pre>

<p>
Welche Aktionen k&ouml;nnen nun auftreten?
</p>

<ul>
<li>new = Neuen Eintrag erstellen
<li>new_save = Neuen Eintrag speichern
<li>chg = Bestehenden Eintrag &auml;ndern
<li>chg_save = Ge&auml;nderten Eintrag speichern
<li>del = Bestehenden Eintrag l&ouml;schen
<li>chg_params = Parameter f&uuml;r den Ticker &auml;ndern und speichern
<li>back = Ohne &Auml;nderungen zur&uuml;ck zur admin.asp
</ul>

<p>
Au&szlig;erdem kann auch noch der &auml;u&szlig;erst unangenehme Fall auftreten, da&szlig; JavaScript abgeschaltet ist 
und die Pr&uuml;fung der Eingaben mit JavaScript nicht abgearbeitet wird oder da&szlig; die Datei 
logik.asp direkt ohne Parameter aufgerufen wurde, was beides im Ergebnis zu einem EOF-Fehler 
f&uuml;hrt. Diesem begegnen wir mit einer einfachen aber wirkungsvollen If-Abfrage:
</p>

<pre style="background='silver';">
&lt;%If ((form_action="chg") And (id = "")) Or ((form_action="del") 
  And (id = "")) Or ((form_action="chg_save") And id="") Or 
  ((form_action="chg_params") And ((tickerbreite="") Or (tickerhoehe="") Or 
  (geschwindigkeit="") Or (anzahlangezeigt=""))) Or (form_action="") Then
%&gt;
&lt;head&gt;
&lt;title&gt;Newsticker-Administration - Fehler&lt;/title&gt;
        &lt;table width="480" border="0" align="center" style="border-botTom: 
           1px solid;border-left: 1px solid;border-right: 1px solid;border-Top: 1px solid;"&gt;
        &lt;tr&gt;
            &lt;td align="center" bgcolor="#0000FF"&gt;
            &lt;font face="Arial" size="4" color="#FFFFFF"&gt;&lt;b&gt;
              Newsticker-Administration - Fehler&lt;/b&gt;&lt;/font&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td&gt;
            &lt;table&gt;
            &lt;tr&gt;
                &lt;td&gt;
                &lt;font face="Arial" size="2"&gt;&lt;b&gt;&lt;br&gt;Es ist ein Fehler aufgetreten.
                &lt;br>Folgende Ursachen sind m&ouml;glich:&lt;br&gt;&lt;br&gt;1. Kein JavaScript aktiviert 
                und kein Eintrag ausgew&auml;hlt - aktivieren Sie JavaScript, um diesen Fehler zu 
                vermeiden!&lt;br&gt;&lt;br&gt;2. Diese Datei wurde als URL aufgerufen - bitte rufen Sie diese 
                Datei ausschlie&szlig;lich &uuml;ber die Datei &lt;a href="admin.asp"&gt;admin.asp&lt;/a&gt; auf! 
                &lt;br&gt;&lt;br&gt;3. Sie haben bei den Parametern f&uuml;r den Newsticker keine Werte 
                angegeben!&lt;br&gt;&lt;br&gt;&lt;/b&gt;&lt;/font&gt;
                &lt;/td&gt;
            &lt;/tr&gt;
            &lt;/table&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;tr&gt;
            &lt;td align="center" bgcolor="#FF0000"&gt;
            &lt;font face="Arial" size="4" color="#FFFFFF"&gt;&lt;b>Beim Speichern ist ein Fehler 
            aufgetreten!&lt;/b&gt;&lt;/font&gt;
            &lt;/td&gt;
        &lt;/tr&gt;
        &lt;/table&gt;		
&lt;%else%&gt;
</pre>

<p>
Am leichtesten bearbeiten wir die verschiedenen Aktionen mit einer 
<a href="http://www.microsoft.com/germany/scripting/vbscript/doc/vsstmSelectCase.htm" target="_blank">Select Case-Anweisung</a>:
</p>

<pre style="background='silver';">
&lt;%Select Case form_action
Case "new"%&gt;
.
.
. 
&lt;% Case "new_save" %&gt;
.
.
.
    &lt;% Case "chg" %&gt;
.
.
.
    &lt;% Case "chg_save" %&gt;
.
.
.
    &lt;% Case "del" %&gt;
.
.
.
    &lt;% Case "chg_params" %&gt;
.
.
.
&lt;% Case "back" %&gt;
.
.
.
&lt;%End Select%&gt;
</pre>

<p>
Dies ist das Grundger&uuml;st der CASE-Anweisung, das darauf wartet mit weiterem Code zum Leben 
erweckt zu werden. Beginnen wir deshalb mit der Funktion "new", dem Erzeugen eines 
neuen Eintrags.
</p>

<h2>Neuer Eintrag</h2>

<p>
Zun&auml;chst wieder das gew&uuml;nschte Ergebnis als Screenshot:
</p>

<IMG SRC="/artikel/Bilder/200102/20010209_2.png" width="545" height="532" alt="" border="0">

<p>
Wie im Screenshot ersichtlich ist, werden alle ben&ouml;tigten Werte au&szlig;er der ID des Eintrags 
abgefragt, da diese automatisch generiert wird. Datum und Uhrzeit werden &uuml;ber Selectboxen 
abgefragt, soda&szlig; Fehleingaben weitestgehend ausgeschlossen sind:
</p>

<pre style="background='silver';">
&lt;TR&gt;
    &lt;TD&gt;&lt;%datum=Now()%&gt;&lt;font face="Arial" size="2">&lt;b&gt;
        Datum / Uhrzeit des Eintrags:&lt;/b&gt;&lt;/font&gt;&lt;/TD&gt;
    &lt;TD&gt;&lt;SELECT NAME="tag">
    &lt;%For i = 1 To 31
        Response.Write("&lt;OPTION VALUE=" &amp; i)
        If i=day(datum) Then Response.Write(" SELECTED")
        Response.Write("&gt;")
        Response.Write(i)
    Next
    Response.Write("&lt;/SELECT&gt;&lt;SELECT NAME=monat&gt;")
    For i = 1 To 12
        Response.Write("&lt;OPTION VALUE=" &amp; i)
        If i=month(datum) Then Response.Write(" SELECTED")
        Response.Write("&gt;")
        Response.Write(i)
    Next		
    Response.Write("&lt;/SELECT&gt;")
    olddate=DateAdd("yyyy",-10,Now())
    oldyear=Year(olddate)
    newdate=DateAdd("yyyy",10,Now())
    newyear=Year(newdate)
    Response.Write("&lt;SELECT NAME=monat&gt;")
    For i = oldyear To newyear
        Response.Write("&lt;OPTION VALUE=" &amp; i)
        If i=Year(datum) Then Response.Write(" SELECTED")
        Response.Write("&gt;")
        Response.Write(i)
    Next
    Response.Write("&lt;/SELECT&gt;")
    Response.Write("&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;")
    Response.Write("&lt;SELECT NAME=stunde&gt;")
    For i = 1 To 23
        Response.Write("&lt;OPTION VALUE=" &amp; i)
        If i=Hour(datum) Then Response.Write(" SELECTED")
        Response.Write("&gt;")
        Response.Write(i)
    Next
    Response.Write("&lt;/SELECT&gt;&lt;b&gt;:&lt;/b&gt;&lt;SELECT NAME=minute&gt;")
    For i = 1 To 59
        Response.Write("&lt;OPTION VALUE=" &amp; i)
    If i=Minute(datum) Then Response.Write(" SELECTED")
        Response.Write("&gt;")
        Response.Write(i)
    Next%&gt;
    &lt;/SELECT&gt;&lt;/TD&gt;	
&lt;/TR&gt;
</pre>

<p>
Standardm&auml;&szlig;ig soll bei neuen Eintr&auml;gen das aktuelle Datum voreingestellt sein. Deshalb lassen 
wir mit now() in Zeile 74 <a href="../artikel/logikcc.htm" target="_blank">logik.asp</a> das aktuelle Datum in die 
Variable "Datum" schreiben. In den Zeilen 78 - 86 lassen wir dann eine Select-Liste mit dem 
Namen "tag"" mit Werten von 1 bis 31 (f&uuml;r maximal 31 Tage) f&uuml;llen. In Zeile 82 &uuml;berpr&uuml;fen wir, 
ob der Wert aus der Schleife gleich dem aktuellen Tag ist. Ist dies der Fall, so wird im 
OPTION-Tag f&uuml;r diesen Tag das Schl&uuml;sselwort "SELECTED" angef&uuml;gt, was zur Folge hat, da&szlig; der Eintrag 
in der Liste dargestellt wird.
</p>

<p>
Analog wird mit der Select-Liste f&uuml;r die Monate verfahren (Zeilen 86 - 93)
</p>

<p>
Etwas anders gestaltet sich die Erstellung der Liste f&uuml;r die Jahreszahlen, da wir hier auch die 
M&ouml;glichkeit ber&uuml;cksichtigen m&ouml;chten zuk&uuml;nftige Eintr&auml;ge erstellen zu k&ouml;nnen, die &uuml;ber das 
aktuelle Jahr hinaus gehen. Gerade bei Jahreswechseln stellt sich diese Problematik nat&uuml;rlich in 
besonderem Ma&szlig;e.
</p>

<p>
Um immer auf der sicheren Seite zu sein, lassen wir die Jahreszahlen um zwei Jahre erweitern. 
Hierzu lassen wir in Zeile 94 mit Hilfe der 
<a href="http://www.microsoft.com/germany/scripting/vbscript/doc/vsfctDateAdd.htm" target="_blank">DateAdd-Funktion</a> 
die notwendigen Berechnungen durchf&uuml;hren. Das Ergebnis steht in "newdate", woraus wir in Zeile 
95 "newyear" erzeugen, was wiederum als End-Wert unserer For-Next-Schleife dient, die sich 
in den Zeilen 97 - 102 befindet. Der Aufbau der For-Next-Schleife ist identisch mit den beiden 
vorangegangen Schleifen.
</p>

<p>
Ebenso identisch sind die Schleifen f&uuml;r "Stunde" und "Minute" - sie werden in den Zeilen 
105 - 120 abgearbeitet. Somit sind wir mit den Datumseingaben fertig.
</p>

<p>
Alle anderen Felder sind Standard-HTML-Formularfelder, weswegen wir auf diese nicht n&auml;her 
eingehen - der Code befindet sich in den Zeilen 125 - 165 der Datei 
<a href="../artikel/logikcc.htm" target="_blank">logik.asp</a>. 
Nicht zu vergessen ist allerdings das versteckte Feld "form_action", das wir bereits in 
der admin.asp verwendet haben, und das diesmal den Wert "new_save" enth&auml;lt. 
</p>

<p>
Durch einen Klick auf den Button in Zeile 169 ("Eintrag speichern") wird das Formular 
wiederum an die Datei logik.asp abgeschickt, welche aufgrund des Feldes "form_action" an 
die Stelle "Neuen Eintrag speichern" ab Zeile 180 verzweigt.
</p>

<h2>Neuen Eintrag speichern</h2>

<p>
Zun&auml;chst m&uuml;ssen wir die erfassten Werte einlesen, was in den Zeilen 185 - 189 passiert. 
Bevor wir diese Werte nun in die Datenbank schreiben k&ouml;nnen, m&uuml;ssen wir "Ueberschrift", 
"Text", "Link" und "Link_Target" auf die Zeichen "  &lt; &gt; &uuml;berpr&uuml;fen, da diese die HTML- bzw.
ASP-Syntax beim Anzeigen im Newsticker zerst&ouml;ren k&ouml;nnten. Weiters ersetzen wir Zeilenumbr&uuml;che 
durch den HTML-Befehl &lt;BR&gt;, da sonst JavaScript-Fehler auftreten.
</p>

<p>
Da wir hierf&uuml;r den  <a href="http://www.microsoft.com/germany/scripting/vbscript/doc/vsfctReplace.htm" target="_blank">Replace-Befehl</a>
und "Server.HtmlEncode" je Datenfeld mehrere Male ben&ouml;tigen schreiben wir uns eine kleine 
<a href="http://www.microsoft.com/germany/scripting/vbscript/doc/vsstmFunction.htm" target="_blank">Function</a> mit 
dem Namen HtmlEncode:
</p>

<pre style="background='silver';">
Function HtmlEncode(ByVal eingabe)
     eingabe = Server.HtmlEncode(eingabe)
     HtmlEncode = Replace(eingabe, vbCrlf, "&lt;br&gt;")
End Function
</pre>

<p>
Die Funktion wird gleich beim Einlesen der Werte in den Zeilen 185- 189 aufgerufen:
</p>

<pre style="background='silver';">
ueberschrift=HtmlEncode(Request.QueryString("ueberschrift"))
text=HtmlEncode(Request.QueryString("text"))
link=HtmlEncode(Request.QueryString("link"))
link_target=HtmlEncode(Request.QueryString("link_target"))
</pre>

<p>
Da wir die Werte des Datums einzeln erfasst haben, m&uuml;ssen wir diese nun zu einem Datums-Ausdruck 
zusammenf&uuml;gen, bevor wir den Wert in die Datenbank schreiben k&ouml;nnen:
</p>

<pre style="background='silver';">
datum=Request.QueryString("tag") &amp; "." &amp; Request.QueryString("monat") &amp;
   "." &amp; Request.QueryString("jahr") &amp; Chr(32) &amp; Request.QueryString("stunde") &amp;
   ":" &amp; Request.QueryString("minute") &amp; ":00"
datum=CDate(datum)
</pre>

<p>
In Zeile 190 wird der Datumsstring mit allen notwendigen Trenn- und Leerzeichen erzeugt. In 
Zeile 191 wird dieser dann mit 
<a href="http://www.microsoft.com/germany/scripting/vbscript/doc/vsfctCDate.htm" target="_blank">CDate</a> 
in den Datentyp Date umgewandelt.
</p>

<p>
Zu guter letzt m&uuml;ssen wir noch &uuml;berpr&uuml;fen, ob in den Feldern "ueberschrift", "text", "link" und 
"link_target" &uuml;berhaupt Werte eingeben wurden. Sollten "link" oder "link_target" leer sein, 
so ist das nicht weiter schlimm, da diese Felder ja optional sind. Allerdings m&uuml;ssen wir Ihnen 
dann den Wert Null zuweisen, damit wir beim Schreiben der Werte in die Datenbank keine 
Fehlermeldung erhalten.
</p>

<pre style="background='silver';">
if link = "" then link = Null
if link_target = "" then link_target = Null
</pre>

<p>
Die Felder "ueberschrift" und "text" hingegen m&uuml;ssen Werte enthalten, da ein Newsticker ohne 
Inhalt wenig Sinn machen w&uuml;rde. Sollte dies nicht der Fall sein, mu&szlig; eine entsprechende 
Fehlermeldung ausgegeben werden:
</p>

<IMG SRC="/artikel/Bilder/200102/20010209_3.png" width="534" height="302" alt="" border="0">

<p>
Die If-Abfrage mit ihren Folgen befindet sich in den Zeilen 194 - 316 der Datei 
<a href="../artikel/logikcc.htm" target="_blank">logik.asp</a>.
</p>

<p>
Nun, da alle Vorarbeiten erledigt sind, k&ouml;nnen wir unseren neuen Eintrag in der 
Datenbank anlegen:
</p>

<pre style="background='silver';">
Set rs = Server.CreateObject ("ADODB.Recordset")
rs.Cursortype = 1 ' adOpenKeyset
rs.Locktype = 3 ' adLockOptimistic
rs.Open "SELECT * FROM news WHERE Id=-1", conn
rs.AddNew
rs.Fields("ueberschrift") = ueberschrift
    rs.Fields("text") = text
    rs.Fields("eintraganzeigen") = eintraganzeigen
    rs.Fields("datum") = datum
    rs.Fields("link") = link
    rs.Fields("link_target") = link_target
rs.Update
rs.Close
Set rs = Nothing
conn.Close
</pre>

<p>
Zun&auml;chst &ouml;ffnen wir ein RecordSet-Objekt, um dann den neuen Datensatz in die Tabelle "news" 
schreiben zu lassen. Den Lohn unserer M&uuml;hen sehen Sie hier:
</p>

<IMG SRC="/artikel/Bilder/200102/20010209_4.png" width="528" height="392" alt="" border="0"> 

<p>
Somit ist dieser Teil der Administration abgeschlossen - wenden wir uns jetzt also dem &Auml;ndern 
von bestehenden Eintr&auml;gen zu.
</p>

<h2>Einen bestehenden Eintrag &auml;ndern</h2>

<IMG SRC="/artikel/Bilder/200102/20010209_5.png" width="533" height="566" alt="" border="0">

<p>
Wie Sie sehen k&ouml;nnen, unterscheidet sich die Maske f&uuml;r die &Auml;nderung von bestehenden Eintr&auml;gen 
praktisch nicht von der f&uuml;r das Neuanlegen von Eintr&auml;gen. Auch der Code, der hierf&uuml;r n&ouml;tig 
ist, ist nicht sonderlich kompliziert und befindet sich in den Zeilen 318 - 464 der Datei 
<a href="../artikel/logikcc.htm" target="_blank">logik.asp</a>.
</p>

<p>
In den Zeilen 354 - 395 werden wie schon beim Neuanlegen von Eintr&auml;gen die Datumswerte in 
OPTION-Felder gelesen. Allerdings wird dieses Mal der aktuelle Wert der Schleife nicht mit 
dem aktuellen Datumswert verglichen, sondern mit dem aus der Datenbank gelesenen Datumswert, 
also z.B.:
</p>

<pre style="background='silver';">
datum=rs.Fields("datum")
Response.Write("&lt;SELECT NAME="&amp;chr(34)&amp;"tag"&amp;chr(34)&amp;"&gt;")
For i = 1 To 31
Response.Write("&lt;OPTION VALUE=" &amp; i)
    If i=Day(datum) Then Response.Write(" SELECTED")
        Response.Write("&gt;")
        Response.Write(i)
    Next
Response.Write("&lt;/SELECT&gt;")
</pre>

<p>
Bei der Erstellung von neuen Eintr&auml;gen hatten wir die Funktion HtmlEncode verwendet, um Zeichen, 
die bei der Ausgabe Probleme verursachen k&ouml;nnen, in HTML-Codes umzuwandeln. Diesen Schritt 
machen wir nun bei der Anzeige der zu ver&auml;ndernden Eintr&auml;ge wieder r&uuml;ckg&auml;ngig, um nicht 
zum Beispiel in der Textbox "&amp;gt;" anstelle von "&gt;" angezeigt zu bekommen. Logischerweise 
verwenden wir hierzu wieder eine Funktion - diesmal mit dem Namen HtmlDecode:
</p>

<pre style="background='silver';">
Function HtmlDecode(ByVal eingabe)        
    eingabe = Replace(eingabe,"&lt;br&gt;",vbcrlf)
    eingabe = Replace(eingabe,"&amp;lt;",chr(60))
    eingabe = Replace(eingabe,"&amp;gt;",chr(62))
    HtmlDecode = Replace(eingabe,"&amp;acute;",chr(39))
End Function
</pre>

<p>
Bevor wir jedoch Eintr&auml;ge mit HtmlDecode bearbeiten k&ouml;nnen, m&uuml;ssen wir noch &uuml;berpr&uuml;fen, ob 
der zu bearbeitende Eintrag in der Datenbank nicht etwa leer ist. Ist dies der Fall, darf 
HtmlDecode nicht verwendet werden, da wir sonst eine Fehlermeldung der verwendeten 
Replace-Befehle erhalten. Die &Uuml;berpr&uuml;fung der Datens&auml;tze funktioniert wie folgt 
(Zeilen 404 - 424):
</p>

<pre style="background='silver';">
if Rs.Fields("link") &lt;&gt; "" Then Response.Write HtmlDecode(rs.Fields("link"))
</pre>

<p>
Eine Besonderheit birgt allerdings die &Uuml;berpr&uuml;fung des Feldes "Text". Bei Datenfelder vom 
Typ Memo kommt es h&auml;ufig vor, da&szlig; nach einmal erfolgter Abfrage des Feldes das Feld 
scheinbar seinen Inhalt vergi&szlig;t. Deshalb "sichern" wir vor der &Uuml;berpr&uuml;fung den Inhalt des 
Feldes "Text" in die Variable "text":
</p>

<pre style="background='silver';">
text=rs.Fields("text")
</pre>

<p>
und &uuml;berpr&uuml;fen, ob diese leer ist:
</p>

<pre style="background='silver';">
If text &lt;&gt; "" Then Response.Write HtmlDecode(text)
</pre>

<p>
Auch die Anzeige der Radio-Buttons (Eintrag anzeigen - Ja/Nein) stellt uns vor keine gr&ouml;&szlig;eren 
Probleme und passiert in den Zeilen 436 - 446:
</p>

<pre style="background='silver';">
If rs("eintraganzeigen")=True Then
    Response.Write("&lt;input type=" &amp; Chr(34) &amp; "radio" &amp; 
         Chr(34) &amp; " name=" &amp; Chr(34) &amp; "eintraganzeigen" &amp; 
         Chr(34) &amp; " value=" &amp; Chr(34) &amp; "true" &amp; Chr(34) &amp; 
         " checked") &amp; "&gt;"
    Response.Write("&lt;font face=" &amp; Chr(34) &amp; "Arial" &amp; Chr(34) &amp;
         "size=" &amp; Chr(34) &amp; "2" &amp; Chr(34) &amp; "&gt;Ja&amp;nbsp;&lt;/font&gt;")
    Response.Write("&lt;input type=" &amp; Chr(34) &amp; "radio" &amp; Chr(34) &amp; 
         " name=" &amp; Chr(34) &amp; "eintraganzeigen" &amp; Chr(34) &amp; " value=" &amp; 
         Chr(34) &amp; "False" &amp; Chr(34) &amp; "&gt;")
    Response.Write("&lt;font face=" &amp; Chr(34) &amp; "Arial" &amp; Chr(34) &amp; "size=" &amp; 
         Chr(34) &amp; "2" &amp; Chr(34) &amp; "&gt;Nein&lt;/font&lt;")
else
    Response.Write("&lt;input type=" &amp; Chr(34) &amp; "radio" &amp; Chr(34) &amp; " name=" &amp; 
        Chr(34) &amp; "eintraganzeigen" &amp; Chr(34) &amp; " value=" &amp; Chr(34) &amp; 
        "true" &amp; Chr(34) &amp; "&gt;")
    Response.Write("&lt;font face=" &amp; Chr(34) &amp; "Arial" &v Chr(34) &amp; 
        "size=" &amp; Chr(34) &amp; "2" &amp; Chr(34) &amp; "&gt;Ja&nbsp;&lt;/font&gt;")
    Response.Write("&lt;input type=" &amp; Chr(34) &amp; "radio" &amp; Chr(34) &amp; " name=" &amp; 
        Chr(34) &amp; "eintraganzeigen" &amp; Chr(34) &amp; " value=" &amp; Chr(34) &amp; "False" &amp; 
        Chr(34) &amp; " checked" &amp; "&gt;")
    Response.Write("&lt;font face=" &amp; Chr(34) &amp; "Arial" &amp; Chr(34) &amp; "size=" &amp; 
        Chr(34) &amp; "2" &amp; Chr(34) &amp; "&gt;Nein&lt;/font&gt;")
End If
</pre>

<p>
Entsprechend dem Ergebnis der If-Abfrage (Eintrag anzeigen Ja/Nein) werden die beiden Radio-Buttons 
als "checked" oder "unchecked" ausgegeben.
</p>

<p>
Nachdem nun die gew&uuml;nschten &Auml;nderungen eingetragen wurden, und auf den Button 
"&Auml;nderungen speichern" geklickt wurde, gelangen wir nun zum Speichern - oder genauer gesagt 
zum Updaten der Eintr&auml;ge.
</p>

<h2>Updaten ge&auml;nderter Eintr&auml;ge</h2>

<p>
Dieser Teil ist nun bis auf 3 &Auml;nderungen im Code absolut identisch mit dem Speichern von 
neuen Eintr&auml;gen und spielt sich im Bereich von Zeile 466 - 602 ab:
</p>

<p>
Anstelle von:
</p>

<pre style="background='silver';">
rs.Open "SELECT * FROM news", StrConn
</pre>

<p>
verwenden wir
</p>

<pre style="background='silver';">
rs.Open "SELECT * FROM news where int(id) = '" &amp; id &amp; "'", StrConn
</pre>

<p>
um den Datensatz auszuw&auml;hlen, der ge&auml;ndert werden soll.
</p>

<p>
Die Zeile
</p>

<pre style="background='silver';">
rs.AddNew
</pre>

<p>
entf&auml;llt komplett, da wir ja keinen neuen Eintrag erstellen wollen, sondern den zuvor 
selektierten updaten m&ouml;chten.
</p>

<p>
Die 3. &Auml;nderung ist kosmetischer Natur, d.h. es wurden die Ausgaben von z.B. 
"Neuen Eintrag speichern" auf "&Auml;nderungen speichern" ge&auml;ndert.
</p>

<h2>L&ouml;schen von Eintr&auml;gen</h2>

<p>
Kommen wir nun zum L&ouml;schen von Eintr&auml;gen. Dieser Teil besteht eigentlich nur aus zwei 
Befehlen, dem SQL Kommdo und dem Ausf&uuml;hren desselben (Zeilen 622 - 623 in 
<a href="../artikel/logikcc.htm" target="_blank">logik.asp</a>:
</p>

<pre style="background='silver';">
strSQL = "DELETE * FROM news WHERE int(id) = '" &amp; id &amp; "'"
Set rs = conn.Execute(strSQL)
</pre>

<h2>Back to the roots</h2>

<p>
Nun behandeln wir den Fall "back", d.h. der User wollte einen Eintrag l&ouml;schen und &uuml;berlegt es 
sich bei dir Sicherheitsabfrage doch anders. Hierf&uuml;r ben&ouml;tigen wir genau zwei Befehle 
- Response.Redirect f&uuml;r die Weiterleitung und response.end, um das Abarbeiten der Seite bis 
zum Ende zu unterbinden.
</p>

<pre style="background='silver';">
Response.Redirect "admin.asp"
Response.End
</pre>

<p>
Das ganze passiert in den Zeilen 625 - 626.
</p>

<h2>&Auml;ndern der Parameter</h2>

<p>
Jetzt haben wir es fast geschafft! Der letzte Fall der Case-Abfrage ist der, da&szlig; die 
Parameter ge&auml;ndert wurden. Der entsprechende Code befindet sich in den Zeilen 627 -727 der 
<a href="../artikel/logikcc.htm" target="_blank">logik.asp</a> und d&uuml;rfte Ihnen inzwischen bekannt vorkommen - es handelt
sich um die bereits verwendete Update-Anweisung. Einziger Unterschied: die WHERE-Bedingung 
entf&auml;llt, da wir in der Tabelle "settings" nur eine einzige Datenzeile haben.
</p>

<p>
Ein letzter Screenshot von der erfolgreichen &Auml;nderung der Parameter soll diesen Artikel nun 
abschlie&szlig;en....
</p>

<IMG SRC="/artikel/Bilder/200102/20010209_6.png" width="533" height="298" alt="" border="0">

<h2>Schlu&szlig;bemerkung</h2>

<p>
Mit dem in diesem Artikel vorgestellten Administrationstool haben Sie nun ein leistungsf&auml;higes 
Werkzeug an der Hand, um die Eintr&auml;ge des im 
<a href="../artikel/20001205.htm">ersten Teil des Artikels</a>
vorgestellten Newstickers schnell und einfach verwalten zu k&ouml;nnen.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p>
<h2>Download des Codes</h2>
<p><a href="../Code/20010209.zip">Klicken Sie hier</a>, um den Download zu starten.<br><SPAN class="content">http://www.aspheute.com/code/20010209.zip</span></p>
<h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20010417.htm">Eine Umfrage in ASP erstellen</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010417.htm</span><br>
<a href="../artikel/20000503.htm">Einfache String Operationen</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000503.htm</span><br>
<a href="../artikel/20001205.htm">Erstellung eines Newstickers in ASP</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20001205.htm</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
