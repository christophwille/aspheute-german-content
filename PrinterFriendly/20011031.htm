<HTML>
<HEAD>
<TITLE>Gegengifte f&uuml;r SQL Injection</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Im Artikel SQL Injection habe ich demonstriert, was darunter zu verstehen ist, und wie es funktioniert. Heute wollen wir uns die diversen Gegenstrategien ansehen, um SQL Injection in Zukunft zu verhindern.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,SQL Injection,Stored Procedure,SQL Server,ADO,prepared Statement,Command,regex,regular expression,regulärer Ausdruck">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Gegengifte f&uuml;r SQL Injection</H1>
<p>
Geschrieben von: <a href="../autoren/christophwille.htm">Christoph Wille</a><br>
Kategorie: <a href="../kategorien/Sicherheit.htm">Sicherheit</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20011031"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Im Artikel <a href="../artikel/20011030.htm">SQL Injection</a> habe ich demonstriert, was
darunter zu verstehen ist, und wie es funktioniert. Heute wollen wir uns die diversen Gegenstrategien
ansehen, um SQL Injection in Zukunft zu verhindern. Darunter f&auml;llt wie schon im gestrigen
Artikel erw&auml;hnt validieren, validieren, validieren und ein Umstellen des Codes auf nicht anf&auml;llige
Konstrukte.
</p>

<p>
Es gilt Michael Howard's Regel: <b>All input is evil, until proven otherwise!</b>
</p>

<p>
Und wie findet man nun heraus, ob der Input good oder evil ist? Man kann es entweder h&auml;ndisch
(mit Stringfunktionen) machen, oder sich endlich mit Regular Expressions anfreunden. Gerade 
Regular Expressions (regul&auml;re Ausdr&uuml;cke) sind die ultimative Power bei der &Uuml;berpr&uuml;fung von Input.
Sie sind sehr vielseitig, und erlauben eine Validierung, die man mit normalen Stringfunktionen
nicht leicht hinbekommt.
</p>

<p>
Dieser Artikel kann und will keine Einf&uuml;hrung in Regular Expressions sein. Aber ein guter
Start- und Referenzpunkt, schlie&szlig;lich geht es ja um Validierung von Input. Ein guter Startpunkt
ist der Artikel <a href="../artikel/20000829.htm">Regul&auml;re Ausdr&uuml;cke / Regular Expressions</a>,
und wer RegEx'en in Aktion sehen m&ouml;chte, sollte den Artikel <a href="../artikel/20010911.htm">Webseiten automatisiert scrapen, Teil 2</a>
lesen. Und wer ein tolles Archiv an RegEx'en sein eigen nennen will, soll die Website
<a href="http://regexlib.com" target="_blank">Regular Expression Library</a> besuchen - man kann
ohne eigenen Erfindungsreichtum die Regular Expressions anderer weiterverwenden. Es ist also einfach,
wenn man nur wei&szlig;, wo man die RegEx'en fertig herbekommt.
</p>

<p>
Validieren, validieren, validieren. Nicht vergessen.
</p>

<p>
Hat man den Input auf G&uuml;ltigkeit abgeklopft, sollte man nicht den Fehler machen, trotzdem die
selben fehleranf&auml;lligen SQL Konstrukte weiterzuverwenden. Man k&ouml;nnte unter Umst&auml;nden ja ein Attackeszenario vergessen
haben. F&uuml;r die Umstellung bieten sich bei SQL Server zwei Varianten an:
</p>

<ul>
  <li>Parametrisierte Kommandos
  <li>Stored Procedures
</ul>

<h2>Parametrisierte Kommandos</h2>
<p>
Parametrisierte Kommandos bieten sich nicht nur f&uuml;r SQL Server an, diese funktionieren auch mit
anderen Datenbanken. Generell sieht ein parametrisiertes Kommando f&uuml;r das Loginformular des letzten
Artikels so aus:
</p>

<pre style="background='silver';">
SELECT COUNT(*) FROM Users WHERE UserName=? AND UserPassword=?
</pre>

<p>
Der gro&szlig;e Unterschied ist, da&szlig; ich den SQL String nicht mehr dynamisch zusammenbaue. Das Kommando
wird &uuml;ber ADO vorbereitet (deshalb findet sich auch oft der Ausdruck <i>prepared statement</i>), man
k&ouml;nnte auch sagen vorkompiliert. Im Prinzip ist es eine tempor&auml;re Stored Procedure in SQL Server.
</p>

<p>
Durch diese Parametrisierung ist die Verwendung sehr &auml;hnlich zu einer Stored Procedure:
</p>

<pre style="background='silver';">
  strSQL = "SELECT COUNT(*) FROM Users WHERE UserName=? AND UserPassword=?"
  Set cmd = Server.CreateObject("ADODB.Command")
  cmd.CommandText = strSQL
  cmd.CommandType = adCmdText

  ' Kein Parametername wird &uuml;bergeben
  Set param = cmd.CreateParameter("", adVarChar, adParamInput, nMaxUsernameLength, strUsername)
  cmd.Parameters.Append param
  
  ' Aus Geschwindigkeitsgr&uuml;nden in ASP nicht empfehlenswert
  Set param = Server.CreateObject("ADODB.Parameter")
  param.Type = adVarChar
  param.Direction = adParamInput
  param.Value = strPassword
  param.Size = nMaxPasswordLength
  cmd.Parameters.Append param
  
  cmd.ActiveConnection = strConn 
  Set rs = cmd.Execute()
</pre>

<p>
Auch v&ouml;llig ohne Validierung funktioniert hier keinerlei SQL Injection mehr (vergesst die Idee
gleich wieder, <b>All input is evil, until proven otherwise!</b>).
</p>

<p>
Der gezeigte Code ist klarerweise ein wenig mehr Aufwand als das einfache zusammenbauen eines SQL Strings,
allerdings erspart man sich einiges an Kopfweh (der vollst&auml;ndige Code ist im Download in der Datei
<b>FortifiedLogin.asp</b> zu finden). Und &uuml;brigens: das funktioniert nicht nur f&uuml;r SELECT, sondern
genauso f&uuml;r INSERT, UPDATE oder DELETE.
</p>

<p>
Hinweis zum Beispielcode: aus Gr&uuml;nden der Klarheit der parametrisierten 
Kommandos fehlen die Regular Expression Validierungen - und auch deswegen, da&szlig; man sehen kann, da&szlig; 
SQL Injection nicht mehr funktioniert. Ebenfalls mit Absicht wird der 
<b>sa</b> Account verwendet. L&auml;uft das Beispiel unmodifiziert auf Eurem SQL Server, dann habt Ihr ein
zu stopfendes Sicherheitsloch!
</p>

<h2>Stored Procedures</h2>
<p>
Eine andere und bessere Umstellung des Codes ist die Verwendung von Stored Procedures.
Stored Procedures werden am Datenbankserver programmiert, und k&ouml;nnen dort mit entsprechenden
Ausf&uuml;hrungsberechtigungen versehen werden (ja, das ist in der Dokumentation zu finden - sogar
sehr leicht!). Die Programmierung und Verwendung geht einem mit ein wenig &Uuml;bung sehr leicht 
von der Hand, und es ist keineswegs schwarze Magie.
</p>
<p>
Obwohl ebenfalls keine schwarze Magie, ist das Erstellen des notwendigen ADO Codes zum Aufruf
von Stored Procedures l&auml;stig. Au&szlig;er man verwendet den
<a href="../artikel/20010308.htm">ADO Command Code Generator</a>: einfach den Namen der
Stored Procedure eingetippt, und schon wird der ADO Code automatisch generiert. Apropos
Stored Procedures: der Artikel <a href="../artikel/20001013.htm">Highspeed-Abfragen einer SQL Server Datenbank</a>
w&auml;re auch nicht zu verachten, wenn es um Hintergrundwissen zu Stored Procedures, ADO und Performance
geht.
</p>
<p>
Die .NET Programmierer habe ich auch nicht vergessen: f&uuml;r sie h&auml;tte ich den Einf&uuml;hrungsartikel
<a href="../artikel/20010626.htm">Stored Procedures 101 in ADO.NET </a> zu empfehlen.
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
Damit h&auml;tten wir die Punkte Validierung, Validierung, Validierung und Codeumbau abgehandelt. Die
Beschreibung ist mit Absicht auf den Punkt gebracht, weil die Beschreibung der jeweiligen Techniken
bereits existiert. 
Ein Kritikpunkt spezifisch f&uuml;r mein Loginformular ist noch, da&szlig; die Passw&ouml;rter in Plaintext in der Datenbank gespeichert
werden. Dem kann abgeholfen werden, wie im Artikel
<a href="../artikel/20010330.htm">Passw&ouml;rter mit SHA1 absichern</a> nachzulesen ist.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p>
<h2>Download des Codes</h2>
<p><a href="../Code/20011031.zip">Klicken Sie hier</a>, um den Download zu starten.<br><SPAN class="content">http://www.aspheute.com/code/20011031.zip</span></p>
<h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20020429.htm">Benutzerverwaltung leicht gemacht: Teil 1</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20020429.htm</span><br>
<a href="../artikel/20010308.htm">Der ADO Command Code Generator</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010308.htm</span><br>
<a href="../artikel/20020319.htm">Ein einfacher Eventkalender f&uuml;r Projektteams</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20020319.htm</span><br>
<a href="../artikel/20001013.htm">Highspeed-Abfragen einer SQL Server Datenbank</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20001013.htm</span><br>
<a href="../artikel/20010330.htm">Passw&ouml;rter mit SHA1 absichern</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010330.htm</span><br>
<a href="../artikel/20010326.htm">Records z&auml;hlen mit Stored Procedures</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010326.htm</span><br>
<a href="../artikel/20000829.htm">Regul&auml;re Ausdr&uuml;cke / Regular Expressions</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000829.htm</span><br>
<a href="../artikel/20011030.htm">SQL Injection</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20011030.htm</span><br>
<a href="../artikel/20010626.htm">Stored Procedures 101 in ADO.NET</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010626.htm</span><br>
<a href="../artikel/20011203.htm">Verhinderung von SQL Injection Marke .NET</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20011203.htm</span><br>
<a href="../artikel/20020131.htm">Vorsicht Falle: Dateien, die keine sind</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20020131.htm</span><br>
<a href="../artikel/20010911.htm">Webseiten automatisiert scrapen, Teil 2</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010911.htm</span><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fregexlib%2Ecom">Regular Expression Library</a><br>
<SPAN class="content">http://regexlib.com</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
