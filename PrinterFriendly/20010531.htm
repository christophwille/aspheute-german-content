<HTML>
<HEAD>
<TITLE>Keine gefakten Bestellungen mehr!</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Wenn man Kunden die M&ouml;glichkeit bietet, Produkte online zu bestellen, sollte man auf jeden Fall die eingegebenen Daten (Name, Emailadresse, Kreditkarteninformationen, etc.) &uuml;berpr&uuml;fen, bevor der Kunde die Bestellung abschicken kann.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Formularvalidierung,Auswertung,Validation,Check,Xcheck,Überprüfung,Bestellung,Einkauf">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Keine gefakten Bestellungen mehr!</H1>
<p>
Geschrieben von: <a href="../autoren/christianholm.htm">Christian Holm</a><br>
Kategorie: <a href="../kategorien/Komponenten.htm">Komponenten</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20010531"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Wenn man Kunden die M&ouml;glichkeit bietet, Produkte online zu bestellen, sollte man auf jeden Fall die
eingegebenen Daten (Name, Emailadresse, Kreditkarteninformationen, etc.) &uuml;berpr&uuml;fen, bevor der Kunde 
die Bestellung abschicken kann. Dies erspart unn&ouml;tigen &Auml;rger &uuml;ber falsche Angaben die eine Bestellung 
wertlos machen k&ouml;nnen.
Eine Abhilfe bietet die <i>SA Check</i> Komponente von SoftArtisans, die Ihnen bei der Validierung 
Ihrer Bestellformulare hilft und dabei viel Codierungsarbeit erspart.
</p>

<p>
Die Evaluierungsversion der <i>SA Check</i> Komponente k&ouml;nnen Sie bei 
<a href="http://www.softartisans.com/softartisans/saxcheck.html" target="_blank">SoftArtisans</a> downloaden. 30 Tage k&ouml;nnen
Sie dann die Komponente testen, ob sie Ihren Vorstellungen entspricht. Nach Ablauf der Evaluierungsperiode
m&uuml;ssen Sie sich bei Weiterverwendung zum Kauf entschlie&szlig;en.
</p>

<p>
Nach dem Download der Komponente enpacken Sie das Archiv, kopieren die Dateien <b>SACheck.dll</b>, <b>source.dat</b> 
und <b>Olchk32.dll </b> in das <i>System32</i> Verzeichnis des Webservers. Danach ist die Komponente mit 
<i>regsvr32 SACheck.dll</i> am Webserver zu registrieren. Und schon ist die Komponente einsatzbereit.
</p>

<p>
F&uuml;r diesen Artikel habe ich ein einfaches Bestellformular vorbereitet, welches die Funktionalit&auml;t der Komponente 
einsetzt. Der Beispielsourcecode umfa&szlig;t dabei "nur" die Erfassung der Kundendaten und Ihre Validierung. Was fehlt
ist die Funktionalit&auml;t des Shoppingcarts und die der Aufgabe bzw. Verarbeitung der Bestellung. Aber gerade der
Teil der Erfassung und Validierung der Kundeninformationen ist besonders kritisch, und deswegen gehen wir den relevanten Teil des Sourcecodes 
schrittweise durch (<b>IBuyStuff.asp</b>):
</p>

<pre style="background='silver';">
bIsPostback = CLng(Request.ServerVariables("CONTENT_LENGTH"))
strComment = Trim(Request.Form("txtComment"))
strEmail = Trim(Request.Form("txtEmail"))
strPhone = Trim(Request.Form("txtPhone"))
strAddress = Trim(Request.Form("txtAddress"))
strFullName = Trim(Request.Form("txtFullName"))
strCardNumber= Trim(Request.Form("txtCardNumber"))
strCardType = Trim(Request.Form("selCardType"))
strExpMonth = Trim(Request.Form("expMonth"))
strExpYear = Trim(Request.Form("expYear"))
</pre>

<p>
Zu Beginn speichern wir den Inhalt der <i>CONTENT_LENGTH</i> Servervariable in der Variable <i>bIsPostback</i>.
Damit l&auml;&szlig;t sich feststellen, ob ein Postback zum Server stattgefunden hat oder nicht. Zus&auml;tzlich speichern wir hier die
Werte der Eingabefelder aus dem Formular. Diese Werte werden dann in einem sp&auml;teren Teil mit Hilfe der
<i>SA Check</i> Komponente auf ihre G&uuml;ltigkeit hin &uuml;berpr&uuml;ft. Der Grund, warum ich dieses
Auslesen schon am Anfang der Seite mache? Damit ich bei Falscheingabe dem User zumindest seine eingegebenen
Daten im nun folgenden Formularteil nochmals pr&auml;sentieren kann.
</p>

<p>
Daher folgt vor der Eingabevalidierung das Formular in dem der Kunde seine Daten (Name, Adresse, 
Kreditkarteninformationen, etc.) eingeben mu&szlig;:
</p>

<pre style="background='silver';">
&lt;form action="IBuyStuff.asp" method="post"&gt;
&lt;table border="0"&gt;
&lt;th colspan="2" align="left"&gt;Personal Details:&lt;/th&gt;
&lt;tr&gt;
    &lt;td width="124"&gt;
        Full Name:
    &lt;/td&gt;
    &lt;td&gt;
        &lt;input type="Text" name="txtFullName" value="&lt;%=strFullName%&gt;" size="37"&gt;
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
        Address:
    &lt;/td&gt;
    &lt;td&gt;
        &lt;textarea name="txtAddress" cols="28" rows="5"&gt;&lt;%=strAddress%&gt;&lt;/textarea&gt;
    &lt;/td&gt;
...
</pre>

<p>
Dies ist nat&uuml;rlich nur ein Sourcecodeabschnitt von den Eingabefeldern. Die restlichen sind auf &auml;hnliche Weise 
formuliert. Zwecks einfacher Handhabung und als Demonstration reichen Tabellen f&uuml;r die Eingabefelder als
Positionierungshilfen. Nat&uuml;rlich w&uuml;rde man, um auch die optische Qualit&auml;t zu verbessern, CSS verwenden - dies sei aber 
nur nebenbei erw&auml;hnt. Als n&auml;chstes folgt die Eingabe der Zahlungsmodalit&auml;ten. F&uuml;r dieses Beispiel habe ich mich alleinig
f&uuml;r die M&ouml;glichkeit der Bezahlung per Kreditkarte entschieden, da die <i>SA Check</i> Komponente hier eine 
Vorvaliderungsm&ouml;glichkeit bietet - was genau diese alles kann, erfahren Sie etwas sp&auml;ter.
</p>

<p>
Der folgende Sourcecode erfa&szlig;t also die Kreditkarteninformationen. Um das Beispiel etwas aufzupeppen, zeige
ich mittels JavaScript bei Auswahl einer Kreditkartenfirma das jeweilig dazugeh&ouml;rige Logo an:
</p>

<pre style="background='silver';">
&lt;tr valign="middle"&gt;
    &lt;td&gt;
        Credit Card Type:
    &lt;/td&gt;
    &lt;td valign="top"&gt;
        &lt;SCRIPT LANGUAGE="JavaScript"&gt;
        &lt;!--
        function display(selection) 
        {
        switch (selection.options[selection.selectedIndex].text)
        { 
          case "Master Card" : document.creditcard.src='images/mc.png'; break;
          case "Visa" : document.creditcard.src='images/vi.png'; break;
          case "American Express": document.creditcard.src='images/ae.png'; break;
          default : document.creditcard.src='images/nosel.png';
         }
        }
        // --&gt;
        &lt;/SCRIPT&gt;
        &lt;SELECT NAME="selCardType" onChange="display(this)"&gt;
        &lt;OPTION VALUE=""&gt;&lt;/OPTION&gt;
        &lt;OPTION VALUE="Master Card"&gt;Master Card&lt;/OPTION&gt;
        &lt;OPTION VALUE="Visa"&gt;Visa&lt;/OPTION&gt;
        &lt;OPTION VALUE="American Express"&gt;American Express&lt;/OPTION&gt;
        &lt;/SELECT&gt;
    &lt;/td&gt;
    &lt;td&gt;        
        &lt;IMG NAME="creditcard" SRC="images/nosel.png" WIDTH="100" HEIGHT="60" border="0" alt=""&gt;
    &lt;/td&gt;
&lt;/tr&gt;
</pre>

<p>
Mittels eines <i>Switch</i> Statements unterscheide ich zwischen den einzelnen Kreditkartenfirmen (die
angegebenen Firmen wurden nat&uuml;rlich rein willk&uuml;rlich gew&auml;hlt), die aus einer Dropdown-Listbox ausgew&auml;hlt 
werden k&ouml;nnen. Sobald eine Auswahl vom Benutzer get&auml;tigt wurde, erscheint dann das entsprechende Symbol durch
<i>document.creditcard.src='Bild'</i>. Dieses Statement referenziert auf den unterhalb der Dropdown befindlichen <i>Image</i>
Tag.
</p>

<p>
Die f&uuml;r die Authorisierung der Kreditkarte notwendigen Informationen sind wiederum der Einfachheit halber in 
einer Tabelle eingebunden:
</p>

<pre style="background='silver';">
&lt;tr&gt;
    &lt;td&gt;
        Card Number:    
    &lt;/td&gt;
    &lt;td colspan="2"&gt;
        &lt;input type="text" name="txtCardNumber" size="37"&gt;    
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
        Expiry Date:
    &lt;/td&gt;
    &lt;td colspan="2"&gt;
        &lt;SELECT NAME="expMonth"&gt;
        &lt;OPTION VALUE""&gt;&lt;/OPTION&gt;
        &lt;OPTION&gt;01&lt;/OPTION&gt;
                     ...
        &lt;/SELECT&gt;
        / 
        &lt;SELECT NAME="expYear"&gt;
        &lt;OPTION VALUE""&gt;&lt;/OPTION&gt;
        &lt;OPTION&gt;2001&lt;/OPTION&gt;
                     ...
        &lt;OPTION&gt;2005&lt;/OPTION&gt;
        &lt;/SELECT&gt;
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td&gt;
        Card Holder's Name:    
    &lt;/td&gt;
    &lt;td colspan="2"&gt;
        &lt;input type="text" name="txtCardHolder" size="37"&gt;
    &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
    &lt;td align="center" colspan="3"&gt;
        &lt;input type="submit" value="Submit Order"&gt;
    &lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;        
</pre>

<p>
Diese Informationen beinhalten auch die G&uuml;ltigkeit der Kreditkarte (Dropdown-Listbox), welche ebenfalls &uuml;berpr&uuml;ft wird.
</p>
<p>
Nun, das war dann auch schon das ganze Eingabeformular - jetzt erst folgt der n&ouml;tige Sourcecode, der f&uuml;r die Validerung
zust&auml;ndig ist. Beginnen wir mit der &Uuml;berpr&uuml;fung der Kreditkarte:
</p>

<pre style="background='silver';">
   Set SA_Check=Server.CreateObject("SMUM.XCheck.1")

    If strCardNumber &lt;&gt; "" AND Len(strCardNumber) = 19 Then
        strCardNumber = SA_Check.CreditCardTypeFromNumber(strCardNumber)
    Else
        Response.Write "Invalid Card Number Format!&lt;br&gt;"
        bError = true
    End If
    
    If (strCardType &lt;&gt; strCardNumber) Then
        Response.Write "Invalid Card Number!&lt;br&gt;"
        bError = true
    End If
    If Not (strExpMonth = "") AND Not (strExpYear = "") Then
        If (CInt(strExpMonth) &lt;= CInt(Month(Now))) AND (CInt(strExpYear) &lt;= CInt(Year(Now))) Then
            Response.Write "Credit Card Expired!&lt;br&gt;"
            bError = true
        End If    
    Else
        Response.Write "No Expiry Date!&lt;br&gt;"
    End If
</pre>

<p>
Da wir ja nun von der <i>SA Check</i> Komponente Gebrauch machen, m&uuml;ssen wir zuerst mit <i>Server.CreateObject</i>
ein Objekt f&uuml;r sie instanzieren. Wie ich vorher schon erw&auml;hnt habe, bietet die Komponente eine Art 
Vorvalidierung f&uuml;r Kreditkarten - was hei&szlig;t das? Damit ist gemeint, da&szlig; die Komponente zwar die 
Kreditkartenfirma identifizieren kann (was nat&uuml;rlich schon ein Hindernis f&uuml;r einen Betrug darstellt), aber 
die restlichen 12 Stellen der Nummer bleiben unber&uuml;cksichtigt. Diese enthalten ja nun die verschl&uuml;sselten 
Karteninhaberinformationen.
</p>

<p>
Diese Validierung erledigt die <i>CreditCardTypeFromNumber</i> Methode, die die 16 stellige Nummer als
Eingabeparameter &uuml;bernimmt und die ersten vier Stellen der Nummer &uuml;berpr&uuml;ft. Als R&uuml;ckgabewert erh&auml;lt man -
falls die ersten vier Stellen g&uuml;ltig waren - den Namen der Kreditkartenfirma. Es werden hierbei die g&auml;ngigsten 
Firmen unterst&uuml;tzt. 
</p>

<p>
Falls die Nummer ung&uuml;ltig ist, wird eine Fehlermeldung ausgegeben und eine Variable namens <i>bError</i> vom Variant-Subtyp
Bool auf <i>true</i> gesetzt. Diese Art der (Vor)Authentifizierung sollte zun&auml;chst gen&uuml;gen, da letztendlich vor 
der Transaktion der Bestellung die Kreditkarte sowieso bei dem Kreditkarteninstitut authorisiert werden mu&szlig;.
</p>

<p>
Im gleichen Atemzug sehen wir noch nach, ob auch die richtige Anzahl von Stellen eingegeben wurden. Dies geschieht
hier mit der <i>Len</i> Funktion. 19 Stellen deshalb, weil ich eigenwillig die Eingabe im Format
<i>XXXX-XXXX-XXXX-XXXX</i> verlange, also 16 Stellen f&uuml;r die Kreditkartennummer und drei f&uuml;r die Separatoren.
</p>

<p>
Weiters verifizieren wir, ob die Angaben des Benutzer auch untereinander stimmen. Ich &uuml;berpr&uuml;fe also die Auswahl 
der Firma (<i>selCardType</i>, select Anweisung) mit dem Ergebnis der Komponente aus der Evaluierung der ersten vier
Stellen der Nummer.
</p>

<p>
Zuletzt &uuml;berpr&uuml;fen wir das "Ablaufdatum" der Karte, indem wir das erforderlich einzugebende Datum mit dem 
aktuellen Datum vergleichen. Die blo&szlig;e Anwendung der Methoden <i>Month</i> und <i>Year</i> ist zugegeben etwas
k&uuml;hn, da die Zeitzone des Servers hier bestimmend ist. Dies k&ouml;nnte bei internationelem Vertrieb in drastisch 
unterschiedliche Zeitzonen beim Wechsel der Monate bzw. Jahr zu f&auml;lschlichen Ergebnissen f&uuml;hren.
</p>

<p>
Wie in den vorigen Evaluierungstufen wird auch hier je nach auftretendem Fehler eine entsprechende Meldung 
ausgegeben, und falls nicht schon geschehen, die Variable <i>bError</i> auf <i>true</i> gesetzt.
</p>

<p>
Um weiteren Mi&szlig;brauch zu unterbinden, &uuml;berpr&uuml;fen wir mit Hilfe der Komponente die Eingabe eines sinnvollen Namens.
Dummy-Namen wie z.B. eine wirre Buchstabenansammlung oder den ber&uuml;hmten "John Doe" (samt Familienmitglieder, z.B. Jane)
haben hier keine Chance:
</p>

<pre style="background='silver';">
If (SA_Check.IsValidName(strFullName)) Then
        Response.Write "Please enter your name again&lt;br&gt;"
        bError = true
End If
</pre>

</p>
Obwohl die Komponente aus den USA stammt, sind teilweise auch Namen aus dem 
deutschsprachigen Raum vertreten. Der Datenbestand wird aber fortw&auml;hrend erweitert - solange Ihre Kunden nicht
wie in den USA unliebsame Personen hei&szlig;en, aber daf&uuml;r in Europa gebr&auml;uchliche
Namen haben, k&ouml;nnen diese auch bestellen.
</p>

<p>
Weiters &uuml;berpr&uuml;fen wir noch, ob die angegebene Emailadresse g&uuml;ltig ist:
</p>


<pre style="background='silver';">
If Not (SA_Check.IsValidEmail(strEmail)) Then 
    	Response.Write "This is an invalid Email address&lt;br&gt;"
        bError = true
End If
</pre>

<p>
Was vielleicht nicht so ganz ernstzunehmen scheint, ist die &Uuml;berpr&uuml;fung auf diverse ausf&auml;llige
Bemerkungen. Damit lassen sich Bestellungen von Kunden, die gern &uuml;berschwenglich ihrem Zorn freien Lauf lassen,
ohne viel Aufwand annullieren - haben Sie schon oft (erbost) bestellt und nichts erhalten?:
</p>

<pre style="background='silver';">
If (SA_Check.HasProfanity(strComment)) Then
        Response.Write "Explicit language!&lt;br&gt;"
        bError = true
End If
</pre>

<p>
Nun ist die Bestellung kurz vor dem Versenden. Sie wird abgeschickt, wenn keine Fehler in den
Formularfeldern aufgetaucht sind:
</p>

<p>

<pre style="background='silver';">
If (bError) Then 
        Response.Write "<b>No Order Submitted!</b>"
Else
     ...
End If
</pre>

<p>
In der Alternativverzweigung des if-Statements k&ouml;nnen Sie - da die Bestellung (bis jetzt) g&uuml;ltig erscheint -
die Daten zur Bestellungsauthorisierung dem Kreditkarteninstitut &uuml;bermitteln und bei abermaligem Erfolg endlich
die Bestellung entgegennehmen. Dies, wie gesagt, sollte nicht Thema des Artikels sein.
</p>

<p>
Zu guter Letzt m&ouml;chte ich Ihnen noch zwei Screenshots pr&auml;sentieren, die jeweils nach Ausf&uuml;hrung der ASP-Seite
<b>IBuyStuff.asp</b> im Browserfenster angezeigt wurden:
</p>

<IMG SRC="/artikel/Bilder/200105/20010531_1.png" width="303" height="450" alt="" border="0">&nbsp;<IMG SRC="/artikel/Bilder/200105/20010531_2.png" width="261" height="450" alt="" border="0">

<p>
Ad Screenshots - linker Hand eine vorerst g&uuml;ltige Bestellung. Das zweite Bild zeigt eine ung&uuml;ltige Bestellung mit Fehlermeldungen.
</p>

<h2>Schlu&szlig;bemerkung</h2>

<p>
Die Vorteile der Komponente liegen in der einfachen Handhabung und in den umfangreichen M&ouml;glichkeiten der 
Validerungen - wohlgemerkt hat der Artikel nur eine bescheidene und f&uuml;r das Artikelbeispiel relevante Auswahl
getroffen. Da der Sourcecode einfach gehalten ist, l&auml;&szlig;t er sich auch beliebig erg&auml;nzen und eben "shopping"-
tauglich machen.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p>
<h2>Download des Codes</h2>
<p><a href="../Code/20010531.zip">Klicken Sie hier</a>, um den Download zu starten.<br><SPAN class="content">http://www.aspheute.com/code/20010531.zip</span></p>
<h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20000522.htm">&Uuml;berpr&uuml;fen von HTML-Formularen mit ASP</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000522.htm</span><br>
<a href="../artikel/20000406.htm">Auswertung von HTML Formularen mit ASP</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000406.htm</span><br>
<a href="../artikel/20001121.htm">AutoCompletion f&uuml;r Web Formulare</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20001121.htm</span><br>
<a href="../artikel/20000628.htm">Kreditkarten&uuml;berpr&uuml;fung mit ASP</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000628.htm</span><br>
<a href="../artikel/20000822.htm">Mailadressen-&uuml;berpr&uuml;fen f&uuml;r Fortgeschrittene</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000822.htm</span><br>
<a href="../artikel/20000901.htm">Sichere Zahlungen im Internet mit SET</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000901.htm</span><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Esoftartisans%2Ecom%2Fsoftartisans%2Fsaxcheck%2Ehtml">SA Check</a><br>
<SPAN class="content">http://www.softartisans.com/softartisans/saxcheck.html</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
