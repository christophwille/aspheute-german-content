<HTML>
<HEAD>
<TITLE>Wer bist Du? Eine kurze Einf&uuml;hrung in das .NET Reflection API</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Das sogenannte Reflection API liest aus den Metadaten der Objekte die Informationen &uuml;ber die angesprochenen Objekte bzw. deren Typen aus, d.h. die Objekte reflektieren &uuml;ber sich selbst.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Reflection,System.Reflection,MethodInfo,DataSource,DataBind,Spalte,dynamisch,binden,Bindung">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Wer bist Du? Eine kurze Einf&uuml;hrung in das .NET Reflection API</H1>
<p>
Geschrieben von: <a href="../autoren/alexanderzeitler.htm">Alexander Zeitler</a><br>
Kategorie: <a href="../kategorien/dotNET%20Fu.htm">.NET Fu</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20040624"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Will man zum Beispiel einem selbst entwickelten User- oder Server Control eine DataSource Property spendieren, welche 
au&szlig;er DataSets und Collections auch selbst (oder von Dritten) entwickelte Objekte (Klassen) verarbeiten kann, ist es notwendig, 
dass diese von einer von uns bereitgestellten Klasse erben oder ein Interface (z.B. ICollection) implementieren - im Normalfall.
</p>
<p>
Doch was tun, wenn der Entwickler, der unser Control verwendet, v&ouml;llig frei in der Gestaltung seiner Klassen sein soll, die 
er als DataSource zuweisen m&ouml;chte?  Ein Beispiel aus der Praxis: Wir entwickeln ein User Control, das Daten &auml;hnlich dem 
DataGrid pr&auml;sentiert. Der Entwickler hat nun eine Klasse Product, deren Properties er gerne mit unserem Control darstellen 
m&ouml;chte. Da der Entwickler das Design seiner Product-Klasse selbst festlegen mu&szlig; (wir wissen nicht, welche Eigenschaften 
seine Produkte besitzen), k&ouml;nnen wir ihm auch kein Interface bereitstellen, das er implementieren kann. 
</p>

<h2>Das Reflection API</h2>
<p>
Die L&ouml;sung hei&szlig;t <i>Reflection</i>. Das sogenannte Reflection API befindet sich im .NET Framework in dem Namespace 
<i>System.Reflection</i> und liest aus den Metadaten der Objekte die Informationen &uuml;ber die angesprochenen Objekte bzw. 
deren Typen aus, d.h. die Objekte reflektieren &uuml;ber sich selbst.
</p>
<p>
Die Metadaten beinhalten Informationen &uuml;ber Methoden, Eigenschaften, Events usw. der Objekttypen:
</p>

<IMG SRC="/artikel/Bilder/200406/20040624.png" width="590" height="231" alt="" border="0">

<h2>Auslesen der Metainformationen</h2>
<p>
Wie kommen wir nun an diese Informationen? Wie bereits erw&auml;hnt, gewinnt Reflection die Informationen aus den Typen (bzw. 
deren Metadaten) selbst, d.h. wir m&uuml;ssen den Typ einer Instanz eines Objektes feststellen, &uuml;ber das wir Informationen 
erhalten m&ouml;chten.
</p>
<p>
In unserem Fall m&uuml;ssen wir die <i>DataSource</i>-Eigenschaft - genauer die Items in dieser DataSource - zur Typbestimmung 
heranziehen. Die Typbestimmung geschieht &uuml;ber die Methode <i>.GetType()</i>, welche jedes Objekt bereitstellt:
</p>

<pre style="background='silver';">
foreach(object DataSourceItem in DataSource)
{
    Type t = DataSourceItem.GetType();
}
</pre>

<p>
Um nun alle Eigenschaften (Properties) eines Typs zu lesen, verwenden wir die Methode <i>GetProperties()</i>. Diese liefert
ein Array vom Typ PropertyInfo zur&uuml;ck, welches die Properties beinhaltet. Das Auslesen aller Properties funktioniert wie folgt:
</p>

<pre style="background='silver';">
foreach(System.Reflection.PropertyInfo pi in t.GetProperties())
{
   Response.Write("Name der Eigenschaft: ");
   Response.Write(pi.Name + "&lt;br&gt;");
   Response.Write("Typ der Eigenschaft: ");
   Response.Write(pi.PropertyType + "&lt;br&gt;&lt;br&gt;");
}
</pre>

<p>
Analog hierzu gibt es z.B. f&uuml;r Methoden die Klasse MethodInfo - f&uuml;r Events verwenden wir EventInfo.
</p>
<p>
Au&szlig;erdem ist es auch m&ouml;glich, gezielt auf Eigenschaften usw. zuzugreifen. Hierzu gibt es z.B. die Methode 
.GetProperty (also Singular statt Plural im Methodenname).
</p>

<h2>Auslesen von Inhalten</h2>
<p>
Doch nicht nur die Eigenschaften, Methoden usw. von Objekten lassen sich per Reflection auslesen, sondern auch deren Inhalte.
</p>
<p>
Der Wert einer Eigenschaft eines instanzierten Objekts l&auml;sst sich mit der GetValue()-Methode herausfinden:
</p>

<pre style="background='silver';">
Response.Write("Wert der Eigenschaft:");
Response.Write(pi.GetValue(DataSourceItem,null).ToString() + "&lt;br&gt;");
</pre>

<h2>Ausf&uuml;hren von Methoden</h2>
<p>
Doch selbst hier ist Reflection noch nicht am Ende - Reflection erlaubt auch das Aufrufen von Methoden eines Objekts zur 
Laufzeit - erm&ouml;glicht wird das durch die <i>Invoke</i>-Methode der <i>MethodInfo</i>-Klasse - hier am Beispiel einer <i>Product</i>-Klasse, 
deren <i>Delete</i>-Methode wir zur Laufzeit ausf&uuml;hren werden:
</p>

<pre style="background='silver';">
Product myProduct = new Product();
Type t = myProduct.GetType();
MethodInfo mi = t.GetMethod("Delete");
mi.Invoke(p, null);
</pre>

<h2>Schlu&szlig;bemerkung</h2>
<p>
Wie man sieht, ist Reflection nicht nur graue Theorie, sondern auch in der Praxis durchaus n&uuml;tzlich und notwendig. Ein weiteres 
Beispiel aus der Praxis, das nahezu jeder t&auml;glich beim Entwickeln nutzt, ist die in Visual Studio .NET integrierte IntelliSense.
</p>
<p>
Weitere Informationen zum Reflection API finden sich in der 
<a href="http://msdn.microsoft.com/library../default.htm?url=/library/en-us/cpref/html/frlrfsystemreflection.asp" target="_blank">Dokumentation des System.Reflection-Namespaces</a>.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2Fdefault%2Easp%3Furl%3D%2Flibrary%2Fen%2Dus%2Fcpref%2Fhtml%2Ffrlrfsystemreflection%2Easp">Dokumentation des System.Reflection-Namespaces</a><br>
<SPAN class="content">http://msdn.microsoft.com/library../default.htm?url=/library/en-us/cpref/html/frlrfsystemreflection.asp</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
