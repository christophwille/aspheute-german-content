<HTML>
<HEAD>
<TITLE>Erstellung eines Intranets in ASP (Teil 4) - Mitarbeiter</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Heute werden wir den bereits aus dem zweiten Teil bekannten Setup-Assistenten in abgewandelter Form als Mitarbeiterassitenten bereitstellen. Au&szlig;erdem werden wir eine Treeview zur Mitarbeiterverwaltung entwickeln.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Intranet,ASPIntranet,ASPIntranet.de,Setup,Navigation,Assistent,Treeview,Navigationsleiste">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Erstellung eines Intranets in ASP (Teil 4) - Mitarbeiter</H1>
<p>
Geschrieben von: <a href="../autoren/alexanderzeitler.htm">Alexander Zeitler</a><br>
Kategorie: <a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20010920"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Auch heute hei&szlig;e ich Sie wieder herzlich willkommen - und zwar zum vierten Teil der Artikelserie zur Erstellung eines 
Intranets mit ASP. Heute werden wir den bereits aus dem zweiten Teil bekannten Setup-Assistenten in abgewandelter Form 
als Mitarbeiterassitenten bereitstellen. Au&szlig;erdem werden wir eine Treeview zur Mitarbeiterverwaltung entwickeln. 
Zur Navigation innerhalb des Intranets werden wir eine Navigationsleiste programmieren.
</p>

<p>
Beachten Sie bitte, da&szlig; alle in diesem (und folgenden) Teil(en) gezeigten Datenbanktabellen in die bereits bestehende 
Datenbank <b>aspintranet.mdb</b> importiert werden m&uuml;ssen, um zu vermeiden, da&szlig; bereits durchgef&uuml;hrte Setups oder angelegte 
Mitarbeiter &uuml;berschrieben werden.
</p>

<h2>Die Treeview</h2>

<p>
Die erste Erweiterung unseres Intranets, die wir heute schaffen werden, ist die Treeview zur Verwaltung aller 
mitarbeiterbezogenen Anwendungen. Damit Sie sich ein Bild von dem geplanten Ergebnis machen k&ouml;nnen, zun&auml;chst ein 
Screenshot:
</p>

<IMG SRC="/artikel/Bilder/200109/20010920_1.png" width="186" height="211" alt="" border="0">

<p>
Die Treeview ist, wie im Bild zu sehen, in zwei Teile untergliedert: den Punkt "Verwaltung" und die Auflistung aller 
Mitarbeiter (da zur Zeit nur ein Mitarbeiter existiert, ist diese Liste entsprechend kurz). Innerhalb des Men&uuml;punktes 
"Verwaltung" werden wir Funktionen zur Verwaltung grundlegender, mitarbeiterbezogener Daten integrieren, wie z.B. 
den bereits angezeigten Men&uuml;punkt "Mitarbeiter bearbeiten". Innerhalb des angezeigten Mitarbeiters werden wir 
Funktionen integrieren, welche sich ausschlie&szlig;lich auf den jeweiligen Mitarbeiter beziehen - so z.B. allgemeine 
Informationen (im Screenshot zu sehen).
</p>

<p>
Um diese Optionen leicht erweitern oder ver&auml;ndern zu k&ouml;nnen, werden wir diese in einer Tabelle in unserer Datenbank 
speichern. Sp&auml;ter werden wir uns hierf&uuml;r eine Administrationsseite erstellen, um direktes Arbeiten in der 
Datenbank zu vermeiden. Die neue Tabelle tr&auml;gt den Namen "Mitarbeiter_Optionen":
</p>

<IMG SRC="/artikel/Bilder/200109/20010920_2.png" width="535" height="110" alt="" border="0">

<p>
Die Felder sind durch die Beschreibung im Screenshot bereits erkl&auml;rt. Der Grund f&uuml;r das Feld "OptionTyp" ist folgender: 
auf einen Mitarbeiter bezogene Funktionen ben&ouml;tigen f&uuml;r den Aufruf diverse Parameter, w&auml;hrend Funktionen, die sich auf 
alle Mitarbeiter beziehen, ohne Parameter aufgerufen werden. Somit ergeben sich zwei Optionstypen, die in dem Feld 
"OptionTyp" gespeichert werden.
</p>

<p>
Eine weitere Erg&auml;nzung, die Sie zur Integration des Treeviews oder allgemeiner der Mitarbeiterverwaltung ben&ouml;tigen, sind 
vier neue Unterverzeichnisse innerhalb unseres Intranet-Verzeichnisbaumes: 
</p>

<IMG SRC="/artikel/Bilder/200109/20010920_3.png" width="168" height="210" alt="" border="0">

<p>
Die Mitarbeiterverwaltung besteht insgesamt aus 3 Frames, deren Framesets in der Datei <b>default.asp</b> im Verzeichnis 
"mitarbeiter" definiert werden. Diese Datei beinhaltet keinerlei ASP-Code, ebenso wie die im Frameset aufgerufene 
Datei "treetitle.asp", die optischen Zwecken dient. F&uuml;r uns interessant und unser n&auml;chstes Ziel ist die Datei 
<b>tree.asp</b>, welche ebenfalls im Verzeichnis "mitarbeiter" abgelegt wird. Sie beinhaltet die Logik f&uuml;r die 
Treeview, zu der wir uns bereits eingangs Gedanken gemacht haben. Diese werden wir nun durch eine Kombination von 
ASP und JavaScript in die Tat umsetzen.
</p>

<p>
Der Grundgedanke der Treeview ist, m&ouml;glichst viele Informationen m&ouml;glichst platzsparend und gut strukturiert darzustellen. Dies wird dadurch erreicht, da&szlig; zun&auml;chst nur die Hauptpunkte der Verwaltung dargestellt werden. Durch einen Klick auf einen der Punkte wird dieser nach unten "ausgeklappt", so da&szlig; die darin enthaltenen Men&uuml;punkte sichtbar werden. Nat&uuml;rlich ist Ihnen dieses Funktion aus unz&auml;hligen Windows-Anwendungen bekannt. Um diese Funktion nachzuprogrammieren ben&ouml;tigen wir grundlegend folgendes JavaScript:
</p>

<pre style="background='silver';">
&lt;script type="text/javascript" language="JavaScript"&gt;
&lt;!--//
function toggle(Tabelle,Node,Buch,Suffix)
    {
    var IsClosed = true;
    IsClosed = Tabelle.style.getAttribute("display")=="none";
    if(IsClosed==false)
    {
    Tabelle.style.setAttribute("display","none");
        ToggleString="images/tree_plus" + Suffix + ".gif";
        Node.src=ToggleString;
        Buch.src="images/tree_buch.gif";
    }
    else
    {
        Tabelle.style.setAttribute("display","inline");
        ToggleString="images/tree_minus" + Suffix + ".gif";
        Node.src=ToggleString;
        Buch.src="images/tree_buch_open.gif";
    }
    }
//--&gt;
&lt;/script&gt;
</pre>

<p>
Das HTML-Grundger&uuml;st der Treeview besteht aus mehreren HTML-Tabellen, die numeriert werden, soda&szlig; sie eindeutig 
identifizierbar und via JavaScript ansprechbar sind. Diese Tabellen enthalten die Grafiken und Texte der Treeview. 
Um den Ausklappeffekt zu realisieren, m&uuml;ssen Tabellen, die die Hauptmen&uuml;punkte enthalten, sichtbar sein, und Tabellen 
mit Untermen&uuml;punkten zun&auml;chst unsichtbar sein. Beim Klick auf einen Hauptmen&uuml;punkt m&uuml;ssen die darunterliegenden 
Men&uuml;punkte oder genauer, die Tabellen in denen sie enthalten sind, sichtbar werden. Bei nochmaligem Klick auf den 
Hauptmen&uuml;punkt sollen die Tabellen mit den Untermen&uuml;punkten wieder unsichtbar werden. 
</p>

<p>
Aus visuellen Gr&uuml;nden &auml;ndern sich au&szlig;erdem zum jeweiligen Zustand passend die Grafiken (auch diese werden numeriert). 
Das obenstehende Skript erledigt eben diese Aufgaben. Nach dem Aufruf des Skripts (durch den Event-Handler Onclick, 
dazu sp&auml;ter mehr) liest dieses zun&auml;chst die Nummer der Tabelle, des Icons f&uuml;r das Expandieren/Schlie&szlig;en des Men&uuml;punkts, 
des Icons f&uuml;r das angezeigte Buch sowie das Suffix des Icons f&uuml;r das Expandieren/Schlie&szlig;en des Men&uuml;punkts. Der Grund 
f&uuml;r die Verwendung eines Suffixes f&uuml;r das Icons ist folgender: Hauptmen&uuml;punkte und Untermen&uuml;punkte, welche am Ende 
der jeweiligen Liste stehen, m&uuml;ssen durch ein anderes Icon dargestellt werden, als solche, die am Anfang oder 
innerhalb der Liste stehen. Welches Suffix verwendet wird, entscheidet sp&auml;ter unser ASP-Skript.
</p>

<p>
Nach dem Einlesen der Parameter liest das Skript den Display-Status der &uuml;bergebenen Tabelle aus:
</p>

<pre style="background='silver';">
IsClosed = Tabelle.style.getAttribute("display")=="none";
</pre>

<p>
Ist die Tabelle bereits sichtbar, so wird der neue SRC-Parameter des Icons f&uuml;r das Expandieren/Schlie&szlig;en des 
Men&uuml;punkts so gesetzt, da&szlig; das Icon ein Plus-Zeichen darstellt, welches dem Anwender zeigt, da&szlig; der Zweig der 
Treeview ausgeklappt werden kann. Danach wird dieser dem Icon zugewiesen. Ebenso wird der SRC-Tag des zugeh&ouml;rigen 
Buches ge&auml;ndert, so da&szlig; dieses nun geschlossen erscheint. 
</p>

<p>
Ist die Tabelle unsichtbar, so wird der soeben beschriebene Vorgang so ausgef&uuml;hrt, da&szlig; der Ausklappeffekt eintritt.
</p>

<p>
Um das JavaScript zum Leben zu erwecken, m&uuml;ssen wir nun mit ASP die Tabellen, Grafiken und Texte aus den 
Datenbanktabellen "Mitarbeiter_Optionen" und "Mitarbeiter" generieren lassen.
</p>

<p>
Zun&auml;chst &uuml;berpr&uuml;fen wir, ob denn &uuml;berhaupt Mitarbeiter in der Tabelle "Mitarbeiter" vorhanden sind. Ist dies nicht 
der Fall, so mu&szlig; der Hauptmen&uuml;punkt "Verwaltung" zugleich der erste als auch der letze Eintrag im Treeview sein:
</p>

<pre style="background='silver';">
StrSQL = "SELECT ID FROM Mitarbeiter ORDER BY Nachname,Vorname"
Set rs = Conn.Execute(StrSQL)
'Nein, dann merken
If rs.Eof Then bNoEntries = True
'Z&auml;hler f&uuml;r Toplevel-Nodes initialisieren
IntCountTopNodes = 0
'Z&auml;hler erh&ouml;hen
IntCountTopNodes = IntCountTopNodes + 1
</pre>

<p>
Der Z&auml;hler IntCountTopNodes wird zun&auml;chst mit dem Wert "0" initialisiert und dann erh&ouml;ht. Dieser Z&auml;hler ist f&uuml;r die 
bereits erkl&auml;rte Numerierung der Tabellen und Grafiken zust&auml;ndig.
</p>

<p>
Die Erkl&auml;rung des n&auml;chsten Codeabschnitts steht exemplarisch f&uuml;r diesen und die drei darauffolgenden:
</p>

<pre style="background='silver';">
If bNoEntries = True Then
    Response.Write "&lt;img id=""node" &amp; IntCountTopNodes &amp; """ SRC=""images/tree_plus_last.gif"" 
        WIDTH=20 HEIGHT=24 BORDER=0 onclick=""toggle(Tabelle" &amp; IntCountTopNodes &amp; ",node" &amp; 
        IntCountTopNodes &amp; ",treenode" &amp; IntCountTopNodes &amp; ",'_last')"" class=""TreeImgLink""&gt;"
Else
    Response.Write "&lt;img id=""node" &amp; IntCountTopNodes &amp; """ SRC=""images/tree_plus.gif"" 
        WIDTH=20 HEIGHT=24 BORDER=0 onclick=""toggle(Tabelle" &amp; IntCountTopNodes &amp; ",node" &amp; 
        IntCountTopNodes &amp; ",treenode" &amp; IntCountTopNodes &amp; ",'')"" class=""TreeImgLink""&gt;"
End If
</pre>

<p>
Zun&auml;chst wird &uuml;berpr&uuml;ft, ob keine weiteren Hauptmen&uuml;punkte folgen (bNoEntries = True). Entsprechend wird die 
Grafik mit dem Plus-Zeichen f&uuml;r das Ende der Liste oder den Anfang/Mittelteil der Liste angezeigt. Au&szlig;erdem wird 
der Grafik ein eindeutiger Wert mittels "IntCountTopNodes" zugewiesen. Weiterhin wird das Onlick-Event generiert. 
Zun&auml;chst folgt der Aufruf der JavaScript-Funktion "toggle", gefolgt von den Parametern, die wir bei der Definition 
der JavaScript-Funktion festgelegt hatten. Auch diese werden mit dem Wert von "IntCountTopNodes" versehen. Der letzte 
Parameter ist das bereits angesprochene Suffix, welches entweder "_last" lautet oder leer ist. "_last" findet sich 
im Dateinamen der entsprechenden Grafiken wieder.
</p>

<p>
Nach den folgenden drei identischen If-Abfragen f&uuml;r die weiteren Grafiken und Texte des gleichen Hauptmen&uuml;punkts folgt 
die Definition der untergeordneten Tabelle (welche ja die Untermen&uuml;punkte beinhaltet):
</p>

<pre style="background='silver';">
Response.Write "&lt;table cellspacing=0 cellpadding=0 BORDER=0 id=""Tabelle" &amp; IntCountTopNodes &amp; """ 
    style=""display:none""&gt;" &amp; VbCrLf
</pre>

<p>
Auch hier findet sich die Numerierung mit immer noch dem gleichen Wert von "IntCountTopNodes" wieder. Au&szlig;erdem wird hier 
der STYLE der Tabelle definiert, welcher daf&uuml;r zust&auml;ndig ist, da&szlig; die Tabelle zun&auml;chst unsichtbar ist.
</p>

<p>
W&uuml;rden wir jetzt auf den Hauptmen&uuml;punkt "Verwaltung" klicken, w&uuml;rden sich bereits die Grafiken entsprechend ver&auml;ndern. 
Allerdings fehlen uns noch die Eintr&auml;ge f&uuml;r die Untermen&uuml;punkte. Diese lassen wir nun aus der Tabelle 
"Mitarbeiter_Optionen" generieren:
</p>

<pre style="background='silver';">
Set rs1 = Server.CreateObject ("ADODB.Recordset")
rs1.Cursortype = 1 'adOpenKeyset
rs1.Locktype = 3 'adLockOptimistic
rs1.Open "SELECT * FROM Mitarbeiter_Optionen WHERE OptionTyp = 2", Conn
rs1.Movelast
IntLetzter = rs1("id")
rs1.Movefirst
Do While Not rs1.Eof
    Response.Write "&lt;tr&gt;" &amp; VbCrLf
    Response.Write "&lt;td&gt;"
    If IntLetzter = rs("id") Then
        Response.Write "&lt;img src=""images/tree_empty.gif"" width=""20"" 
            height=""24"" border=""0"" alt=""""&gt;"
    Else
        Response.Write "&lt;img SRC=""images/tree_ebene1.gif"" 
            WIDTH=20 HEIGHT=24 BORDER=0&gt;"
    End If
    Response.Write "&lt;/td&gt;" &amp; VbCrLf
    Response.Write "&lt;td&gt;"
    If IntLetzter = rs1("id") Then
        Response.Write "&lt;img SRC=""images/tree_node_last.gif"" 
            WIDTH=20 HEIGHT=24 BORDER=0&gt;"
    Else
        Response.Write "&lt;img SRC=""images/tree_node.gif"" 
            WIDTH=20 HEIGHT=24 BORDER=0&gt;"
    End If
    Response.Write "&lt;/td&gt;" &amp; VbCrLf
    Response.Write "&lt;td&gt;"
    Response.Write "&lt;img SRC=""images/node.gif"" WIDTH=""12"" 
        HEIGHT=""15"" BORDER=""0"" alt=""""&gt;"
    Response.Write "&lt;/td&gt;" &amp; VbCrLf
    Response.Write "&lt;td class=""TreeNode""&gt;&amp;nbsp;"
    Response.Write "&lt;a href=""" &amp; rs1("url") &amp; """ onFocus=blur()&gt;" &amp; rs1("option") &amp; "&lt;/a&gt;"
    Response.Write "&lt;/td&gt;" &amp; VbCrLf
    Response.Write "&lt;/tr&gt;" &amp; VbCrLf
    rs1.Movenext
Loop
</pre>

<p>
Zun&auml;chst lassen wir alle Mitarbeiter-Optionen vom Typ "2" (also alle allgemeinen mitarbeiterbezogenen) aus der Tabelle 
"Mitarbeiter_Optionen" lesen. Im Anschlu&szlig; springen wir zum letzten Datensatz, um dessen ID in der Variable 
"IntLetzter" zu speichern. Nach einem Sprung an den Anfang des Recordsets pr&uuml;fen wir, ob die ID des Datensatzes 
identisch ist mit der ID des letzten Datensatzes. Ist dies der Fall mu&szlig; das Untermen&uuml;punkt-Icon angezeigt werden, das 
den letzten Eintrag in der Liste der Untermen&uuml;punkte markiert. Sind die IDs verschieden, so wird der Eintrag normal 
(also am Anfang oder innerhalb der Liste) dargestellt. Danach wird der Titel der aktuellen Option ausgegeben, welchem 
der entsprechende Link zur Anwendung zugeordnet wird.
</p>

<p>
Die Treeview f&uuml;r den Bereich "Verwaltung" ist damit bereits voll funktionst&uuml;chtig. Der Aufbau f&uuml;r die Auflistung der 
Mitarbeiter unterscheidet sich nur unwesentlich. Die erste SQL-Abfrage dient nun nicht mehr zur &Uuml;berpr&uuml;fung, ob 
Mitarbeiter vorhanden sind, sondern der Ermittlung des letzten Eintrages und der anschlie&szlig;enden Ausgabe der 
Mitarbeiter. Die Abfrage aus dem Verwaltungsteil, die auf "<i>bNoEntries = True</i>" pr&uuml;fte wird hier ersetzt durch 
"<i>IntLetzter = rs("id")</i>", da hier - wie soeben erw&auml;hnt - nicht mehr &uuml;berpr&uuml;ft wird, ob keine Datens&auml;tze vorhanden 
sind, sondern welcher der letzte Datensatz ist. Die Generierung der eindeutig numerierten Grafiken und Tabellen ist 
identisch. Wichtig zu erw&auml;hnen ist allerdings, da&szlig; der Z&auml;hler "IntCountTopNodes" nicht mehr mit "0" initialisiert 
werden darf, sondern bei dem Wert weiterz&auml;hlt, den er zuletzt f&uuml;r den Bereich "Verwaltung" hatte. W&uuml;rde er neu 
initialisiert werden, w&auml;re die Eindeutigkeit der Tabellen und Grafiken nicht mehr gew&auml;hrleistet und unsere 
JavaScript-Funktion w&uuml;rde mit Fehlermeldungen den Dienst verweigern.
</p>

<p>
Der n&auml;chste Unterschied zwischen den beiden Teilen des Treeviews liegt in der SQL-Abfrage f&uuml;r die Optionen. 
Logischerweise m&uuml;ssen nun die auf einen bestimmten Mitarbeiter bezogenen Optionen gelesen werden, der 
Options-Typ ist also "1":
</p>

<pre style="background='silver';">
rs1.Open "SELECT * FROM mitarbeiter_optionen WHERE OptionTyp = 1 ORDER BY Option", Conn
</pre>

<p>
Der letzte Unterschied liegt in der Generierung des Links zur Anwendung. Die auf einen bestimmten 
Mitarbeiter bezogenen Anwendungen ben&ouml;tigen beim Aufruf dessen ID, damit dieser aus der Datenbank 
gelesen werden kann. Au&szlig;erdem &uuml;bergeben wir den vollst&auml;ndigen Namen des Mitarbeiters (nehmen Sie dies im 
Moment als gegeben hin - weshalb das so ist, sehen Sie sp&auml;ter):
</p>

<pre style="background='silver';">
Response.Write "&lt;a href=""" &amp; rs1("url") &amp; "?id=" &amp; rs("id") &amp; "&amp;name=" &amp; 
    Server.UrlEncode(rs("nachname") &amp; "&amp;nbsp;" &amp; rs("vorname")) &amp; """ 
    target=""mitarbeitercontent"" onFocus=blur()&gt;" &amp; rs1("option") &amp; "&lt;/a&gt;"
</pre>

<p>
Somit ist die Treeview voll einsetzbar und wir k&ouml;nnen uns der ersten im Screenshot der Treeview dargestellten 
Anwendung zuwenden: dem Bearbeiten von Mitarbeitern, im weiteren Verlauf "Mitarbeiterassitent" genannt.
</p>

<h2>Mitarbeiterassistent</h2>

<p>
Der Mitarbeiterassistent ist Ihnen in seinen Grundz&uuml;gen bereits im zweiten Teil unserer Artikelserie 
begegnet - in Form des "Setupassistenten". Wir werden diesen nun so modifizieren, da&szlig; wir in der Lage sind, 
Mitarbeiter hinzuzuf&uuml;gen, deren Daten zu bearbeiten oder sie zu l&ouml;schen.
</p>

<p>
Der erste und einfachste, weil eigentlich schon komplett vorhandene, Teil ist das Anlegen neuer Mitarbeiter. Der 
Aufruf des Mitarbeiterassistenten erfolgt durch die Funktion "doModalMA()" in der Datei <b>tree.asp</b>, welche wir 
soeben besprochen hatten. Der Aufbau der Funktion "doModalMA()" ist nahezu identisch mit der Funktion "doModalSetup()" 
aus dem zweiten Kurs-Teil. Die Erkl&auml;rungen finden Sie also dort.
</p>

<p>
Das gleiche gilt auch f&uuml;r die Erl&auml;uterungen zum Anlegen eines neuen Mitarbeiters. Die Funktionen bzw. Seiten zum 
Anlegen der Betriebsdaten wurden komplett entfernt.
</p>

<p>
Die erste echte Neuerung offenbart sich gleich beim Start des Mitarbeiterassistenten. Dort wurde eine Auswahl f&uuml;r 
das Anlegen, &Auml;ndern und L&ouml;schen von Mitarbeitern eingebaut:
</p>

<IMG SRC="/artikel/Bilder/200109/20010920_4.png" width="504" height="387" alt="" border="0">

<p>
Der hierf&uuml;r notwendige Code befindet sich in der Datei <b>step0.asp</b> und besteht aus HTML-Radio-Feldern . Eine 
weitere, auf den ersten Blick nicht sichtbare Erweiterung ist, da&szlig; alle im Mitarbeiterassistenten 
vorkommenden Sessionvariablen gel&ouml;scht werden. Dies ist notwendig, um zu vermeiden, da&szlig; z.B. Daten, die 
w&auml;hrend des Bearbeitens eines Mitarbeiters eingegeben wurden, sp&auml;ter bei der Neuanlage eines Mitarbeiters bereits 
in den entsprechenden Feldern stehen. Das L&ouml;schen der Sessionvariablen geschieht, indem man Ihnen den Wert 
"Null" zuweist.
</p>

<p>
Die mittels der Radiofelder getroffene Auswahl wird in der Datei "step05.asp" ("05" steht hierbei f&uuml;r einen 
Zwischenschritt zwischen Schritt "0" und Schritt "1". Genauer w&auml;re "0,5", was jedoch im Filesystem nicht 
unbedingt g&uuml;nstig ist)ausgewertet:
</p>

<pre style="background='silver';">
If Request.Form("action") = "anlegen" Then Response.Redirect("step1.asp")
If Request.Form("action") = "bearbeiten" Then Response.Redirect("stepchange0.asp")
If Request.Form("action") = "loeschen" Then Response.Redirect("stepdel1.asp")
</pre>

<p>
Dort findet dann entsprechend der Auswahl eine Weiterleitung zu den jeweiligen Eingangsseiten der Auswahl statt. 
</p>

<p>
Um Ihnen an dieser Stelle einen &Uuml;berblick &uuml;ber den Aufbau des gesamten Assistenten zu geben, hier ein Flowchart:
</p>

<IMG SRC="/artikel/Bilder/200109/20010920_5.png" width="513" height="541" alt="" border="0">

<p>
Um zu vermeiden, da&szlig; Mitarbeiter, die keine Berechtigung besitzen, den Assistenten bzw. die Mitarbeiterverwaltung 
aufzurufen, dies &uuml;ber den direkten Aufruf der Seiten im Browser tun, wurde eine &Uuml;berpr&uuml;fung der Rechte in 
alle Seiten des Assistenten implementiert. Diese befindet sich als Funktion "Check_Appl_Right" in der bekannten 
Datei <b>functions.asp</b>:
</p>

<pre style="background='silver';">
Function Check_Appl_Right(ApplID, UserID)
Dim StrSQL
Dim rs
    If (ApplID &lt;&gt; "") AND (IsNumeric(ApplID) = True) AND 
        (UserID &lt;&gt; "") AND (IsNumeric(UserID) = True) Then
        StrSQL = "SELECT COUNT(*) FROM OLMenueRechte WHERE (IDMenuepunkt = " &amp; ApplID &amp; ") 
            AND (IDBenutzer = " &amp; UserID &amp; ")"
        Set rs = Conn.Execute(StrSQL)
        If rs(0) &gt; 0 Then
            Check_Appl_Right = True
        Else
            Check_Appl_Right = False
        End If
    Else
    Response.Write "Keine Parameter &uuml;bergeben"
    End If
End Function
</pre>

<p>
An diese Funktion werden die IDs der zu pr&uuml;fenden Anwendung und Benutzers &uuml;bergeben. Die SQL-Anweisung pr&uuml;ft, ob 
in der Tabelle "OLMenueRechte" Eintr&auml;ge vorhanden sind, bei denen beide IDs vorhanden, also ob der Benutzer 
Rechte f&uuml;r diese Anwendung besitzt. Ist dies der Fall, liefert die Funktion "True" zur&uuml;ck. Andernfalls 
wird "False" zur&uuml;ckgegeben.
</p>

<p>
Der Aufruf des Sicherheitschecks in den Seiten des Mitarbeiterassistenten sieht dann wie folgt aus:
</p>

<pre style="background='silver';">
If Check_User = False Then
    Response.Redirect("/~include/error.asp?Error=5")
    Response.End
Else
    If (Check_Appl_Right(2,Session("Logged_In_User_Id")) = False) Then
        Response.Redirect("/~include/error.asp?Error=5")
        Response.End
    End If
End If
</pre>

<p>
Zun&auml;chst wird &uuml;berpr&uuml;ft, ob ein Mitarbeiter am Intranet angemeldet ist. Ist dies der Fall, wird die &Uuml;berpr&uuml;fung 
der Berechtigung durchgef&uuml;hrt.
</p>

<p>
Die ID der Anwendung "Mitarbeiter" ist "2". Die ID des Benutzers ist in diesem Fall die ID des 
eingeloggten Benutzers. Es k&ouml;nnten aber auch andere ID-Werte &uuml;bergeben werden, was die Funktion "Check_Appl_Right" 
flexibel einsetzbar macht.
</p>

<p>
Sollte kein Benutzer angemeldet sein oder "Check_Appl_Right" "False" zur&uuml;ckliefern, wird der "Eindringling" auf seine 
fehlende Berechtigung hingewiesen. Lieferten hingegeben beide Abfrage "True" wird der Aufbau der Seite fortgesetzt.
Diese Pr&uuml;fung findet sich auch in anderen Anwendungen der Mitarbeiterverwaltung wieder.
</p>

<p>
Da das Anlegen neuer Mitarbeiter bereits im <a href="../artikel/20010918.htm">zweiten Teil</a> der Artikelserie 
("Setupassistent") erkl&auml;rt wurde, wenden wir uns dem Bearbeiten von bestehenden Mitarbeitern zu. Wie aus dem 
vorangegangenen Code-Snippet ersichtlich ist, startet das &Auml;ndern von Mitarbeiterdaten in der Datei <b>stepchange0.asp</b>.
</p>

<p>
Diese besteht im wesentlichen aus einer Selectbox, in welcher alle Mitarbeiter aufgelistet werden, deren Daten zur 
Bearbeitung freigegeben sind. Nicht angezeigt werden sollen Benutzer, denen ein nicht l&ouml;schbarer NetzwerkUser zugewiesen 
wurde, wie z.B. der beim Setup angelegte Benutzer mit den Rechten, Mitarbeiter zu verwalten. Die hierzu notwendige 
SQL-Abfrage sieht wie folgt aus:
</p>

<pre style="background='silver';">
StrSQL = "SELECT Mitarbeiter.Vorname, Mitarbeiter.Nachname, Mitarbeiter.ID FROM Mitarbeiter INNER JOIN 
    NetzwerkUser ON  Mitarbeiter.NetzwerkUser = NetzwerkUser.ID 
   WHERE NetzwerkUser.IstLoeschbar = True ORDER BY 
    Mitarbeiter.Nachname, Mitarbeiter.Vorname"
</pre>

<p>
Nachdem die Daten in die Selectbox eingetragen wurden, werden diese nach einem Klick auf den "Weiter"-Button mit 
der bereits bekannten JavaScrip-Routine &uuml;berpr&uuml;ft. Wurde ein Mitarbeiter zum Bearbeiten ausgew&auml;hlt, gelangen wir 
auf die Seite <b>stepchange05.asp</b>. Dort werden alle Daten, die zum ausgew&auml;hlten Mitarbeiter geh&ouml;ren aus den Tabellen 
"Mitarbeiter" und "Mitarbeiter_Arbeitszeiten" ausgelesen und in die bekannten Session-Variablen gespeichert. 
Ebenso wird die ID des Mitarbeiters in der Sessionvariable "MAID" gespeichert. Danach erfolgt eine Weiterleitung 
auf die Seite <b>stepchange1.asp</b>. Diese und alle weiteren Dateien bis "stepchange6.asp" sind absolut identisch mit 
den Dateien <b>step1.asp</b> bis <b>step6.asp</b> zum Anlegen neuer Mitarbeiter. 
</p>

<p>
Der letzte Schritt innerhalb des Assitenten, die Datei <b>stepchange7.asp</b>, welche f&uuml;r die Speicherung der ge&auml;nderten 
Mitarbeiterdaten zust&auml;ndig ist, erfuhr einige &Auml;nderungen im Vergleich zu <b>step7.asp</b>. So wird zun&auml;chst die 
Sessionvariable "MAID" in eine lokale Variable gespeichert. Diese ID ist notwendig, um nur die Datens&auml;tze des 
bearbeiteten Mitarbeiters in den Tabellen "Mitarbeiter" und "Mitarbeiter_Arbeitszeiten" upzudaten. Die SQL-Anweisungen 
wurden so modifiziert, da&szlig; anstelle der Neuanlage eines Datensatzes (rs.AddNew mit anschlie&szlig;endem rs.Update) ein 
bestehender Datensatz upgedatet wird (nur rs.Update). Wie Sie sehen, war also auch dieser Vorgang kein Hexenwerk und wir 
k&ouml;nnen uns der letzten Option in <b>step0.asp</b> zuwenden: dem L&ouml;schen eines Mitarbeiters, was in der Datei <b>stepdel1.asp</b>
seinen Anfang nimmt.
</p>

<p>
Auch hier gelten f&uuml;r die Auswahl der Mitarbeiterdaten aus der Datenbank in die Selectbox die gleichen
Bedingungen, wie f&uuml;r das Bearbeiten der Mitarbeiter. Nach der Auswahl eines solchen und dem Klicken auf den 
"Weiter"-Button" wird die JavaScript-Funktion "delete_submit()" ausgef&uuml;hrt:
</p>

<pre style="background='silver';">
&lt;script language="JavaScript"&gt;
&lt;!--
function delete_submit() 
    {
if(document.madel.mitarbeiter.selectedIndex==-1)
    {
    alert("Sie haben keinen Mitarbeiter ausgew&auml;hlt!");
    }
else
    {  
    Check = confirm("Soll der Mitarbeiter wirklich unwiderruflich gel&ouml;scht werden?");
if (Check == false)
    {
    }
else
    document.madel.submit();
    }
}// end function delete_submit
//--&gt;
&lt;/script&gt;
</pre>

<p>
Auch hier findet zun&auml;chst die Pr&uuml;fung statt, ob ein Mitarbeiter gew&auml;hlt wurde. Ist dies der Fall, wird mittels der 
JavaScript-Funktion <a href="http://www.teamone.de/selfhtml/tecb.htm#a25" target="_blank">confirm()</a> abgefragt, ob der Mitarbeiter 
wirklich gel&ouml;scht werden soll. Entsprechend der Eingabe des Benutzers wird entweder die Seite <b>stepdel2.asp</b> 
aufgerufen oder der L&ouml;schvorgang abgebrochen. Da unser Ziel das L&ouml;schen eines Mitarbeiters war, gelangen wir auf die 
besagte Seite <b>stepdel2.asp</b>, deren Kernst&uuml;ck die SQL-Anweisung zum L&ouml;schen des ausgew&auml;hlten Mitarbeiters ist:
</p>

<pre style="background='silver';">
ID = Request.Form("mitarbeiter")
StrSQL = "DELETE * FROM mitarbeiter WHERE ID = " &amp; ID &amp; ""
Set rs = Conn.Execute(strSQL)
Set rs = Nothing
Conn.Close
</pre>

<p>
Nat&uuml;rlich wurde auch hier die &uuml;bergebene ID auf Manipulation gepr&uuml;ft:
</p>

<pre style="background='silver';">
If (ID &lt;&gt; "") AND (IsNumeric(ID) = True) Then
</pre>

<p>
und im Fehlerfall entsprechend reagiert:
</p>

<pre style="background='silver';">
Else
    Response.Write "&lt;table&gt;" &amp; VbCrLf
    Response.Write "&lt;tr&gt;" &amp; VbCrLf
    Response.Write "    &lt;td class=""assistentheadline""&gt;Fehler&lt;/td&gt;" &amp; VbCrLf
    Response.Write "&lt;/tr&gt;" &amp; VbCrLf
    Response.Write "&lt;tr&gt;" &amp; VbCrLf
    Response.Write "    &lt;td class=""assistent""&gt;&lt;br&gt;Es ist ein schwerwiegender Fehler 
        aufgetreten.&lt;br&gt;&lt;br&gt;Starten Sie das Intranet neu."
    Response.Write "&lt;/td&gt;" &amp; VbCrLf
    Response.Write "&lt;/tr&gt;" &amp; VbCrLf
    Response.Write "&lt;/table&gt;" &amp; VbCrLf
End If
</pre>

<p>
Zun&auml;chst wird die &uuml;ber das Formular &uuml;bergebene ID des ausgew&auml;hlten Mitarbeiters in die lokale Variable 
"ID" gespeichert, welche dann als Kriterium f&uuml;r die WHERE-Klausel der darauffolgenden SQL-DELETE-Anweisung 
eingesetzt wird. Nach dem Schlie&szlig;en der Datenbank-Verbindung bleibt dem Benutzer der Klick auf den 
"Beenden"-Button, welcher den Mitarbeiterassistenten und unsere Erkl&auml;rungen zu selbigem beenden.
</p>

<h3>Mitarbeiter&uuml;bersicht</h3>

<p>
Nat&uuml;rlich wollen wir die Daten unserer Mitarbeiter, die wir angelegt haben nicht nur bearbeiten oder l&ouml;schen, 
sondern irgendwann auch zu Informationszwecken einsehen k&ouml;nnen und evtl. auch ausdrucken. Wir ben&ouml;tigen also eine 
Seite, die uns die Informationen zum jeweiligen Mitarbeiter auflistet.
</p>

<p>
Diesen Anforderungen tr&auml;gt die Datei <b>maoverview.asp</b> im Verzeichnis "mitarbeiter" Rechnung. Das Ergebnis 
soll wie folgt aussehen:
</p>

<IMG SRC="/artikel/Bilder/200109/20010920_6.png" width="585" height="582" alt="" border="0">

<p>
Wie Sie vielleicht v&ouml;llig zu Recht vermuten, h&auml;lt sich der Aufwand f&uuml;r die eigentliche Anzeige der 
Daten in Grenzen. Es handelt sich hierbei um eine SQL-Abfrage, die wie folgt aussieht:
</p>

<pre style="background='silver';">
If (ID &lt;&gt; "") AND (IsNumeric(ID) = True) Then
    StrSQL = "SELECT * FROM Mitarbeiter WHERE mitarbeiter.id = " &amp; ID &amp; " order by mitarbeiter.nachname"
    Set rs = Conn.Execute(strSQL)
</pre>

<p>
Inzwischen selbstverst&auml;ndlich ist auch die &Uuml;berpr&uuml;fung, ob die Eingabe manipuliert wurde.
</p>

<p>
Im Screenshot ist zu sehen, da&szlig; wir Informationen aus mehreren Datenbanktabellen darstellen, so zum Beispiel die 
Telefonnummer des Mitarbeiters. Diese befindet sich nicht in der Tabelle "Mitarbeiter", sondern in der Tabelle 
"Telefonnummern". &Auml;hnlich ist es bei den Feldern "Anrede", "Briefanrede", "Telefax", "Mobil", "E-Mail", "Netzwerkuser"
sowie den Arbeitszeiten und Pausen. Da die Abfrage hierf&uuml;r bis auf die Namen der Datenbanktabellen identisch sind, 
erkl&auml;re ich den Vorgang exemplarisch anhand der "Anrede":
</p>

<pre style="background='silver';">
StrSQL1 = "SELECT * FROM Anreden WHERE ID = " &amp; rs("Anrede") &amp; ""
Set rs1 = Conn.Execute(StrSQL1)
If Not rs1.Eof Then	Response.Write rs1("Anrede")
rs1.Close
Set rs1 = Nothing
</pre>

<p>
Zun&auml;chst lassen wir den Datensatz auslesen, dessen ID identisch ist mit der ID des gew&auml;hlten Mitarbeiters. Um 
Fehlermeldungen &uuml;ber nicht gefundene Eintr&auml;ge zu vermeiden, pr&uuml;fen wir vor der Ausgabe ob Datens&auml;tze vorhanden sind.
</p>

<p>
Damit m&ouml;chte ich die Erkl&auml;rungen zur Ausgabe der Mitarbeiter-Informationen abschlie&szlig;en, nicht jedoch zu der Datei 
<b>maoverview.asp</b>. Diese beinhaltet am Seitenende einen folgenschweren Funktionsaufruf:
</p>

<pre style="background='silver';">
DoNav("Mitarbeiterauskunft: " &amp; Request.Querystring("name"))
</pre>

<p>
Wenn Sie vermuten, da&szlig; dies mit der im Screenshot zu den Mitarbeiterinformationen oben zu sehenden 
Navigationsleite zusammenh&auml;ngt, liegen Sie richtig.
</p>

<h3>Navigationsleiste</h3>

<p>
Im ersten Teil unserer Artikelserie hatten wir definiert, da&szlig; wir unabh&auml;ngig von den M&ouml;glichkeiten des Browsers 
innerhalb des Intranets navigieren wollen und Informationen der Anwendungen ohne Browser-Informationen im 
Ausdruck ausdrucken m&ouml;chten. 
</p>

<p>
Die komplette Funktionialit&auml;t dieser Navigationsleiste befindet sich in der Funktion "DoNav()" in der Datei 
<b>functions.asp</b>, welche sich in unserem "~include"-Verzeichnis befindet.
</p>

<p>
Das Grundger&uuml;st der Navigationsleiste besteht im wesentlichen aus einer HTML-Tabelle, welche den Titel 
der Seite (der via Querystring &uuml;bergeben wird) und drei Grafiken enth&auml;lt, die die Icons f&uuml;r den Aufruf der 
folgenden Funktionen darstellen (von links nach rechts in der Navigationsleiste):
</p>

<ul>
<li>Home = zur Startseite</li>
<li>Drucken = Ausdruck der aktuellen Seite ohne Navigationsleiste und Browserinformationen</li>
<li>Aktualisieren: Reload der aktuellen Seite</li>
</ul>

<p>
Entsprechend der Aufz&auml;hlung werde ich Ihnen nun die einzelnen Funktionen erl&auml;utern, beginnend mit dem Titel 
der Seite. Dieser wird beim Funktionsaufruf, wie in der Datei <b>maoverview.asp</b> zu sehen, &uuml;bergeben und in der 
HTML-Tabelle an der hierf&uuml;r vorgesehenen Position angezeigt.
</p>

<p>
Das war nicht schwer. Noch einfacher gestaltet sich die Anzeige des "Home"-Icons - hier wird lediglich das 
Frameset ver&auml;ndert, wie wir es bereits im dritten Teil des Kurses des &ouml;fteren verwendet hatten:
</p>

<pre style="background='silver';">
Onclick="top.inhalt.frameinhalt.cols='100%'"
</pre>

<p>
Damit wird erreicht, da&szlig; der erste Frame (<b>welcome.asp</b>), in dem die Anwendungen dargestellt werden, in seiner 
vollen Gr&ouml;&szlig;e angezeigt wird.
</p>

<p>
Wesentlich aufwendiger ist die Generierung des "Druck"-Icons. Hierzu zun&auml;chst etwas Theorie. Die Druckansicht soll 
aus der jeweils ge&ouml;ffneten Anwendungsseite generiert werden. Hierzu ist es also notwendig, da&szlig; die Daten in der 
Druckansicht zur Verf&uuml;gung stehen. Der einfachste Weg ist also, die Seite einfach "as is" darzustellen und nur die 
Navigationselemente auszublenden. Hieraus ergibt sich die Anforderung f&uuml;r eine Variable, die der Seite mitteilt, ob 
sie normal, also mit Navigationselementen oder in der Druckansicht dargestellt werden soll. Weiterhin ben&ouml;tigen wir 
eine ActiveX Control, welche es erm&ouml;glicht, die Browserinformationen, welche standardm&auml;&szlig;ig in Ausdrucken erscheinen, 
zu unterdr&uuml;cken, ohne da&szlig; man diese bei jedem Ausdruck h&auml;ndisch deaktivieren m&uuml;&szlig;te. Hierbei handelt es sich um 
"<a href="http://www.meadroid.com/scriptx/index.htm" target="_blank">MeadCo's ScriptX</a>". Soviel zur Theorie - schreiten wir zur Tat.
</p>

<p>
Laut Theorie ben&ouml;tigen wir eine Variable, die uns angibt, welche Darstellung verwendet werden soll. Hierbei 
handelt es sich um die Variable "Do_Print". Diese wird beim Klick auf das "Drucken"-Icon via Querystring an 
die Seite, die gedruckt werden soll, &uuml;bergeben:
</p>

<pre style="background='silver';">
Response.Write "&lt;a href=""javascript:PrintWindow('"
Response.Write Request.ServerVariables("path_info")
Response.Write "?do_print=1&amp;"
</pre>

<p>
Wie Sie sehen, wird zum Aufruf der Druckansicht die JavaScript-Funktion "PrintWindow" aufgerufen, welche nichts anderes 
macht, als die Seite in der Druckansicht in einem neuen Fenster zu &ouml;ffnen. Der &uuml;bergebene Dateiname wird aus der 
Servervariable "Path_Info" gelesen. Somit ist gew&auml;hrleistet, da&szlig; die aktuell ge&ouml;ffnete Seite in der Druckansicht 
angezeigt und gedruckt wird.Eine weitere Notwendigkeit ist, da&szlig; alle Variablen, die via Querystring an die Seite 
&uuml;bergeben wurden (z.B. ID's), nochmals &uuml;bergeben werden, damit die Funktionalit&auml;t der Seite auch in der Druckansicht 
gew&auml;hrleistet ist. Folgender Code erledigt diese Aufgabe:
</p>

<pre style="background='silver';">
For Each Element In Request.Querystring
    Response.Write Element
    Response.Write "="
    Response.Write Server.URLEncode(Request.QueryString(Element))
    Response.Write "&amp;"
Next
</pre>

<p>
Die "For Each"-Schleife liest alle Eintr&auml;ge, die in der Request.Querystring-Collection gespeichert sind, aus und 
h&auml;ngt diese mit ihren jeweiligen Werten an den String an.
</p>

<p>
Die Variable "Do_Print" steht somit zur Auswertung durch die Funktion "DoNav()" zur Verf&uuml;gung, welche wie folgt aussieht:
</p>

<pre style="background='silver';">
If Do_Print &lt;&gt; 1 Then 
</pre>

<p>
Ist "Do_Print" tats&auml;chlich nicht "1", so soll die Seite normal dargestellt werden, d.h. die Navigationsleiste 
wird generiert und angezeigt.
</p>

<p>
Ist "Do_Print" hingegen "1", so wird die Navigationsleiste nicht dargestellt. Statt dessen wird folgender Code 
abgearbeitet:
</p>

<pre style="background='silver';">
Response.Write "&lt;object id=""factory"" classid=""clsid:1663ed61-23eb-11d2-b92f-008048fdd814"""
Response.Write "  viewastext codebase=""/~include/ScriptX.cab#Version=5,0,5,35""&gt;"
Response.Write "  &lt;/object&gt;" &amp; VbCrLf
Response.Write "&lt;script defer&gt;" &amp; VbCrLf
Response.Write "function window.onload() {" &amp; VbCrLf
Response.Write "  factory.printing.header = "" """ &amp; VbCrLf
Response.Write "  factory.printing.footer = "" """ &amp; VbCrLf
Response.Write "  factory.printing.Print()" &amp; VbCrLf
Response.Write "  window.close()" &amp; VbCrLf
Response.Write "}" &amp; VbCrLf
Response.Write "&lt;/script&gt;" &amp; VbCrLf
</pre>

<p>
Zun&auml;chst wird das ActiveX-Control "ScriptX" eingebunden. Sollte es noch nicht installiert sein (was der Normalzustand 
sein d&uuml;rfte), erhalten Sie eine Abfrage, ob das Control in Ihrem Browser installiert werden soll. Diese beantworten Sie 
bitte mit "Ja".
</p>

<p>
Das darauf folgende Skript &uuml;bergibt dann notwendige Parameter an "ScriptX", welche daf&uuml;r sorgen, da&szlig; das Skript nach 
dem Laden der Seite ausgef&uuml;hrt wird. Au&szlig;erdem werden die Kopf- und Fu&szlig;zeilen f&uuml;r den Ausdruck gel&ouml;scht. Im 
Anschlu&szlig; daran wird die Druckfunktion des Browsers aufgerufen.
</p>

<p>
Nach dem Schlie&szlig;en des Drucken-Dialogs (unabh&auml;ngig davon, ob die Seite gedruckt wurde) wird die Druckansicht schlie&szlig;lich 
automatisch geschlossen.
</p>

<p>
Das Schl&uuml;sselwort "<a href="http://www.teamone.deselfhtml/tclb.htm#a3" target="_blank">defer</a>" im "script"-Tag unterbindet 
Ausgaben durch das Skript. Dies ist gem&auml;&szlig; der Dokumentation von "ScriptX" notwendig.
</p>

<p>
Kommen wir nun zum letzten Icon in der Navigationsleiste - dem Reload. Dieser besteht, wie auch die 
"Home"-Funktion nur aus einer JavaScript-Anweisung:
</p>

<pre style="background='silver';">
javascript:location.reload()
</pre>

<p>
Am Ende der Definition der Navigationsleiste befindet sich der Aufruf der JavaScript-Funktion "UpdateIt()". 
Diese sieht wie folgt aus:
</p>

<pre style="background='silver';">
&lt;script language="JavaScript"&gt;
function UpdateIt()
{
document.all["menu"].style.top = document.body.scrollTop;
setTimeout("UpdateIt()", 0);
}
&lt;/script&gt;
</pre>

<p>
Sinn und Zweck dieser Funktion ist, da&szlig; die Navigationsleiste immer am oberen Rand der Seite bleibt. 
Dies wird dadurch erreicht, da&szlig; der Layer "menu" st&auml;ndig (durch den 
<a href="http://www.teamone.de/selfhtml/tecb.htm#a45" target="_blank">SetTimeout-Befehl</a> mittels body.
<a href="http://msdn.microsoft.com/library../default.htm?url=/workshop/author/dhtml/reference/properties/scrolltop.asp" target="_blank">scrollTop</a> 
an den oberen Rand verschoben wird, auch wenn der Inhalt der Seite nach unten gescrollt wird.
</p>

<p>
Wichtig in diesem Zusammenhang ist auch, da&szlig; der eigentliche Inhalt der Seite in einem Layer dargestellt werden mu&szlig;, 
damit die Funktion "UpdateIt()" korrekt arbeitet. Die Definition des Layers ist in der Seite <b>maoverview.asp</b>
zu sehen.
</p>

<p>
Hiermit haben wir unsere erste einfache Intranet-Anwendung erstellt, die uns basierend auf der Arbeit aus den 
bisherigen Artikeln eine &Uuml;bersicht &uuml;ber die Daten zu unseren Mitarbeitern liefert, welche wir auch ausdrucken k&ouml;nnen.
</p>

<h3>Administration der Mitarbeiter-Optionen</h3>

<p>
Zum Abschlu&szlig; des heutigen Artikels m&ouml;chte ich Ihnen noch eine Administrationsseite f&uuml;r die eingangs des Artikels 
besprochenen Mitarbeiter-Optionen erl&auml;utern.  Diese ist sehr stark an die Administrationsseite f&uuml;r die 
Outlook-Men&uuml;leiste angelehnt. Deshalb m&ouml;chte ich auch nur grob auf die wesentlichen &Auml;nderungen eingehen.
</p>

<p>
Das Grundger&uuml;st der Seite ist gleich geblieben. Die Administrationsseite f&uuml;r die Mitarbeiter-Optionen befindet sich 
im Verzeichnis  <i>/~admin/ma_opt</i>.
</p>

<p>
Im linken IFrame wurde die Datei <b>welcome.asp</b> den neuen Funktionen angepasst. Der rechte Iframe tr&auml;gt nun den 
Namen "TREE" anstelle von "OLMENU". Wie in der vorangegangenen Administrationsseite basieren auch hier die Seiten 
im rechten Frameset auf den Dateien, welche im Intranet verwendet werden. In der Datei <b>tree.asp</b>, welche nun im 
rechten IFrame angezeigt wird, wurde ein neuer Men&uuml;punkt eingef&uuml;hrt, der es erm&ouml;glicht, neue Mitarbeiter-Optionen 
anzulegen. Da diese Funktion bis auf die Feld- bzw. Datenbanktabellennamen identisch ist mit den Funktionen der 
Administration aus dem <a href="../artikel/20010919.htm">dritten Teil</a>, gehe ich hier nicht n&auml;her darauf ein.
</p>

<p>
Eine weitere Erweiterung der Datei <b>tree.asp</b> liegt darin, da&szlig; zu Beginn der Seite gepr&uuml;ft wird, ob Optionen 
f&uuml;r den Punkt "Verwaltung" bzw. mitarbeiterbezogene Optionen vorhanden sind:
</p>

<pre style="background='silver';">
StrSQL = "SELECT Count(*) FROM Mitarbeiter_Optionen WHERE OptionTyp = 1"
Set rs = Conn.Execute(StrSQL)
If rs(0) = 0 Then bNoOptions1 = True
StrSQL = "SELECT Count(*) FROM Mitarbeiter_Optionen WHERE OptionTyp = 2"
Set rs = Conn.Execute(StrSQL)
If rs(0) = 0 Then bNoOptions2 = True
</pre>

<p>
Die SQL-Abfragen pr&uuml;fen die Tabelle "Mitarbeiter_Optionen" mittels einer COUNT-Abfrage mit dem Kriterium des jeweiligen 
Optionstyps auf das Vorhandensein von Mitarbeiteroptionen. Ist dies der Fall, so werden die Variablen "bNoOptions1" bzw. 
"bNoOptions" auf "True" gesetzt. Wir verwenden hier eine COUNT-Abfrage, da diese immer nur einen Datensatz liefert 
(n&auml;mlich die Anzahl). Eine normale SELECT-Abfrage w&uuml;rde hier mit steigender Anzahl von Optionen immer mehr Datens&auml;tze 
liefern, was die Abfrage langsamer macht als n&ouml;tig w&auml;re.
</p>

<p>
Die hieraus logischerweise resultierende &Auml;nderung in dieser Datei ist, da&szlig; diese Variablen zu einem sp&auml;teren 
Zeitpunkt gepr&uuml;ft werden.
</p>

<p>
Dies ist immer dann der Fall, wenn ein Grafiksymbol oder Text ausgegeben werden soll, welcher im Onclick-Event die 
JavaScript-Funktion "toggle()" aufruft. Der &Uuml;bersicht halber wurde die Onclick-Anweisung in einen String verlagert, der 
bei jeder Z&auml;hlererh&ouml;hung von IntCountTopNodes neu erzeugt wird. Da wir jedoch zwei Aufrufe f&uuml;r die Funktion "toggle()" 
haben, ben&ouml;tigen wir zwei Strings, n&auml;mlich "StrToggle" und "StrToggleLast", entsprechend, ob der Funktion das Suffix "_last"
&uuml;bergeben werden soll oder nicht:
</p>

<pre style="background='silver';">
StrToggleLast=" onclick=""toggle(Tabelle" &amp; IntCountTopNodes &amp; ",node" &amp; IntCountTopNodes 
    &amp; ",treenode" &amp; IntCountTopNodes &amp; ",'_last')"""
StrToggle=" onclick=""toggle(Tabelle" &amp; IntCountTopNodes &amp; ",node" &amp; IntCountTopNodes &amp; ",
    treenode" &amp; IntCountTopNodes &amp; ",'')"""
</pre>

<p>
Examplarisch f&uuml;r alle auftretenden Pr&uuml;fungen von "bNoOptions(1 oder 2)" hier ein Beispiel:
</p>

<pre style="background='silver';">
If bNoEntries = True Then
    Response.Write "&lt;img id=""node" &amp; IntCountTopNodes &amp; """ SRC=""/mitarbeiter/images/tree_plus_last.gif"" 
        WIDTH=20 HEIGHT=24 BORDER=0"
If bNoOptions2 &lt;&gt; True Then Response.Write StrToggleLast
Response.Write " class=""TreeImgLink""&gt;"
Else
    Response.Write "&lt;img id=""node" &amp; IntCountTopNodes &amp; """ SRC=""/mitarbeiter/images/tree_plus.gif"" 
        WIDTH=20 HEIGHT=24 BORDER=0"
If bNoOptions2 &lt;&gt; True Then Response.Write StrToggle
Response.Write " class=""TreeImgLink""&gt;"
End If
</pre>

<p>
Zun&auml;chst findet die &Uuml;berpr&uuml;fung von "bNoEntries" statt, welche festlegt, ob "toggle()" mit oder ohne Suffix 
aufgerufen wird. Danach folgt die Pr&uuml;fung von "bNoOptions2" auf "True" und dem Ergebnis entsprechend wird 
entweder "StrToggleLast" bzw. "StrToggle" oder kein String ausgegeben. Wird kein String ausgegeben, so existiert 
in dem betroffenen HTML-Element (hier das Pluszeichen-Icon) kein Onclick-Event, d.h. der Men&uuml;punkt "Verwaltung" 
(in diesem Fall) l&auml;sst sich nicht mehr ausklappen. Das war auch unser Ziel, denn wenn keine Optionen f&uuml;r diesen 
Men&uuml;punkt existieren, darf dieser nicht ausklappbar sein.
</p>

<p>
Mit dieser Einschr&auml;nkung geht auch einher, da&szlig; die Abfrage und Ausgabe der Optionen nicht aufgerufen werden darf. 
Entsprechend wird vor Ausgabe der HTML-Tabelle, welche die Optionen beinhaltet eine entsprechende Abfrage gestartet:
</p>

<pre style="background='silver';">
If bNoOptions2 &lt;&gt; True Then
</pre>

<p>
Ist "bNoOptions2" nicht <i>True</i> wird die Tabelle generiert, sonst nicht.
</p>

<p>
Die soeben beschriebenen &Auml;nderungen wurden auch auf die mitarbeiterbezogenen Optionen angewendet oder 
besser auf den Code, der diese erzeugt.
</p>

<p>
Die letzte Erweiterung ist die, da&szlig; rechts von den Optionen zwei Icons f&uuml;r das L&ouml;schen und &Auml;ndern von Optionen 
eingef&uuml;gt wurden. Auch diese sind Ihnen bereits aus dem dritten Artikel bekannt, ebenso wie die Funktionen, die 
dahinter stehen.
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
Hiermit sind wir am Ende des vierten Teils unserer Artikelserie angelangt. Mit den heutigen Neuerungen haben wir die 
Grundlagen geschaffen, um weitere Intranet-Anwendungen leicht in das Grundger&uuml;st integrieren zu k&ouml;nnen und einheitliche 
Funktionen f&uuml;r alle Anwendungen des Intranets bereitzustellen. Darauf aufbauend werden wir morgen, im letzten Teil des 
aktuellen Kurses, weitere Anwendungen f&uuml;r unser Intranet erarbeiten.
</p>

<h4>Redaktioneller Hinweis</h4>
<p>
Aufgrund des Umfanges des Intranets - und der damit m&ouml;glichen Fehlerquellen bei der Umsetzung auf den unterschiedlichen
Serverkonfigurationen der Leser - bittet der Autor, die Anfragen &uuml;ber &ouml;ffentliche Foren
(so zum Beispiel <a href="http://www.aspgerman.com/aspgerman/listen/anmelden/aspGerman.asp" target="_blank">aspGerman</a>)
oder die <a href="http://www.aspintranet.de/aspintranet/mailingliste../default.htm?a=106" target="_blank">ASPIntranet Mailingliste</a>
abzuwickeln. Fehler in ASPIntranet können Sie auf der 
<a href="http://www.aspintranet.de/aspintranet/reportabug../default.htm?a=109" target="_blank">Bugreport-Seite</a> 
von ASPIntranet melden.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p>
<h2>Download des Codes</h2>
<p><a href="../Code/20010920.zip">Klicken Sie hier</a>, um den Download zu starten.<br><SPAN class="content">http://www.aspheute.com/code/20010920.zip</span></p>
<h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20010917.htm">Erstellung eines Intranets in ASP - Grundlagen</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010917.htm</span><br>
<a href="../artikel/20010918.htm">Erstellung eines Intranets in ASP (Teil 2) - Setup</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010918.htm</span><br>
<a href="../artikel/20010919.htm">Erstellung eines Intranets in ASP (Teil 3) - Navigation</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010919.htm</span><br>
<a href="../artikel/20010921.htm">Erstellung eines Intranets in ASP (Teil 5) - Application Day</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010921.htm</span><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Emeadroid%2Ecom%2Fscriptx%2Findex%2Ehtm">MeadCo's ScriptX</a><br>
<SPAN class="content">http://www.meadroid.com/scriptx/index.htm</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2Fdefault%2Easp%3Furl%3D%2Fworkshop%2Fauthor%2Fdhtml%2Freference%2Fproperties%2Fscrolltop%2Easp">MSDN: scrollTop</a><br>
<SPAN class="content">http://msdn.microsoft.com/library../default.htm?url=/workshop/author/dhtml/reference/properties/scrolltop.asp</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eteamone%2Ede%2Fselfhtml%2Ftecb%2Ehtm%23a25">selfhtml: confirm</a><br>
<SPAN class="content">http://www.teamone.de/selfhtml/tecb.htm#a25</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eteamone%2Edeselfhtml%2Ftclb%2Ehtm%23a3">selfhtml: defer</a><br>
<SPAN class="content">http://www.teamone.deselfhtml/tclb.htm#a3</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eteamone%2Ede%2Fselfhtml%2Ftecb%2Ehtm%23a45">selfhtml: SetTimeout</a><br>
<SPAN class="content">http://www.teamone.de/selfhtml/tecb.htm#a45</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
