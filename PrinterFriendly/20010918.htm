<HTML>
<HEAD>
<TITLE>Erstellung eines Intranets in ASP (Teil 2) - Setup</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Herzlich willkommen zum zweiten Teil der Artikelserie zur Erstellung eines Intranets in ASP. Nachdem wir uns gestern im ersten Teil die Grundlagen und erste Code-Snippets erarbeitet haben, wollen wir heute das Setup via ASP in Angriff nehmen.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Intranet,Setup,ASPIntranet,ASPIntranet.de,Installation,Applikation,Grundlagen,Modal Dialog,IE,Snippets">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Erstellung eines Intranets in ASP (Teil 2) - Setup</H1>
<p>
Geschrieben von: <a href="../autoren/alexanderzeitler.htm">Alexander Zeitler</a><br>
Kategorie: <a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20010918"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Herzlich willkommen zum zweiten Teil der Artikelserie zur Erstellung eines Intranets in ASP. Nachdem wir uns gestern im 
<a href="../artikel/20010917.htm">ersten Teil</a> die Grundlagen und erste Code-Snippets erarbeitet haben, wollen 
wir heute das Setup via ASP in Angriff nehmen. Selbst wenn Sie nicht das gesamte Intranet einsetzen, denke ich, da&szlig;
der erste Screenshot Ihr Interesse an dieser Setupapplikation wecken wird!
</p>

<h2>Das "Setup"</h2>
<p>
Der Grund f&uuml;r ein Setup f&uuml;r das Intranet ist schnell erkl&auml;rt: Nach dem Kopieren der Dateien und der Datenbank f&uuml;r das 
Intranet sind weder Betriebsdaten noch ein Benutzer mit der Berechtigung, neue Benutzer und Mitarbeiter anzulegen in der 
Datenbank gespeichert. Um diese Daten nicht h&auml;ndisch in die Datenbank eintragen zu m&uuml;ssen, erstellen wir uns nun eine 
kleine Setup-Routine.
</p>

<p>
Zun&auml;chst ein Screenshot des fertigen Setups:
</p>

<IMG SRC="/artikel/Bilder/200109/20010918_1.png" width="504" height="387" alt="" border="0">

<p>
Wie in dem Screenshot zu sehen ist, halten wir uns auch hier an das Look'n'Feel der Microsoft-Welt: wir erstellen uns 
einen Assistenten f&uuml;r das Setup.
</p>

<p>
Doch bevor wir uns dem eigentlichen Setup-Assistenten widmen k&ouml;nnen, m&uuml;ssen wir ein neues Verzeichnis erstellen. Dieses 
hat den Namen <i>~setup</i> und befindet sich im Verzeichnis <i>myaspintranet</i>.
</p>

<p>
Weiterhin m&uuml;ssen wir zun&auml;chst sicherstellen, da&szlig; gem&auml;&szlig; unserer Vorgabe auch tats&auml;chlich ein Administrator am Intranet 
(bzw. am Rechner) angemeldet ist.
</p>

<p>
Zu diesem Zweck ver&auml;ndern wir unsere bereits im ersten Teil des Kurses erstellte Funktion "Check_User" und geben ihr 
den Namen "Check_Admin". Auch sie befindet sich in der Datei <b>functions.asp</b>.
</p>

<p>
Au&szlig;er dem Namen der Funktion hat sich nur der SQL-String ge&auml;ndert:
</p>

<pre style="background='silver';">
StrSQL = "SELECT * FROM Administratoren INNER JOIN NetzwerkUser ON
(Administratoren.NetzwerkUserID = NetzwerkUser.ID) 
WHERE NetzwerkUser.NetzwerkUser = '" &amp; StrLogged_In_User &amp; "'"
</pre>

<p>
Es handelt sich hierbei um eine <a href="../artikel/20001023.htm">JOIN</a>-Abfrage, die pr&uuml;ft, ob in der 
Tabelle "NetzwerkUser" ein User vorhanden ist, der mit dem eingeloggten User identisch ist und gleichzeitig in der 
Tabelle "Administratoren" als Administrator definiert ist.
</p>

<p>
Ist dies der Fall, liefert die Funktion <i>True</i> zur&uuml;ck, andernfalls <i>False</i>.
</p>

<p>
Der Aufruf der Funktion geschieht in der Seite <b>default.asp</b> im neu hinzugekommenen Unterverzeichnis 
<i>~setup</i>. Dieser folgt nach der bereits obligatorischen "Option Explicit"-Anweisung (ich erw&auml;hne dies hier 
bewu&szlig;t noch einmal, um Ihnen die Verwendung dieser Anweisung "ans Herz zu legen") und dem INCLUDE-Befehl f&uuml;r die Datei 
<b>functions.asp</b>:
</p>

<pre style="background='silver';">
Dim Conn
MakeDBConn
If Check_Admin = False Then 
    Response.Redirect("/~include/error.asp?Error=3") ' keine Rechte f&uuml;r den User vorhanden
    Response.End
End If
</pre>

<p>
Zun&auml;chst deklarieren wir wieder unsere Conn-Variable und stellen die Verbindung zur Datenbank her. Direkt im Anschlu&szlig; 
daran pr&uuml;fen wir, wie bereits im ersten Teil, ob die Funktion (jetzt "Check_Admin") <i>True</i> oder <i>False</i> zur&uuml;ckliefert.
Liefert sie <i>True</i>, wird der HTML-/JavaScript-Code der Seite ausgef&uuml;hrt. Liefert sie <i>False</i>, verzweigen wir wie 
bereits zweimal gesehen auf die Fehlerseite, die uns diese Fehlermeldung aus der Datenbank generiert:
</p>

<IMG SRC="/artikel/Bilder/200109/20010918_2.png" width="572" height="231" alt="" border="0">

<p>
Gehen wir nun davon aus, da&szlig; wir als Administrator angemeldet sind und betrachten den folgenden JavaScript-Code:
</p>

<pre style="background='silver';">
&lt;script language="JavaScript"&gt;
&lt;!--
function doZoom() 
{
if (top.location.href != self.location.href)
    {
    top.location.href = self.location.href
    }
}
</pre>

<p>
Wir &uuml;berpr&uuml;fen, ob sich die aktuelle Seite innerhalb eines Framesets befindet (d.h. self.location.href &lt;&gt; top.location.href) 
- ist dies der Fall, so "zoomen" wir die Seite in das Hauptfenster, soda&szlig; die Fehlermeldung als alleinige Seite im Browser 
dargestellt wird.
</p>

<p>
Im n&auml;chsten Code-Abschnitt rufen wir den Setup-Assistenten auf. Hierf&uuml;r verwenden wir eine Besonderheit des 
Internet Explorers, sogenannte 
<a href="http://msdn.microsoft.com/library/?url=/workshop/author/om/windows_frames_dialogs.asp?frame=true#sec_dialogs" target="_blank">Modal Dialogs</a>.
</p>

<pre style="background='silver';">
function doModalSetup()
{
var myReturnValue=showModalDialog("/~setup/setup.asp",0,"dialogHeight: 387px; dialogWidth: 
    504px; dialogTop: ; dialogLeft: px; center: Yes; help: No; 
    resizable: No; scroll: No; status: No;");
	
if (myReturnValue != 1)
    {
    document.write("Das Setup wurde abgebrochen");
    }
else
    {
    document.write("Das Setup wurde erfolgreich durchgef&uuml;hrt");
    }
}
</pre>

<p>
Der Aufruf des Fensters geschieht mit dem Schl&uuml;sselwort "<i>showModalDialog</i>". Durch den Aufruf mittels 
"<i>var myReturnValue=showModalDialog(.....);</i>" haben wir die M&ouml;glichkeit, R&uuml;ckmeldungen vom aufgerufenen Modal-Dialog 
zu erhalten. Diese nutzen wir auch sofort aus, indem wir mit der IF-Abfrage pr&uuml;fen, ob der R&uuml;ckgabewert "1" ist. 
Ist dies der Fall, ist alles ok, das Setup wurde erfolgreich ausgef&uuml;hrt. Alles andere bedeutet, da&szlig; das Setup 
fehlgeschlagen ist oder einfach vom Administrator abgebrochen wurde. Wie der R&uuml;ckgabewert "1" wird erfahren Sie zu 
einem sp&auml;teren Zeitpunkt.
</p>

<p>
Sicher sind Ihnen die vielen Parameter aufgefallen, die beim Aufruf des Modal-Dialogs &uuml;bergeben werden. Diese werde ich 
Ihnen nun n&auml;her erl&auml;utern:
</p>

<ul>
<li>Die URL ("/~setup/setup.asp") gibt an, welche Seite ge&ouml;ffnet werden soll</li>
<li>"0", hier k&ouml;nnten optionale Parameter stehen, z.B. Werte die in der ge&ouml;ffneten Seite zur 
Verf&uuml;gung stehen sollen</li>
<li>dialogHeight: die H&ouml;he des zu &ouml;ffnenden Dialogfensters</li>
<li>dialogWidth: die Breite des zu &ouml;ffnenden Dialogfensters</li>
<li>dialogTop: Abstand des zu &ouml;ffnenden Dialogfensters vom oberen Bildrand</li>
<li>dialogLeft: Abstand des zu &ouml;ffnenden Dialogfensters vom linken Bildrand</li>
<li>center: gibt an, ob das zu &ouml;ffnende Dialogfenster am Bildschirm zentriert dargestellt werden soll</li>
<li>help: gibt an, ob das zu &ouml;ffnende Dialogfenster ein Icon f&uuml;r die Aktivierung der kontextsensitiven 
Hilfe beinhalten soll</li>
<li>resizable: gibt an, ob die Gr&ouml;&szlig;e des zu &ouml;ffnenden Dialogfensters ver&auml;nderbar sein soll</li>
<li>scroll: gibt an, ob in dem zu &ouml;ffnenden Dialogfenster Scrollbalken angezeigt werden sollen</li>
<li>status: gibt an, ob in dem zu &ouml;ffnenden Dialogfenster eine Statuszeile angezeigt werden soll</li>
</ul>

<p>
Somit ergibt sich, da&szlig; unser Setupassistent mit einer Gr&ouml;&szlig;e von 504 x 387 Pixeln zentriert, ohne Hilfeicon, Scrollbalken 
und ohne Statuszeile angezeigt wird. Auch die Gr&ouml;&szlig;e ist nicht &auml;nderbar.
</p>

<p>
Die letzte JavaScript-Funktion der Datei "default.asp" ist die Funktion "init", welche die ersten beiden Funktionen 
aufruft:
</p>

<pre style="background='silver';">
function init()
{
doZoom();
doModalSetup()
}
//--&gt;
&lt;/script&gt;
</pre>

<p>
Der Aufruf von "<i>init</i>" erfolgt im Body-Tag der Seite durch den Event-Handler 
<a href="http://www.teamone.de/selfhtml/tebj.htm#a12" target="_blank">onLoad</a>:
</p>

<pre style="background='silver';">
&lt;body onload="init()"&gt;
</pre>

<p>
Somit haben wir diesen Teil des Setups abgeschlossen und springen direkt in den soeben ge&ouml;ffneten Assistenten.
</p>

<p>
Hierbei handelt es sich zun&auml;chst um die Datei <b>setup.asp</b>, welche au&szlig;er einer FrameSet-Definition keine 
weiteren Befehle enth&auml;lt. Einzige Besonderheit: der erste Frame des Sets hat eine H&ouml;he von 0 Pixeln. Der Grund 
hierf&uuml;r liegt darin, da&szlig; trotz intensiver Tests immer wieder Probleme mit Formularen auftraten, wenn man ohne 
FrameSets in Modal-Dialogs arbeitete. Der untere Frame beinhaltet die Datei <b>step0.asp</b>, welcher wir uns nun 
zuwenden werden.
</p>

<p>
Diese wirkt auf den ersten Blick harmlos, jedoch verbergen sich die eigentlichen Anweisungen nur in den Includes. 
Doch der Reihe nach. In der Datei <b>default.asp</b> inkludieren wir zun&auml;chst die Datei <b>callfunctions.asp</b>, welche 
sich im Verzeichnis "<i>~include</i>" befindet:
</p>

<pre style="background='silver';">
&lt;!--#include virtual="/~include/ callfunctions.asp"--&gt;
</pre>

<p>
Der Zweck dieser Datei ist der Aufruf h&auml;ufig ben&ouml;tigter Funktionen, welche sich bekannterma&szlig;en in der Datei <b>functions.asp</b>
befinden, weshalb wir diese auch innerhalb der Datei <b>callfunctions.asp</b> inkludieren. Doch welche Funktionen werden 
in (fast) jeder Datei des Intranets ben&ouml;tigt? Sie k&ouml;nnen es sich bestimmt denken:
</p>

<ul>
<li>Option Explicit</li>
<li>Deaktivierung des Cachings</li>
<li>Verbindung zur Datenbank</li>
</ul>

<p>
Au&szlig;erdem  aktivieren wir die <a href="http://www.aspgerman.com/iishelp/iis/htm/asp/intr1fsi.htm" target="_blank">Bufferung der Seiten</a>,
bis alle Scripts innerhalb der Seiten ausgef&uuml;hrt sind. Weiterhin erh&ouml;hen wir den Wert des 
<a href="http://www.aspgerman.com/iishelp/iis/htm/asp/intr04vo.htm" target="_blank">Session-TimeOuts</a> auf 60, was einer Zeitdauer 
von einer Stunde entspricht. Somit ergibt sich folgender Code:
</p>

<pre style="background='silver';">
&lt;%
Option Explicit
Response.Buffer=true
%&gt;

&lt;!--#include virtual="/~include/functions.asp"--&gt;

&lt;%
'Beginn Caching abschalten
DisableCaching
'Ende Caching abschalten

'Beginn Datenbankverbindung herstellen
DIM Conn
MakeDBConn
'Ende Datenbankverbindung herstellen

'Session-Timeout auf 1 Stunde erh&ouml;hen
Session.TimeOut = 60
%&gt;
</pre>

<p>
Nachdem wir nun diese Grundlagen bereitgestellt haben, springen wir wieder eine Ebene h&ouml;her, d.h. wir betrachten nun 
wieder die Datei <b>step0.asp</b>, von der wir eigentlich ausgingen.
</p>

<p>
Nach dem Include-Befehl verkn&uuml;pfen wir die <a href="http://www.teamone.de/selfhtml/td.htm" target="_blank">CSS</a> -Datei 
"<b>aspintranet.css</b>", welche 
sich ebenfalls im Include-Verzeichnis befindet, mit unserer ASP-Datei (<a href="../artikel/step0asp.htm" target="_blank">Zeile 5</a>). 
Im darauf folgenden Body-Tag verwenden wir eine weitere Internet-Explorer spezifische Funktion: 
<a href="http://msdn.microsoft.com/library../default.htm?url=/workshop/author/dhtml/reference/colors/colors.asp" target="_blank">SystemColors</a>,
d.h. der Internet Explorer kann auf die Farben des Systems zugreifen. Dies erm&ouml;glicht uns, f&uuml;r unser Intranet die 
gleichen Farben zu verwenden, wie jede andere Windows-Anwendung auch.
</p>

<p>
Um zu vermeiden, da&szlig; das Setup mehr als einmal ausgef&uuml;hrt wird, rufen wir in Zeile 16 unserer 
<a href="../artikel/step0asp.htm" target="_blank">step0.asp</a> nochmals die Funktion "Check_Setup" auf, um zu &uuml;berpr&uuml;fen, ob das Setup 
bereits ausgef&uuml;hrt wurde. Entsprechend gestaltet sich dann die Ausgabe der Startseite des Assistenten und der 
Navigationselemente.
</p>

<p>
Der Rest der Seite ist einfacher HTML- bzw. JavaScript-Code, den wir hier nicht n&auml;her erl&auml;utern m&uuml;ssen. Einzig in 
den Zeilen <a href="../artikel/step0asp.htm" target="_blank">Zeile 48</a>, 82 und 88 befindet sich ein Befehl, der evtl. nicht ganz logisch 
erscheint:
</p>

<pre style="background='silver';">
onClick="top.close()"
</pre>

<p>
Normalerweise w&uuml;rde man hier wohl window.close() erwarten. Dies ist auch korrekt, allerdings ist dies eine Eigenheit des 
Internet Explorers in der Version 5.0x, die wir ber&uuml;cksichtigen m&uuml;ssen, da sich das Fenster sonst bei dieser Version bei 
einem Klick auf den "Abbrechen"-Button nicht schlie&szlig;en w&uuml;rde.
</p>

<p>
Nachdem wir aber das Setup zum ersten Mal ausf&uuml;hren, gelangen wir auf die n&auml;chste Seite des Assistenten: <b>step1.asp</b>.
</p>

<p>
Wie im ersten Teil bereits erw&auml;hnt, verwenden wir zum Speichern der Betriebsdaten die Tabelle "Betriebsdaten". Was wir 
also tun m&uuml;ssen, ist die Werte f&uuml;r alle Tabellenfelder von "Betriebsdaten" vom Administrator abzufragen.
</p>

<p>
Wie Sie vielleicht inzwischen festgestellt haben, erlauben Modaldialoge weder eine Navigation mit den bekannten 
Tastenkombinationen, noch ist es m&ouml;glich ein Kontextmen&uuml; aufzurufen. Das hat zur Folge, da&szlig; unsere Fehlerbehandlung 
w&auml;hrend der Eingaben im Assitenten sehr pr&auml;zise arbeiten mu&szlig;, da der Benutzer sp&auml;ter keine M&ouml;glichkeit hat auf die von 
ihm vermutete fehlerhafte Eingabe zur&uuml;ckzugelangen, um sie zu korrigieren.
</p>

<p>
Wie in bereits vorangegangenen Artikeln, verwenden wir auch hier eine JavaScript-Pr&uuml;fung der Felder bereits w&auml;hrend der 
Eingabe. Nur wenn die Eingaben auf einer Seite korrekt abgeschlossen sind, gelangt der User auf die n&auml;chste Seite 
des Assistenten.
</p>

<p>
Die eingegebenen Werte werden in Session-Variablen gespeichert und am Ende des Assistenten in der Datenbank gespeichert.
</p>

<p>
Zun&auml;chst m&uuml;ssen wir allerdings die &Uuml;berpr&uuml;fung der Werte realisieren. Um die L&auml;nge der Datenbankfelder 
(bei Textfeldern) nicht zu &uuml;berschreiten, verwenden wir die MaxLength-Option der HTML-Textfelder. Die Pr&uuml;fung, ob 
die notwendigen Daten eingegeben wurden, erledigen wir mit JavaScript-Routinen, ebenso wie die Pr&uuml;fung auf 
korrekte Syntax.
</p>

<p>
In der Datei <b>step1.asp</b> gestaltet sich die &Uuml;berpr&uuml;fung der Eingaben relativ leicht:
</p>

<pre style="background='silver';">
script language="JavaScript"&gt;
function submit_setupadresse()
{  
if (document.setupadresse.Firmenname.value=="")
    { 
    alert("Sie haben keinen Firmennamen eingegeben!");
    } 
else 
    { 
    if(document.setupadresse.Strasse.value=="") 
        { 
        alert("Sie haben keine Stra&szlig;e eingegeben!");
        } 
    else 
        { 
        if ((document.setupadresse.Land.value=="") || 
                (isNaN(Number(document.setupadresse.Land.value)) == false))
            { 
            alert("Sie haben kein korrektes L&auml;nderk&uuml;rzel eingegeben!");
            } 
        else 
            { 
            if ((document.setupadresse.PLZ.value=="") || 
                    (isNaN(Number(document.setupadresse.PLZ.value))))
                { 
                alert("Sie haben keine korrekte Postleitzahl eingegeben!");
                } 
            else 
                { 
                if(document.setupadresse.Ort.value=="") 
                    { 
                    alert("Sie haben keinen Ort eingegeben!");
                    } 
                else 
                    { 
                    document.setupadresse.submit(); 
                    }
                }
            }
        }
    }
}
// end function submit_params
// --&gt;
&lt;/script&gt;
</pre>

<p>
Die Pr&uuml;fung der Felder "Firmenname", "Stra&szlig;e" und "Ort" gestaltet sich relativ einfach. Es wird einfach nur gepr&uuml;ft, 
ob Eingaben vorhanden sind (if (document.setupadresse.Firmenname.value=="")). Das Feld "Zusatz" wird nicht gepr&uuml;ft, da 
dieses optional ist.

<p>
Etwas schwieriger, aber deshalb nicht weniger l&ouml;sbar ist die Pr&uuml;fung der Fehler "Land" und "PLZ". In beiden Feldern mu&szlig; 
eine Pr&uuml;fung auf numerische Werte durchgef&uuml;hrt werden - in gegens&auml;tzlicher Weise. W&auml;hrend im L&auml;nderk&uuml;rzel keine Zahlen 
vorkommen d&uuml;rfen, sind diese in der Postleitzahl zwingend und ausschlie&szlig;lich notwendig. Die L&ouml;sung ist in beiden 
F&auml;llen fast identisch: isNaN - eine JavaScript-Funktion, die JavaScript-Variablen daraufhin pr&uuml;ft, ob deren Inhalt eine 
Zahl ist oder nicht. Au&szlig;erdem werden diese beiden Abfragen jeweils mit der Pr&uuml;fung verkn&uuml;pft, ob in dem jeweiligen Feld 
&uuml;berhaupt eine Eingabe stattfand.
</p>

<p>
Die &Uuml;berpr&uuml;fung auf der Folgeseite <b>step2.asp</b> gestaltet sich noch etwas komplexer. Dies liegt zum einen daran, 
da&szlig; hier anstelle von Textfeldern Selectboxen verwendet werden, zum anderen, da&szlig; hier zwei getrennte Pr&uuml;fungen 
aufgerufen werden m&uuml;ssen. Zur Verdeutlichung ein Screenshot:
</p>

<IMG SRC="/artikel/Bilder/200109/20010918_3.png" width="504" height="387" alt="" border="0">

<p>
Wie zu sehen ist, ist in den Selectboxen die M&ouml;glichkeit vorhanden, direkt im Assistenten neue Telefon- und FAX-Nummern 
sowie Email-Adressen anzulegen, die permanent in der Datenbank gespeichert werden.
</p>

<p>
Doch lassen Sie uns die Datei von oben nach unten abarbeiten. 
</p>

<p>
Nach den Includes und der Dimensionierung der Variablen (bis einschlie&szlig;lich <a href="../artikel/step2asp.htm" target="_blank">Zeile 4</a>),
lesen wir zun&auml;chst die Werte der von der vorhergehenden Seite &uuml;bergebenen Textfelder aus und speichern diese in 
<a href="../artikel/20000505.htm">Sessionvariablen</a> - 
allerdings nur, wenn das jeweilige Feld nicht leer war. Der Hintergrund ist der, da&szlig; man auf die Seite ja 
nicht nur von "vorne", also &uuml;ber die Datei "step1.asp" gelangen kann, sondern sp&auml;ter auch &uuml;ber den 
"Zur&uuml;ck"-Button von der Datei "step3.asp" - in diesem Fall werden keine Formularfelder &uuml;bergeben. Ohne unsere 
If-Abfragen w&uuml;rden bereits existierende Eingaben mit NULL-Werten &uuml;berschrieben werden, d.h. die Sesssionvariablen 
w&auml;ren wieder leer.
</p>

<p>
Die Werte der bereits erw&auml;hnten Selectboxen werden aus den entsprechenden Datenbank-Tabellen generiert:
</p>

<pre style="background='silver';">
Response.Write "    &lt;tr&gt;" &amp; VbCrLf
Response.Write "        &lt;td colspan=2&gt;&lt;select name=""Setup_Telefon"" id=""Setup_Telefon"" 
    class=""assistentformular"" onchange=""Check_Telefon()""&gt;" &amp; VbCrLf
Response.Write "        &lt;option value=""-1""&gt;" &amp; VbCrLf
Response.Write "        &lt;option value=""0""&gt;--- neue Telefon-Nummer anlegen ---&lt;/option&gt;" &amp; VbCrLf
StrSQL = "SELECT * FROM telefonnummern ORDER BY telefonnummer"
Set rs = Conn.Execute(StrSQL)
Do While Not rs.Eof
    Response.Write "&lt;option value="""
    Response.Write rs("id")
    Response.Write """"
    If Int(Session("Setup_Telefon")) = Int(rs("id")) Then
        Response.Write " selected"
    End If
    Response.Write "&gt;"
    Response.Write rs("telefonnummer") &amp; VbCrLf
    rs.MoveNext
Loop
Response.Write "        &lt;/select&gt;" &amp; VbCrLf
Response.Write "            &lt;/td&gt;" &amp; VbCrLf
Response.Write "    &lt;/tr&gt;" &amp; VbCrLf
</pre>

<p>
Nach dem Ausf&uuml;hren der SQL-Anweisung wird ein Option-Tag generiert, welcher sich aus der "Option"-Anweisung, dem 
"value"-Attribut und dem ID-Wert aus der Datenbanktabelle zusammensetzt. Danach wird gepr&uuml;ft, ob die in der 
Sessionvariable gespeicherte ID identisch ist mit der aktuell aus der Datenbank gelesenen ID. Ist dies der Fall, wird 
der Option-Tag um das Schl&uuml;sselwort "selected" erweitert, was dazu f&uuml;hrt, da&szlig; diese Auswahl in der Selectbox als 
ausgew&auml;hlt dargestellt wird. Au&szlig;erdem wird dem Option-Tag noch die Telefonnummer, die in der Datenbank gespeichert ist, 
angeh&auml;ngt.
</p>

<p>
Kommen wir nun zur ersten Eingabepr&uuml;fung "submit_setupdaten", deren Aufruf identisch ist mit dem der Pr&uuml;fung in 
<b>step1.asp</b>. Einzig der Inhalt ist leicht ver&auml;ndert, da - wie bereits erw&auml;hnt - Selectboxen zum Einsatz kommen:
</p>

<pre style="background='silver';">
if (document.setupdaten.Setup_Telefon.selectedIndex==0)
</pre>

<p>
Dies ist die ge&auml;nderte Zeile. <a href="http://www.teamone.de/selfhtml/tecbbdaa.htm#a7" target="_blank">selectedIndex</a> gibt an, 
ob in einer Selectbox ein Eintrag gew&auml;hlt wurde und falls ja, welcher selektiert wurde. Der Wert "0" entspricht dem 
Fall, da&szlig; kein Eintrag gew&auml;hlt wurde - und f&uuml;hrt zu der bereits bekannten Fehlermeldung. Die Pr&uuml;fung der anderen 
Selectboxen gestaltet sich identisch. Die beiden darauffolgenden Textfelder werden nach dem aus <b>step1.asp</b> bekannten 
Verfahren gepr&uuml;ft.
</p>

<p>
Sicher ist Ihnen schon die JavaScript-Funktion "Check_Telefon" (in Zeile 18) aufgefallen, welche &uuml;ber den Event-Handler 
<a href="http://www.teamone.de/selfhtml/tebj.htm#a4" target="_blank">OnChange</a> der Selectbox "Setup_Telefon" (in Zeile 121) 
aufgerufen wird.
</p>

<pre style="background='silver';">
&lt;script language="JavaScript"&gt;
&lt;!--

function Check_Telefon()
{
if (document.setupdaten.Setup_Telefon.value==0)
{
    document.setupdaten.action="optionneu.asp";
    document.setupdaten.option.value="Telefon";
    document.setupdaten.fieldnames.value="Setup_Telefon,Setup_Telefax,Setup_EMail,Setup_WWW,Setup_UstID";
    document.setupdaten.submit();
}
}
//--&gt;
&lt;/script&gt;
</pre>

<p>
Nach der Pr&uuml;fung, ob die Zeile "Neue Telefonnummer anlegen" ausgew&auml;hlt wurde, wird das 
<a href="http://www.teamone.de/selfhtml/tecbbd.htm#a2" target="_blank">"action"-Attribut</a> unseres Formulars so ver&auml;ndert, da&szlig; es 
auf die Datei <b>optionneu.asp</b> zeigt. Da diese Datei universell f&uuml;r mehrere Werte verwendet werden soll, mu&szlig; ihr 
mitgeteilt werden, welcher Wert neu angelegt werden soll. Wir &uuml;bergeben in einem Hidden-Formularfeld mit dem Namen 
"Option" deshalb das Schl&uuml;sselwort "Telefon". Danach &uuml;bergeben wir in einem weiteren Schl&uuml;sselstring namens "Fieldnames"
(ein weiteres Hidden-Feld) die Namen der Formularfelder, die tempor&auml;r in Sessionvariablen gespeichert werden sollen.
Dies ist notwendig, da ja bereits andere Eingaben get&auml;tigt sein k&ouml;nnten, die nicht verloren gehen d&uuml;rfen. Schlie&szlig;lich 
wird mit "<i>document.setupdaten.submit();</i>" die Datei <b>optionneu.asp</b> aufgerufen.
</p>

<p>
Zwei identische Funktionen existieren f&uuml;r FAX-Nummern und Email-Adressen.
</p>

<p>
Sicher erwarten sie bereits die Erkl&auml;rung f&uuml;r die Datei <b>optionneu.asp</b> - hier ist sie. Wir m&ouml;chten mit dieser Datei 
also verschiedene Datenbankeintr&auml;ge universell vornehmen k&ouml;nnen. Hierf&uuml;r haben wir bereits in der vorangegangenen Datei 
den Grundstein gelegt, indem wir die Hidden-Felder "Option" und "Fieldnames" eingef&uuml;hrt haben. Diese lesen wir nun aus:
</p>

<pre style="background='silver';">
StrOption = Request.Form("Option")
StrFieldNames = Request.Form("Fieldnames")
ArrFieldNames = Split(StrFieldNames,",",-1,1)
</pre>

<p>
Sicher fragen Sie sich nun, weshalb f&uuml;r das Feld "Fieldnames" die 
<a href="http://msdn.microsoft.com/scripting/vbscript/doc/vsfctSplit.htm" target="_blank">Split</a>-Funktion 
angewendet wird. Den Grund hatte ich Ihnen bereits genannt: wir ben&ouml;tigen die Feldnamen, um sie 
(oder besser: Ihre Werte) in Sessionvariablen speichern zu k&ouml;nnen. Die Trennung des Strings "Fieldnames" erledigt 
besagter Split-Befehl.
</p>

<p>
Die Speicherung in den Sessionvariablen folgt auf dem Fu&szlig;:
</p>

<pre style="background='silver';">
For IntArrFieldCount = 0 To Ubound(ArrFieldNames)
    Session(ArrFieldNames(IntArrFieldCount)) = Request.Form(ArrFieldNames(IntArrFieldCount))
Next
</pre>

<p>
Auch hier macht eine kurze Erkl&auml;rung Sinn: der Z&auml;hler "IntArrFieldCount" z&auml;hlt von "0" bis zur Anzahl der &uuml;bergebenen 
Feldnamen - diese erhalten wir mit <a href="http://msdn.microsoft.com/scripting/vbscript/doc/vsfctUBound.htm" target="_blank">Ubound</a>
(ArrFieldNames). Die Speicherung in den Sessionvariablen d&uuml;rfte Ihnen inzwischen bekannt vorkommen - nur da&szlig; wir 
in diesem Fall nicht mit den Feldnamen direkt arbeiten, sondern mit Variablen - das Ergebnis ist jedoch identisch.
</p>

<p>
Der n&auml;chste Befehl beinhaltet die Verwendung einer sog. <a href="http://www.aspgerman.com/iishelp/iis/htm/asp/intr5vsj.htm" target="_blank">Servervariable</a>:
"HTTP_REFERER". Diese gibt an, von welcher Seite unsere aktuelle Seite aufgerufen wurde. Weshalb wir diese Information 
ben&ouml;tigen? Nun, wir wollten unser Script universell verwendbar gestalten, weswegen wir auch die "Zur&uuml;ckleitung" zur 
aufrufenden Seite gew&auml;hrleisten m&uuml;ssen - der HTTP_REFERER ist der Schl&uuml;ssel zu unserer L&ouml;sung.
</p>

<p>
Dieser liefert den Namen der Datei, die die aktuelle Seite aufgerufen hat. Somit k&ouml;nnen wir diesen String ohne weitere 
Bearbeitung verwenden.
</p>

<p>
Danach folgen bereits bekannte HTML-Formularfelder mit entsprechender &Uuml;berpr&uuml;fung der Eingabe und dem Hidden-Feld f&uuml;r die 
Information, welche Daten in der Datenbank gespeichert werden sollen. Au&szlig;erdem &uuml;bergeben wir in einem Hidden-Feld den 
aktuell ermittelten HTTP_REFERER, der ja auch in der n&auml;chsten Seite (f&uuml;r die Weiterleitung nach dem Speichervorgang) 
ben&ouml;tigt wird.
</p>

<p>
Der "Zur&uuml;ck"-Button schlie&szlig;lich beinhaltet den Verweis auf "StrReferer", welcher uns erlaubt,  die Eingabemaske f&uuml;r 
das Anlegen von Telefonnummern o.&auml;. ohne Eingabe zu verlassen.
</p>

<p>
Die Funktionen f&uuml;r das Abfragen der Informationen f&uuml;r FAX-Nummern und Emailadressen sind identisch und sollen hier nicht 
n&auml;her erl&auml;utert werden.
</p>

<p>
Gehen wir nun davon aus, da&szlig; wir eine neue Telefonnummer eingegeben haben und diese gespeichert werden soll. Somit 
gelangen wir auf die Seite <b>optionneu_speichern.asp</b>, welche vom Aufbau fast identisch mit <b>optionneu.asp</b> ist.
Nach dem Auslesen der &uuml;bergebenen Informationen werden diese mit der Select-Case-Anweisung ausgewertet und in die 
Datenbank geschrieben:
</p>

<pre style="background='silver';">
Case "Telefon"
    Dim StrRufNummer
    Dim rs
    Dim rs1
    StrRufNummer = Request.Form("Vorwahl") &amp; "-" &amp; Replace(Request.Form("Nummer"),"-","")
    Set rs = Server.CreateObject ("ADODB.Recordset")
        rs.Open "SELECT * FROM TelefonNummern WHERE TelefonNummer = '" &amp; StrRufnummer &amp; "'", Conn
        If rs.Eof Then
            Set rs1 = Server.CreateObject ("ADODB.Recordset")
            rs1.Cursortype = 1 'adOpenKeyset
            rs1.Locktype = 3 'adLockOptimistic
            rs1.Open "SELECT * FROM Telefonnummern", Conn
            rs1.AddNew
                rs1.Fields("Telefonnummer") = StrRufNummer
            rs1.Update
            rs1.Close
            Set rs1 = Nothing
            rs.Close
            Set rs = Nothing
            Conn.Close
        End If
        Response.Redirect(StrReferer)
</pre>

<p>
Vorher wird gepr&uuml;ft, ob die Telefonnummer (oder allgemeiner: das neu anzulegende Element) bereits in der Datenbank 
vorhanden ist - ist dies der Fall, wird die Speicherung &uuml;bergangen und direkt zur Referer-Seite zur&uuml;ckgesprungen. 
Liegt der Datensatz noch nicht vor, wird dieser angelegt und die Routine ohne Umwege verlassen.
</p>

<p>
Wir finden uns nun auf jeden Fall wieder auf der Seite <b>step2.asp</b>, welche wir nach kompletter Eingabe aller Daten 
auch sofort wieder verlassen. Der n&auml;chste Schritt, <b>step3.asp</b> ist codem&auml;&szlig;ig inzwischen ein "alter Hut", weshalb 
wir hierauf nicht n&auml;her eingehen. Selbiges gilt f&uuml;r die Seiten <b>step4.asp</b> sowie <b>step5.asp</b>.
</p>

<p>
Auch "step6.asp" bietet nicht wirklich etwas Neues, einzig sind hier Aufrufe f&uuml;r das Anlegen von Mobilnummern, 
Netzwerkuser und Abteilungen hinzugekommen - was aber analog zu den bereits besprochenen Routinen (Telefon, FAX, Email) 
abl&auml;uft.
</p>

<p>
Bis einschlie&szlig;lich <b>step8.asp</b> sind die Routinen mit bereits Erw&auml;hnten identisch. Interessant f&uuml;r uns ist erst 
wieder die Seite <b>step9.asp</b>. Diese beinhaltet nach dem vollendeten Sammeln aller f&uuml;r uns notwendigen Daten das 
Speichern derselben.
</p>

<p>
Der erste Vorgang ist das Speichern der Betriebsdaten in der daf&uuml;r vorgesehenen Tabelle "Betriebsdaten", gefolgt vom 
Anlegen des neuen Mitarbeiters.
</p>

<p>
Am Ende der Speicherung des Mitarbeiters "merken" wir uns die ID des neu angelegten Mitarbeiters:
</p>

<pre style="background='silver';">
MAID = rs.Fields("ID")
</pre>

<p>
Diese ben&ouml;tigen wir nun, um die benutzerbezogenen Daten wie Arbeitszeiten und Urlaubsanspruch zu speichern.
</p>

<p>
Um zu vermeiden, da&szlig; der Netzwerkbenutzer, der neue Mitarbeiter anlegen darf (wenigstens einer mu&szlig; vorhanden sein), 
sp&auml;ter &uuml;ber die L&ouml;schfunktionen im Intranet gel&ouml;scht wird, mu&szlig; dessen Eintrag in der Tabelle "NetzwerkUser" nun 
entsprechend ge&auml;ndert werden:
</p>

<pre style="background='silver';">
Set rs = Server.CreateObject ("ADODB.Recordset")
rs.Cursortype = 1 'adOpenKeyset
rs.Locktype = 3 'adLockOptimistic
rs.Open "SELECT * FROM NetzwerkUser WHERE ID = " &amp; Session("MA_Netzwerkuser") &amp; "", Conn
rs.Fields("IstLoeschbar") = False
Rs.Update
rs.Close
Set rs = Nothing
</pre>

<p>
Nun m&uuml;ssen wir dem Benutzer noch die Zugriffsrechte auf die Men&uuml;punkte "Verwaltung" und "Mitarbeiter" erteilen. 
Den genauen Hintergrund der Rechteverwaltung erfahren Sie im n&auml;chsten Artikel - nehmen Sie die jetzt folgenden 
Informationen einfach als gegeben hin - der tiefere Sinn wird Ihnen nicht lange verborgen bleiben.
</p>

<p>
Wie wir bereits im ersten Artikel gesehen haben, sind in der Tabelle "OLMenue" die beiden Eintr&auml;ge "Verwaltung" und 
"Mitarbeiter" schon vorhanden. Dies ist notwendig, um zu gew&auml;hrleisten, da&szlig; deren ID's die in der Seite <b>step9.asp</b> 
erwarteten Werte aufweisen.
</p>

<p>
Ebenfalls im ersten Artikel konnten Sie den Zusammenhang zwischen den Tabellen "NetzwerkUser", "OLMenue" und 
"OLMenueRechte" ersehen. Somit m&uuml;ssen wir nun in der Tabelle "OLMenueRechte" zwei Eintr&auml;ge erzeugen, welche unseren 
soeben angelegten User (wichtig: den NetzwerkUser - nicht den Mitarbeiter) mit den beiden Men&uuml;eintr&auml;gen verkn&uuml;pfen. 
Diese Eintr&auml;ge sind sp&auml;ter &uuml;ber die Benutzerfunktionen des Intranets nicht l&ouml;schbar:
</p>

<pre style="background='silver';">
Set rs = Server.CreateObject ("ADODB.Recordset")
        rs.Cursortype = 1 'adOpenKeyset
        rs.Locktype = 3 'adLockOptimistic
        rs.Open "SELECT * FROM OLMenueRechte", Conn
        rs.AddNew
            rs.Fields("IDMenuepunkt") = 1
            rs.Fields("IDBenutzer") =Session("MA_Netzwerkuser")
rs.Fields("IstLoeschbar") = False
        rs.Update
        rs.AddNew
            rs.Fields("IDMenuepunkt") = 2
            rs.Fields("IDBenutzer") = Session("MA_Netzwerkuser")
rs.Fields("IstLoeschbar") = False
        rs.Update
        rs.Close
        Set rs = Nothing
</pre>

<p>
Schlie&szlig;lich setzen wir in der Tabelle "Setup" via Update-Statement den Eintrag des Feldes "SetupIsOK" auf 
<b>True</b> (d.h., das Setup wurde erfolgreich durchgef&uuml;hrt). Zu guter letzt weisen wir dem onClick-Events des 
"Beenden"-Buttons noch die Funktion doOK zu, welche den ReturnValue des Fensters auf "1" setzt. Diesen lesen wir - 
wie zu Beginn des Artikels erw&auml;hnt - auf der Seite <b>default.asp</b> aus und lassen entsprechend der nun 
zur&uuml;ckgelieferten "1" die Meldung ausgeben, da&szlig; das Setup erfolgreich ausgef&uuml;hrt wurde:
</p>

<IMG SRC="/artikel/Bilder/200109/20010918_4.png" width="622" height="221" alt="" border="0">

<h2>Schlu&szlig;bemerkung</h2>

<p>
Nachdem wir nun einen weiteren Teil der Grundlagen f&uuml;r unser Intranet geschaffen haben, beenden wir diesen Artikel 
- nicht jedoch, ohne Ihnen einen Ausblick auf den morgigen Artikel zu geben: wir werden die Outlook-Leiste erstellen 
und uns eine Administration f&uuml;r diese entwickeln.
</p>

<h4>Redaktioneller Hinweis</h4>
<p>
Aufgrund des Umfanges des Intranets - und der damit m&ouml;glichen Fehlerquellen bei der Umsetzung auf den unterschiedlichen
Serverkonfigurationen der Leser - bittet der Autor, die Anfragen &uuml;ber &ouml;ffentliche Foren
(so zum Beispiel <a href="http://www.aspgerman.com/aspgerman/listen/anmelden/aspGerman.asp" target="_blank">aspGerman</a>)
oder die <a href="http://www.aspintranet.de/aspintranet/mailingliste../default.htm?a=106" target="_blank">ASPIntranet Mailingliste</a>
abzuwickeln. Fehler in ASPIntranet können Sie auf der 
<a href="http://www.aspintranet.de/aspintranet/reportabug../default.htm?a=109" target="_blank">Bugreport-Seite</a> 
von ASPIntranet melden.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p>
<h2>Download des Codes</h2>
<p><a href="../Code/20010918.zip">Klicken Sie hier</a>, um den Download zu starten.<br><SPAN class="content">http://www.aspheute.com/code/20010918.zip</span></p>
<h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20001023.htm">Das SQL Join Statement</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20001023.htm</span><br>
<a href="../artikel/20010917.htm">Erstellung eines Intranets in ASP - Grundlagen</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010917.htm</span><br>
<a href="../artikel/20010919.htm">Erstellung eines Intranets in ASP (Teil 3) - Navigation</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010919.htm</span><br>
<a href="../artikel/20010920.htm">Erstellung eines Intranets in ASP (Teil 4) - Mitarbeiter</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010920.htm</span><br>
<a href="../artikel/20010921.htm">Erstellung eines Intranets in ASP (Teil 5) - Application Day</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010921.htm</span><br>
<a href="../artikel/20000505.htm">Session Variablen - Verwendung und Stolpersteine</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000505.htm</span><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2F%3Furl%3D%2Fworkshop%2Fauthor%2Fom%2Fwindows%5Fframes%5Fdialogs%2Easp%3Fframe%3Dtrue%23sec%5Fdialogs">IE Modal Dialogs</a><br>
<SPAN class="content">http://msdn.microsoft.com/library/?url=/workshop/author/om/windows_frames_dialogs.asp?frame=true#sec_dialogs</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eteamone%2Ede%2Fselfhtml%2Ftd%2Ehtm">selfhtml: CSS</a><br>
<SPAN class="content">http://www.teamone.de/selfhtml/td.htm</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eteamone%2Ede%2Fselfhtml%2Ftebj%2Ehtm%23a4">selfhtml: onChange</a><br>
<SPAN class="content">http://www.teamone.de/selfhtml/tebj.htm#a4</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eteamone%2Ede%2Fselfhtml%2Ftebj%2Ehtm%23a12">selfhtml: onLoad</a><br>
<SPAN class="content">http://www.teamone.de/selfhtml/tebj.htm#a12</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eteamone%2Ede%2Fselfhtml%2Ftecbbdaa%2Ehtm%23a7">selfhtml: selectedIndex</a><br>
<SPAN class="content">http://www.teamone.de/selfhtml/tecbbdaa.htm#a7</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
