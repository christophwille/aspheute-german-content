<HTML>
<HEAD>
<TITLE>Bildinformationen selbst ermitteln</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Dieser Artikel beschreibt wie mant mit Hilfe von C# und ASP.NET Bildinformationen von Bildern beliebiger Formate selbst ermittelt.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,ASP.NET,.NET,ImageSize,Bildinformationen,SDK,C#,C Sharp,Csharp,ASPX,GUID">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Bildinformationen selbst ermitteln</H1>
<p>
Geschrieben von: <a href="../autoren/christophwille.htm">Christoph Wille</a><br>
Kategorie: <a href="../kategorien/ASPdotNET.htm">ASP.NET</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20001130"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Ein h&auml;ufiges Problem beim Upload von Bilddateien ist, da&szlig; die Gr&ouml;&szlig;e (Breite, H&ouml;he) nicht
bekannt ist, und man sie selbst ermitteln mu&szlig;. Unter ASP kann man sich mit der Gratiskomponente
ImageSize von ServerObjects behelfen, die allerdings auf wenige (wichtige) Formate beschr&auml;nkt ist.
</p>
<p>
Mit Hilfe des .NET Frameworks hingegen kann man sich selbst eine ImageInfo Komponente programmieren,
ohne da&szlig; dies in groben Aufwand ausartet - man mu&szlig; nur die Bitmap Klasse zu seinem Vorteil verwenden.
Und schon bekommt man Gr&ouml;&szlig;eninformationen zu den wichtigsten Bildformaten!
</p>

<h2>Die ImageInfo Komponente erstellen</h2>
<p>
Ich habe mich entschlossen, die Funktionalit&auml;t der Ermittlung von Bildinformationen in eine eigene
Klasse auszulagern. Diese Klasse hat folgende Methoden und Eigenschaften:
</p>

<ul>
<li><b>void Load(string)</b>: L&auml;dt die angegebene Bilddatei.
<li>[get] <b>int Width</b>: Auslesen der Bildbreite.
<li>[get] <b>int Height</b>: Auslesen der Bildh&ouml;he.
<li>[get] <b>string Format</b>: Auslesen des Bildformats ("JPEG", etc).
</ul>

<p>
Die Eigenschaften sind klarerweise Nur-Lese Eigenschaften, die mit Hilfe von Accessors implementiert
sind. Aus Faulheitsgr&uuml;nden f&auml;ngt die Klasse selbst keine Exceptions ab, diese werden an den 
Aufrufer durchgereicht (Datei nicht existent, kein g&uuml;ltiges Format, ...).
</p>
<p>
Der vollst&auml;ndige Sourcecode sieht wie folgt aus (<b>ImageInfo.cs</b>):
</p>

<pre style="background='silver';">
using System;
using System.Drawing;
using System.Drawing.Imaging;

namespace AspHeute
{
 public class ImageInfo
 {
   Bitmap m_bmpRepresentation;
   
   public void Load(string strImageFile)
   {
    m_bmpRepresentation = new Bitmap(strImageFile, false);
   }

   public int Height
   {
     get { return m_bmpRepresentation.Height; }
   }
   
   public int Width
   {
     get { return m_bmpRepresentation.Height; }
   }  
   
   public string Format
   {
     get 
     {
      ImageFormat bmpFormat = m_bmpRepresentation.RawFormat;
      string strFormat = &quot;unidentified format&quot;;
      
	  if (bmpFormat.Equals(ImageFormat.Bmp)) strFormat = "BMP";
	  else if (bmpFormat.Equals(ImageFormat.Emf)) strFormat = "EMF";
	  else if (bmpFormat.Equals(ImageFormat.Exif)) strFormat = "EXIF";
	  else if (bmpFormat.Equals(ImageFormat.Gif)) strFormat = "GIF";
	  else if (bmpFormat.Equals(ImageFormat.Icon)) strFormat = "Icon";
	  else if (bmpFormat.Equals(ImageFormat.Jpeg)) strFormat = "JPEG";
	  else if (bmpFormat.Equals(ImageFormat.MemoryBmp)) strFormat = "MemoryBMP";
	  else if (bmpFormat.Equals(ImageFormat.Png)) strFormat = "PNG";
	  else if (bmpFormat.Equals(ImageFormat.Tiff)) strFormat = "TIFF";
	  else if (bmpFormat.Equals(ImageFormat.Wmf)) strFormat = "WMF";
      
      return strFormat;
     }
   }
 }
}
</pre>

<p>
Der Gro&szlig;teil des Codes findet sich im Accessor f&uuml;r das Bildformat (<i>Format</i>), da das Bildformat als <i>GUID</i>
definiert ist, und ich somit die Vergleiche mit <i>Equals</i> durchf&uuml;hren mu&szlig;. Allerdings bekommt
der Anwender der Komponente einen einfach weiterzuverwendenden String geliefert, zB f&uuml;r ein <i>Select Case</i>
in VB.NET
</p>
<p>
Das Laden des Bitmaps geschieht mit dem Konstruktor der <i>Bitmap</i> Klasse in der <i>Load</i> Methode. 
Ab diesem Zeitpunkt ist das Bitmap im Speicher, und zwar vollst&auml;ndig. Da Speicher in .NET mit
Hilfe des Garbage Collectors gemanaged wird, sollte man die <i>Bitmap</i> Klasse und das <i>ImageInfo</i> 
Objekt daher nach Verwendung so schnell als m&ouml;glich explizit (=selbst) aus dem Speicher entfernen, und zwar mit Hilfe einer <i>Dispose</i>
Methode, die ich <i>nicht</i> eingebaut habe (Bastel&uuml;bung f&uuml;r den Leser):
</p>

<pre style="background='silver';">
public void Dispose()
{
  m_bmpRepresentation.Dispose();
}
</pre>

<p>
Diese Methode sollte man nach der letzten Verwendung der ImageInfo Klasse aufrufen, was die
Performance der Applikation deutlich hebt. Generell gilt unter .NET, da&szlig; man Resourcen selbst so bald
als m&ouml;glich explizit freigeben soll! Das Warten auf den Garbage Collector kann zur (Performance)Falle werden.
</p>
<p>
Kompiliert wird die Komponente mittels der im Download beigef&uuml;gten Batchdatei <i>compile.bat</i>.
Nach erfolgter Kompilierung mu&szlig; man die Komponente noch in das <i>bin</i> Verzeichnis der Website kopieren,
und schon kann man diese in allen ASP.NET Seiten verwenden.
</p>

<h2>Die Komponente im Einsatz</h2>
<p>
Da die Komponente nicht gerade "viel" an Funktionalit&auml;t bietet, ist die Verwendung denkbar einfach.
Der einzige wichtige Punkt ist die Fehlerbehandlung - da ich in der Komponente auf Exceptionhandling
verzichtet habe, mu&szlig; man dieses in der ASP.NET Datei nachholen (<b>demo.aspx</b>):
</p>

<pre style="background='silver';">
&lt;% @Page Language=&quot;C#&quot; %&gt;
&lt;% @Import Namespace=&quot;AspHeute&quot; %&gt;
&lt;%
string strImageFile = Page.MapPath(&quot;myImage.jpg&quot;);
bool bLoadedOK = true;
ImageInfo imgInfo = new ImageInfo();

try
{
  imgInfo.Load(strImageFile);
}
catch (Exception e)
{
  Response.Write(e.ToString());
  bLoadedOK = false;
}

if (bLoadedOK)
{
  Response.Write(&quot;Breite: &quot; + imgInfo.Width + &quot;&lt;br&gt;&quot;);
  Response.Write(&quot;H&ouml;he: &quot; + imgInfo.Height + &quot;&lt;br&gt;&quot;);
  Response.Write(&quot;Bildformat: &quot; + imgInfo.Format + &quot;&lt;br&gt;&quot;);
}
%&gt;
</pre>

<p>
Bei diesem Sourcecode d&uuml;rfte eigentlich alles klar sein. Es ist jeder herzlich eingeladen,
verschiedene Bilddateien und -formate auszuprobieren!
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
Wieder einmal rettet .NET den Tag dadurch, da&szlig; es enorm viel Funktionalit&auml;t gratis zur Verf&uuml;gung stellt,
und man nur danach suchen mu&szlig;. Und das Beste ist, die heute vorgestellte ImageInfo Komponente ist in
allen .NET Applikationen verwendbar, nicht nur in ASP.NET Seiten.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p>
<h2>Download des Codes</h2>
<p><a href="../Code/20001130.zip">Klicken Sie hier</a>, um den Download zu starten.<br><SPAN class="content">http://www.aspheute.com/code/20001130.zip</span></p>
<h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20020702.htm">.NET Komponenten in COM+ Clients einsetzen</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20020702.htm</span><br>
<a href="../artikel/20020703.htm">Eine kleine Bilddatenbank, Teil 1</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20020703.htm</span><br>
<a href="../artikel/20020225.htm">Thumbnailgenerierung in .NET</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20020225.htm</span><br>
<a href="../artikel/20010212.htm">Thumbnails mit ASP generieren</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010212.htm</span><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eserverobjects%2Ecom%2Fproducts%2Ehtm%23free">ImageSize</a><br>
<SPAN class="content">http://www.serverobjects.com/products.htm#free</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
