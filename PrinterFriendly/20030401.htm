<HTML>
<HEAD>
<TITLE>Hochleistungskompression mit .NET-Bordmitteln</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Das Internet kennt einen 'Heiligen Gral': Bandbreite. Bandbreite ist kostbar,
sie mu&szlig; gespart werden um uns als Betreibern eines Auftrittes m&ouml;glichst wenig Traffic-Kosten zu verursachen...">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Aprilscherz,April Fools Day,Bandbreite,RFC,MD5,Kryptographie">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>Hochleistungskompression mit .NET-Bordmitteln</H1>
<p>
Geschrieben von: <a href="../autoren/bernhardspuida.htm">Bernhard Spuida</a><br>
Kategorie: <a href="../kategorien/Aprilscherz.htm">Aprilscherz</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20030401"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Das Internet kennt einen 'Heiligen Gral': Bandbreite. Bandbreite ist kostbar,
sie mu&szlig; gespart werden um uns als Betreibern eines Auftrittes m&ouml;glichst wenig
Traffic-Kosten zu verursachen und um den Besuchern einen m&ouml;glichst schnellen Zugang
zum gew&uuml;nschten Inhalt zu gew&auml;hren. In diesem Artikel werden wir sehen welche
M&ouml;glichkeiten uns das .NET Framework bietet um m&ouml;glichst hohe Kompression - und
somit m&ouml;glichst effiziente Bandbreitennutzung - zu erreichen.
</p> 
<p>
Die angesehene wissenschaftliche Zeitschrift 'Nature' hat k&uuml;rzlich ein neues
<a href="http://www.nature.com/nsu/030324/030324-7.html" target="_blank">Verfahren zur
Beschleunigung der Daten&uuml;bertragung in Netzwerken</a> vorgestellt. Gewaltig - die
Beschleunigung betr&auml;gt ca. 3500 Prozent gegen&uuml;ber gew&ouml;hnlichem Breitbandinternet!
Der 'Sch&ouml;nheitsfehler' daran ist allerdings, da&szlig; es sich um eine Modifikation an
einem grundlegenden Protokoll handelt, eine derartige &Auml;nderung l&auml;&szlig;t sich nicht
so schnell in die Praxis &uuml;bertragen, schlie&szlig;lich mu&szlig; sie laut dem OSI Modell
<a href="http://www2.rad.com/networks/1994/osi/intro.htm" target="_blank">[1]</a>in die entsprechenden
Protokollstacks <b>aller</b> Betriebssysteme integriert werden. 
</p>
<p>
Wir m&uuml;ssen also auf einer h&ouml;heren Ebene ansetzen, bei den Anwendungen. Da
Microsoft dem .NET Framework eine sehr umfangreiche Auswahl an Klassen mitgegeben hat,
werden wir doch sicherlich etwas finden k&ouml;nnen was unseren W&uuml;nschen entspricht...
</p>

<h2>Grundlegendes zur Datenkompression</h2>
<p>
Bevor wir uns in das .NET Framework st&uuml;rzen, wollen wir uns mit der Funktionsweise
von Kompressionsalgorithmen besch&auml;ftigen, es kann ja nie schaden zu wissen wovon
man spricht.
</p>
<p>
Bei der Auswahl von Algorithmen zur Kompression von Daten sind zwei Dinge wichtig:
</p>
<p>
<b>a)</b> Ist die Abbildung eindeutig? D.h. kann ich sicher sein da&szlig; nicht zwei
verschiedene Dateien identische komprimierte Dateien ergeben?
</p>
<p>
<b>b)</b> Ist die Kompression verlustfrei oder verlustbehaftet? Bei Graphiken (jpg)
und Musik (mp3) st&ouml;ren
kleine Artefakte (z.B. K&auml;stchen an harten &Uuml;berg&auml;ngen in Graphiken) durch Verlust
von Daten nicht unbedingt da die Grundinformation erhalten bleibt, bei Texten hingegen ist
der Verlust von Inhalt gravierend - man stelle sich vor da&szlig; durch Kompression jeder
zehnte Buchstabe in einem Text verloren geht...
</p>
<p>
Fangen wir nun mit dem einfachsten Verfahren an, <b>Run Length Encoding</b> (RLE).
Hier werden einfach Ketten von gleichen Werten durch den Wert und die Anzahl der
Wiederholungen ersetzt: <i>AAAAAAAAAABBBBB</i> wird so zu <i>10A5B</i> - ein ganz
netter Fortschritt, nicht wahr? Diese einfache Codierung wird zum Beispiel in
Fax-&Uuml;bertragungen eingesetzt, die entsprechenden Standards heissen 'CCITT Group 3' bzw.
'CCITT Group 4' <a href="http://docs.sun.com/db/doc/801-6936/6i19eg6kn?a=view" target="_blank">[2]</a>,
je nach dem Grad der Effizienz (Zeilen-orientiert bzw. Zeilen-
und Spalten-orientiert). Die Effizienz betr&auml;gt immerhin 5:1 bzw. 10:1.
</p>
<p>
Aber was ist wenn die Daten schnell wechseln und viele verschiedene Werte
annehmen k&ouml;nnen? Dann w&uuml;rde ein derartiges Verfahren
ja zu einer Aufbl&auml;hung der Datenmenge f&uuml;hren. Die L&ouml;sung hei&szlig;t: Ersetzungstabellen
verwenden! Jedes der 'klassischen' Kompressionsverfahren wie LZW
<a href="http://dogma.net/markn/articles/lzw/lzw.htm" target="_blank">
[3] (Achtung: patentiert!)</a> beruht auf Tabellen die in einer
Datei vorhandene (Bit-)Muster nach H&auml;ufigkeit sortiert mit wesentlich k&uuml;rzeren
Ersatzmustern verkn&uuml;pfen. Dabei sollte nat&uuml;rlich den h&auml;ufigsten und/oder l&auml;ngsten
Mustern das k&uuml;rzestm&ouml;gliche Ersatzmuster zugewiesen werden. Ein wesentliches Problem
besteht in der Gr&ouml;&szlig;e der Tabellen die abh&auml;ngig von der Anzahl der Muster stark
anwachsen k&ouml;nnen. Die Zuweisungsalgorithmen
sind der wesentlichste Unterschied zwischen den verschiedenen 'Zip'-Methoden.
Implementationen der verschiedenen Standard-Algorithmen (zip, gzip, bzip2 und TAR)
finden sich in der <a href="http://www.icsharpcode.net/OpenSource/SharpZipLib/" target="_blank">#ziplib</a>.
Im Download befindet sich &uuml;brigens auch ein sch&ouml;nes Beispiel f&uuml;r die Anwendung von
Kompressionsverfahren im Internet. Derartige Kompressionsverfahren sind inzwischen
sowohl Server- als auch Browser-seitig Standard, Stichwort 'HTTP/compress'. Eine 
weitere wichtige Anforderung an das Kompressionsverfahren ist f&uuml;r derartige
Anwendungen die Geschwindigkeit. Was n&uuml;tzt eine hohe Kompressionsrate wenn Packen
und Entpacken l&auml;nger als die &Uuml;bertragung unkomprimierter Daten brauchen?
</p>

<h2>Auf zu neuen Ufern</h2>
<p>
Aber da mu&szlig; doch noch mehr gehen, diese Standards reichen ja doch schon in
die Urzeit des Internet zur&uuml;ck, wenn nicht sogar noch weiter <a href="http://www.isoc.org/internet/history" target="_blank">[4]</a>.
Einen &Uuml;berblick &uuml;ber die f&uuml;r das Internet verbindlichen Standards und Protokolle findet man in den
sogenannten <i><a href="http://www.rfc-editor.org" target="_blank">Requests For Comment</a></i>
(RFCs). Diese 'Bitten um Stellungnahme' sind verbindliche Normen, egal wie harmlos
sich diese Bezeichnung anh&ouml;rt.
</p>
<p>
Also st&ouml;bern wir mal in dieser Schatzgrube...
</p>
<p>
Da! RFC 1321, aus dem Jahr 1992. Wesentlich j&uuml;nger als die bisher diskutierten
Verfahren. Verfasst vom <a href="http://web.mit.edu" target="_blank">MIT</a>, einer Hochburg der
Computerwissenschaften, und von Ron Rivest, Mitbegr&uuml;nder der renommierten 
Sicherheitsfirma <a href="http://www.rsasecurity.com" target="_blank">RSA</a>. Wenn das nicht f&uuml;r
einen qualitativ hochwertigen Algorithmus b&uuml;rgt. Lesen wir mal, was in der
Einleitung steht - unter anderem:
</p>
<p>
<i>'...where a large file must be compressed in a secure manner...'</i>, also 
'...wenn gro&szlig;e Dateien zuverl&auml;ssig komprimiert werden m&uuml;ssen...'
</p>
<p>und</p>
<p>
<i>'The MD5 algorithm is designed to be quite fast on 32-bit machines. In addition,
the MD5 algorithm does not require any large subsitution tables; the algorithm can
be coded quite compactly.' </i> d.h. 'Der MD5 Algorithmus ist f&uuml;r hohe Geschwindigkeit
auf 32 Bit-Maschinen ausgelegt. Des weiteren ben&ouml;tigt er keine gro&szlig;en Ersetzungstabellen;
der Algorithmus kann recht kompakt implementiert werden'.
</p>
<p>
Perfekt, wenn wir unsere obigen Anforderungen betrachten. Heutige PCs sind 32
Bit-Maschinen, die kompakte Codegr&ouml;&szlig;e verspricht uns problemlose Implementierung
in clientseitigem Code, wir m&uuml;ssen uns also nicht auf die Existenz einer
Implementierung im
Browser verlassen! Und die Tatsache da&szlig; wir auf die l&auml;stigen Ersetzungstabellen
verzichten k&ouml;nnen hei&szlig;t das wir gerade bei Daten mit wenigen Musterwiederholungen
noch gewaltige Kompressionszuw&auml;chse erwarten k&ouml;nnen.
</p>
<p>
Einen Punkt gilt es aber noch zu kl&auml;ren: sind die komprimierten Daten eindeutig,
oder anders gefragt, habe ich Informationsverluste zu erwarten? Rivest schreibt
dazu in RFC 1321 in Anschlu&szlig; an die entsprechende Beweisf&uuml;hrung (die ich hier
auslasse):
</p>
<p>
<i>'It is conjectured that the difficulty of coming up with two messages
having the same message digest is on the order of 2^64 operations, and that the
difficulty of coming up with any message having a given message digest is on the
order of 2^128 operations. The MD5 algorithm has been carefully scrutinized for
weaknesses.'</i> oder auf Deutsch: 'Es wird angenommen da&szlig; die Komplexit&auml;t der
Aufgabe mit zwei Nachrichten mit identischem Nachrichtencode zu finden in der
Gr&ouml;&szlig;enordnung von 2^64 Operationen und die Komplexit&auml;t eine Nachricht mit gegebenem
Nachrichtencode in der Gr&ouml;&szlig;enordnung von 2^128 Operationen angesiedelt ist. Der
MD5-Algorithmus wurde sorgf&auml;ltig auf Schw&auml;chen untersucht.'
</p>
<p>
Besser k&ouml;nnen wir es gar nicht mehr treffen: schneller, kompakter Code, kleine
Zieldateien und keine Informationsverluste! Auf zur Praxis.
<p>

<h2>MD5 in der .NET-Praxis</h2>
<p>
Das .NET Framework stellt uns dankenswerterweise bereits eine vollst&auml;ndige
Implementation von MD5 zur Verf&uuml;gung. Wir finden sie im Namespace 
<i>System.Security.Cryptography.MD5</i>, nicht weiter verwunderlich wenn man bedenkt
da&szlig; Ron Rivest aus der Kryptographie kommt - er ist immerhin das 'R' im RSA-Algorithmus.
Au&szlig;erdem kann Datenkompression in der Kryptographie auch vorteilhaft angewandt
werden, da sie die Entropie der zu verschl&uuml;sselnden Datei anhebt. Nun ein Beispiel in VB.NET:
</p>

<pre style="background='silver';">
Dim data(DATA_SIZE) As Byte

' Dies ist eine Implementation der abstrakten MD5-klasse.
Dim md5 As New MD5CryptoServiceProvider()

Dim result As Byte() = md5.ComputeHash(data)
</pre>

<p>Und nun dasselbe in C#:</p>

<pre style="background='silver';">
byte[] data = new byte[DATA_SIZE];

// Dies ist eine Implementation der abstrakten MD5-klasse.
MD5 md5 = new MD5CryptoServiceProvider();

byte[] result = md5.ComputeHash(data);
</pre>

<p>
Mehr ist in unserem serverseitigem Code nicht n&ouml;tig um mit MD5 Daten zu
komprimieren! Das .NET Framework macht unser Leben deutlich leichter. Was die
clientseitige Funktionalit&auml;t angeht so mu&szlig; dort nat&uuml;rlich die .NET Runtime ebenfalls
vorhanden sein, wenn wir auf der empfangenden Seite auch ein derart leichtes Leben
haben wollen. Sollte dies nicht der Fall sein, so l&auml;&szlig;t sich allerdings ohne weiteres
die ausf&uuml;hrlich dokumentierte Referenzimplementierung von MD5 aus Anhang A der RFC
1321 adaptieren.
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
Faszinierend, was man mit ein wenig Recherche zum Thema Datenkompression erreichen kann. Da die Datenmengen
im Internet immer gr&ouml;&szlig;er werden, mu&szlig; man sich zunehmend Gedanken &uuml;ber die
Optimierung der Daten&uuml;bertragung machen, schlie&szlig;lich zahlt man auch als Content
Provider.
</p>
<p>
Viel Spa&szlig; bei der Suche nach weiteren kreativen M&ouml;glichkeiten der Datenkompression!
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20020401.htm">Debugging in der Tiefe</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20020401.htm</span><br>
<a href="../artikel/20040401.htm">Neues in .NET Codename "Swinomish"</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20040401.htm</span><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Erasip%2Efer%2Ehr%2Fresearch%2Fcompress%2F">Data Compression Reference Center</a><br>
<SPAN class="content">http://www.rasip.fer.hr/research/compress/</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=ftp%3A%2F%2Fftp%2Erfc%2Deditor%2Eorg%2Fin%2Dnotes%2Frfc2549%2Etxt">Eine weitere wichtige RFC</a><br>
<SPAN class="content">ftp://ftp.rfc-editor.org/in-notes/rfc2549.txt</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=ftp%3A%2F%2Fftp%2Erfc%2Deditor%2Eorg%2Fin%2Dnotes%2Frfc1321%2Etxt">RFC 1321</a><br>
<SPAN class="content">ftp://ftp.rfc-editor.org/in-notes/rfc1321.txt</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fscience%2Eslashdot%2Eorg%2Farticle%2Epl%3Fsid%3D03%2F03%2F31%2F1232209%26mode%3Dthread%26tid%3D134%26tid%3D126">Weitere überraschende Anwendungen für Kompression</a><br>
<SPAN class="content">http://science.slashdot.org/article.pl?sid=03/03/31/1232209&mode=thread&tid=134&tid=126</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
