<HTML>
<HEAD>
<TITLE>RemoteScripting - Einf&uuml;hrung, Tips und Tricks</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="21 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Mit der RemoteScripting (RS) - Technologie hat Microsoft dem ASP-Programmierer wieder eine M&ouml;glichkeit an die Hand gegeben, seine Webseiten aus der Sicht des Clients attraktiver zu gestalten.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,RemoteScripting,Remote Scripting,RS,ScriptLibrary,rsproxy,Java,JavaScript,Jscript,VBScript,remote ASP">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<H1>RemoteScripting - Einf&uuml;hrung, Tips und Tricks</H1>
<p>
Geschrieben von: <a href="../autoren/renedrescher-hackel.htm">Rene Drescher-Hackel</a><br>
Kategorie: <a href="../kategorien/ASP%20Tricks.htm">ASP Tricks</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20010606"></SCRIPT>
</p>


<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p><p>
Mit der RemoteScripting (RS) - Technologie hat Microsoft dem ASP-Programmierer wieder eine M&ouml;glichkeit an 
die Hand gegeben, seine Webseiten aus der Sicht des Clients attraktiver zu gestalten. Um durch vom Client 
ausgel&ouml;ste Aktionen auszuwerten, mu&szlig; die entsprechende ASP-Seite nicht neu geladen werden.
</p>

<p>
Sch&ouml;n, dachte ich, als ich das gelesen hatte. Doch war meine erste Freude auf RemoteScripting genauso schnell 
wieder verflogen, als ich dann lesen konnte, da&szlig; doch irgendwie alles auf Jscript/JavaScript aufgesetzt war. 
Ich hatte aber keine Ambitionen meine ganzen ASP-Dateien - die durchweg ja in VBScript erstellt wurden - 
umzuschreiben, um dann letztlich die Vorz&uuml;ge des RS nutzen zu k&ouml;nnen. Also machte ich mich daran, in die 
"Tiefen" des RS abzutauchen, um noch mehr &uuml;ber diese Technologie zu erfahren.
</p>

<p>
Einen guten &Uuml;berblick &uuml;ber die dahinter stehende Technologie gibt der Artikel von 
<a href="../artikel/20010125.htm">Christian Strauch</a>. 
Der heutige Artikel soll einen &Uuml;berblick &uuml;ber die einzelnen Methoden des RemoteScripting geben, und wie diese 
zum Einsatz kommen (k&ouml;nnen). Weiterhin soll dieser Artikel deutlich machen, was bei der ScriptLibrary zu 
beachten ist. Die Beispiele sind dabei bewu&szlig;t kurz gehalten. Sie dienen lediglich dazu zu zeigen, da&szlig; RS 
(RemoteScripting) funktioniert und insbesondere die "Serverfunktionen" korrekt angesprochen und abgearbeitet wurden. 
Des weiteren soll verdeutlicht werden, da&szlig; RS auch funktionieren kann, ohne alle bestehenden ASP-Seiten von 
VBScript nach Jscript/JavaScript zu konvertieren.
</p>

<h2>&Uuml;bersicht der einzelnen RS-Methoden</h2>
<p>
Insgesamt stehen im RS vier Methoden zur Verf&uuml;gung:
</p>

<ul>
<li>RSExecute()</li>
<li>RSGetASPObject()</li>
<li>RSEnableRemoteScripting()</li> und
<li>RSDispatch()</li>
</ul>

<p>
Im nachfolgenden Abschnitt wollen wir uns die Methoden einmal n&auml;her betrachten.
</p>

<h2>1. Die RSExecute - Methode</h2>

<p>
Diese Methode kann man gewisserma&szlig;en als "ausf&uuml;hrendes Bindeglied" verstehen, gleichwohl f&uuml;r die eigentliche Verbindung das &uuml;ber die RSEnableRemoteScripting()-Methode initialisierte Java-Applet in erster Linie "verantwortlich" ist. Anders ausgedr&uuml;ckt sorgt die Methode RSExecute() f&uuml;r die Ausf&uuml;hrung unserer Serverfunktionen, die wir in einer separaten ASP-Seite definiert haben.
</p>

<p>
Die allgemeine Syntax zu dieser Methode lautet:
</p>

<p>
<b>RSExecute(</b><i>url, methode, [parameter 1,...,parameter n][,auswertung][,fehlerauswertung][,context]</i><b>)</b>
</p>

<p>
Die Parameter sind wie folgt zu &uuml;bergeben:
</p>

<p>
<i>url</i> - Hier wird die ASP-Seite angegeben, die die jeweiligen Prozeduren beinhaltet, welche durch den 
Aufruf ausgewertet werden sollen.
</p>

<p>
<i>methode</i> - Bezeichnet die Prozedur innerhalb der in <i>url</i> bezeichneten ASP-Seite, die mit dem RS-Aufruf 
ausgef&uuml;hrt werden soll.
</p>

<p>
<i>parameter 1,...parameter n</i> - Bezeichnen die einzelnen an die <i>methode</i> zu &uuml;bergebenden Parameter, 
wenn diese mit entsprechenden Parametern aufzurufen ist. Die Angabe von Parametern ist daher optional und h&auml;ngt 
im wesentlichen von der definierten Prozedur in unserer ASP-Seite (siehe oben <i>url</i>) ab.
</p>

<p>
<i>auswertung</i> - Bezeichnet die clientseitige (meist JavaScript) Funktion, die das Ergebnis des RS-Aufrufs 
ausgibt.  Die Angabe ist optional und erfolgt, wenn die <i>methode</i> asynchron aufgerufen wird. Wird keine 
Angabe f&uuml;r <i>auswertung</i> gemacht, wird die <i>methode</i> synchron aufgerufen.
</p>

<p>
<i>fehlerauswertung</i> - Bezeichnet ebenfalls einen optionalen Parameter, der in Form einer 
JavaScript-Funktion aufgerufen wird, wenn der Aufruf der <i>methode</i> nicht vollst&auml;ndig war bzw. einen Fehler 
zur&uuml;ckgegeben hat.
</p>

<p>
<i>context</i> - ist ebenfalls ein optional anzugebender Wert. In der Regel wird hier dann die aufgerufene <i>methode</i>
noch einmal benannt.
</p>

<p>
An einem kleinen Beispiel m&ouml;chte ich nun verdeutlichen, wie die Methode RSExecute funktioniert.
</p>

</p>
Hierbei habe ich in der Datei <b>remotecalljs.asp</b> eine Function definiert, die lediglich eine Meldung 
zur&uuml;ckgibt. Auf den genauen Aufbau der <b>remotecalljs.asp</b> will ich weiter unten detaillierter eingehen.
</p>

<pre style="background='silver';">
Public Function VBGetMessage()
    VBGetMessage = "Diese Function wurde Remote aufgerufen."
End Function
</pre>

<p>
Mit der Methode RSExecute wird die oben dargestellte Function in der <b>remotecalljs.asp</b> wie folgt dann 
aufgerufen: F&uuml;r unser Beispiel habe ich dazu die <b>remotecalljs.htm</b> erstellt, in der der folgende 
JavaScript-Block eingef&uuml;gt wird:
</p>

<pre style="background='silver';">
&lt;SCRIPT LANGUAGE=javascript  event=onclick for=button1&gt;
    var url = "remotecalljs.asp";
    var methode = "VBGetMessage";
    var co = RSExecute(url,methode);
    ... 
&lt;/SCRIPT&gt;
</pre>

<p>
Hierbei habe ich auf das <i>onclick</i>-event der Schaltfl&auml;che <i>button1</i> eine JavaScript-Aktion ausf&uuml;hren 
lassen. Der &Uuml;bersicht halber wird dann als erstes der Variablen <i>url</i> der Wert zugewiesen - im vorliegenden 
Beispiel der Name der ASP-Seite, die die aufzurufende Prozedur  enth&auml;lt, also <b>remotecalljs.asp</b>. Dann mu&szlig; 
noch angegeben werden, welche Prozedur aus der <b>remotecalljs.asp</b> aufzurufen ist. Hier ist es die Funktion 
<i>VBGetMessage</i>. In unserem Beispiel wird die <i>VBGetMessage</i> Funktion synchron aufgerufen, soda&szlig; 
die Angabe der oben beschriebenen optionalen Parameter entfallenkann.
</p>

<p>
Den R&uuml;ckgabewert des Aufrufes der RSExecute-Methode weisen wir hier der Variablen <i>co</i> zu, die das 
R&uuml;ckgabewertobjekt (!) speichert. Um letztlich das Ergebnis des Funktionsaufrufes zu erhalten, 
wird von co die Eigenschaft <i>return_value</i> ausgelesen. Ich habe hierzu eine <i>alert()</i>-Anweisung 
gew&auml;hlt, die in diesem Beispiel ausreichen soll, um den R&uuml;ckgabewert sichtbar zu 
machen. Der oben beschriebene JavaScript-Block komplettiert sich dann mit folgendem Eintrag:
</p>

<pre style="background='silver';">
alert(co.return_value);
</pre>

<p>
Nachdem die Schaltfl&auml;che Button angeklickt wurde, erhalten wir dann folgende Meldung angezeigt:
</p>

<IMG SRC="/artikel/Bilder/200106/20010606_1.png" width="377" height="307" alt="" border="0">

<p>
Der eher h&auml;ufiger vorkommende Fall ist jedoch der, da&szlig; durch die remote aufgerufene Prozedur das Ergebnis einer 
Datenbankanfrage zur&uuml;ckgegeben wird. Dann ist es immer interessant, die Ergebnisse der Datenbankabfrage in 
die bisherige HTML-Anzeige unterzubringen.
</p>

<p>
Das folgende Beispiel demonstriert, wie man die Ergebnisse des Aufrufes der RSExecute-Methode an einzelne 
HTML-Elemente &uuml;bergeben kann.
</p>

<p>
Statt der <i>alert()</i>-Anweisung wird also das Ergebnis dem Value eines HTML-Elementes zugeordnet:
</p>

<pre style="background='silver';">
document.form1.text1.value = co.return_value;
</pre>

<p>
Soll das R&uuml;ckgabeergebnis statt dessen das gesamte HTML-Erscheinungsbild &auml;ndern, 
so w&uuml;rde man das mit folgendem Code erreichen:
</p>

<pre style="background='silver';">
document.all.IDX.innerHTML = co.return_value;
</pre>

<p>
<i>IDX</i> ist dabei die id des HTML-Tags, in dessen Bereich das Ergebnis auszugeben ist. In unserem Beispiel 
habe ich das mit einem <i>span</i>-Tag realisiert:
</p>

<pre style="background='silver';">
&lt;span id=IDX&gt;&lt;/span&gt;
</pre>

<p>
Die in der Praxis in Bezug auf das hier gezeigte Beispiel am h&auml;ufigsten vorkommenden Tags werden &lt;DIV&gt;, &lt;SPAN&gt; 
und &lt;TD&gt; sein. Mit all diesen l&auml;&szlig;t sich die oben beschriebene Vorgehensweise unproblematisch realisieren.
</p>

<p>
Die zweite Methode, die ebenso die Funktionen der ASP-Seite aufruft und auswertet ist die RSGetASPObject - Methode.
</p>

<h2>2. Die RSGetASPObject - Methode</h2>

<p>
Bevorzugt man den objektorientierten Ansatz, kann man mit dieser Methode arbeiten. Die allgemeine Syntax zu 
dieser Methode lautet:
</p>

<p>
<i>ObjName =</i> <b>RSGetASPObject(</b><i>url</i><b>)</b>
</p>

<p>
<i>ObjName</i> - Bezeichnet hier eine Objektvariable, die die in der <i>url</i> definierten Prozeduren verwenden 
k&ouml;nnen. 
</p>

<p>
<i>url</i> - entspricht den Ausf&uuml;hrungen zur RSExecute-Methode. Hier wird die ASP-Seite angegeben, die die 
einzelnen Prozeduren beinhaltet, welche entsprechend aufgerufen werden sollen.
</p>

<p>
Wie sieht das in unserem Beispiel aus? Die oben beschriebene Syntax in der <b>remotecalljs.htm</b> &auml;ndert sich 
dann wie folgt:
</p>

<pre style="background='silver';">
&lt;SCRIPT LANGUAGE=javascript  event=onclick for=button1&gt;
    var url = "remotecalljs.asp";
    var aspObj = RSGetASPObject(url);
    var cv = aspObj.VBGetMessage4(5,3).return_value;
    alert(cv);
&lt;/SCRIPT&gt;
</pre>

<p>
Hier wird wieder zuerst der Variable <i>url</i> der Name der ASP-Seite zugewiesen. Befindet sich die ASP-Seite in 
einem andern Ordner als die Client-Seite, so kann hier auch der entsprechende Path angegeben werden, z.B.:
</p>

<pre style="background='silver';">
var url = "../remotesites/remotecalljs.asp";
</pre>

<p>
Als n&auml;chstes wird eine Objektreferenz auf die in <i>url</i> angegebene ASP-Seite erstellt.
</p>

<p>
Da die erstellte Objektreferenz mit den Prozeduren der in der durch <i>url</i> angegebenen ASP-Seite arbeiten kann, 
erfolgt jetzt der Aufruf mit der entsprechenden Funktion, wobei die an die Funktion zu &uuml;bergebenden 
Parameter hierbei gleich mit &uuml;bergeben werden.
</p>

<p>
Die Objektreferenz <i>aspObj</i> &uuml;bernimmt hier die Eigenschaften der RSGetASPObject-Methode, soda&szlig; die Zuweisung des 
R&uuml;ckgabeergebnisses an die Variable cv durch Angabe der Eigenschaft <i>return_value</i> direkt erfolgen kann.
</p>

<pre style="background='silver';">
var cv = aspObj.VBGetMessage4(5,3).return_value;
</pre>

<p>
Die Funktion in der <b>remotecalljs.asp</b> hierzu sieht folgenderma&szlig;en aus:
</p>

<pre style="background='silver';">
Public Function VBGetMessage4(ByVal aa, ByVal bb)
    VBGetMessage4 = cint(aa)/cint(bb)
End Function
</pre>

<p>
Hierbei f&auml;llt insbesondere auf, da&szlig; die &uuml;bergebenen Werte in Integer-Werte explizit umgewandelt werden. Dies ist insoweit auch erforderlich, da standardm&auml;&szlig;ig die Werte als String an die jeweilige Funktion &uuml;bergeben werden.
</p>

<p>
Das Ergebnis der Berechnung wird dann wieder mit einer <i>alert()</i>-Anweisung angezeigt. 
</p>

<IMG SRC="/artikel/Bilder/200106/20010606_2.png" width="377" height="307" alt="" border="0">

<p>
Damit beide hier besprochenen Methoden fehlerfrei arbeiten, ist es erforderlich, da&szlig; auf der Client-Site 
innerhalb eines JavaScript-Scriptblockes eine Referenz auf die Datei <b>RS.HTM</b> erstellt wird. 
Dieser Scriptblock wird in der &lt;HEAD&gt; Sektion der Client-Seite definiert: (<b>remotecalljs.htm</b>)
</p>

<pre style="background='silver';">
&lt;HTML&gt;
&lt;HEAD&gt;
&lt;META NAME="GENERATOR" Content="Microsoft Visual Studio 6.0"&gt;
&lt;TITLE&gt;RemoteScripting 1.Variante&lt;/TITLE&gt;
&lt;SCRIPT LANGUAGE=javascript  src=_ScriptLibrary/RS.HTM&gt;&lt;/SCRIPT&gt;
&lt;/HEAD&gt;
&lt;BODY&gt;
</pre>

<p>
In der &lt;BODY&gt; Sektion ist dann die JavaScript-Function <i>RSEnableRemoteScripting()</i> aufzurufen, da mit 
dieser Funktion das JAVA-APPLET  initialisiert wird, das seinerseits eine Referenz auf die <i>Rsproxy.class</i> 
erstellt.
</p>

<pre style="background='silver';">
&lt;SCRIPT LANGUAGE=javascript&gt;
    RSEnableRemoteScripting("_ScriptLibrary");
&lt;/SCRIPT&gt;
</pre>

<p>
In einigen Publikationen ist zu lesen, da&szlig; die Funktion <i>RSEnableRemoteScripting()</i> unter Angabe des 
Verzeichnisses erfolgt, welches die Datei <b>RsProxy.class</b> enh&auml;lt (der Verzeichnisname selbst ist frei 
w&auml;hlbar, f&uuml;r diesen Artikel habe ich mich f&uuml;r "_ScriptLibrary" entschieden).  Sofern sich die <b>Rsproxy.class</b>
im selben Verzeichnis wie die RS.HTM befindet, so bleibt diese Angabe hier entbehrlich. Hierbei ist 
jedoch zu erg&auml;nzen, da&szlig; nach der Installation des Windows Scripting Host Version 5.5 die Angabe des 
Verzeichnisses zwingend erforderlich wurde, da andernfalls eine Fehlermeldung zur&uuml;ckgegeben wird.
</p>

<h2>Die serverseitige Bereitstellung von Remote Scripting</h2>

<p>
Wie schon oben angesprochen, ben&ouml;tigen wir eine Datei - eine ASP-Seite - die die Funktionalit&auml;t hinsichtlich der 
Kommunikation mit dem Server beinhaltet.
</p>

<p>
Ich habe hier die Datei <b>remotecalljs.asp</b> (und <b>remotecallvbs.asp</b>) erstellt. Folgende 
Voraussetzungen m&uuml;ssen zwingend in der ASP-Seite erf&uuml;llt sein:
</p>

<ul>
<li>Einschlie&szlig;en und Initialisierung der Server Scripting Library (des Verzeichnisses, welches die Dateien RS.ASP, <b>RS.HTM</b> und <b>Rsproxy.class</b> enth&auml;lt)</li>
<li>Erstellen der Funktionen und Unterroutinen, die clientseitig &uuml;ber die Methoden <i>RSExecute()</i> oder <i>RSGetASPObject()</i> aufgerufen werden sollen</li>
<li>Ver&ouml;ffentlichen der einzelnen Funktionen und Unterroutinen</li>
</ul>

<p>
In den folgenden Abschnitten  werde ich nun auf diese Punkte genauer eingehen.
</p>

<h3>Einschlie&szlig;en und Initialisierung der Scripting Library</h3>

<p>
Als erstes wird eine serverseitiges <i>INCLUDE</i>-Anweisung mit einer Referenz 
auf die Datei <b>RS.ASP</b> erstellt.
</p>

<pre style="background='silver';">
&lt;!--#INCLUDE FILE="_ScriptLibrary/RS.ASP"--&gt;
</pre>

<p>
Dabei ist es auch m&ouml;glich die INCLUDE-Anweisung folgenderma&szlig;en zu definieren:
</p>

<pre style="background='silver';">
&lt;!--#INCLUDE Virtual="/_ScriptLibrary/RS.ASP"--&gt;
</pre>

<p>
Dann mu&szlig; jedoch - im Gegensatz zu der zuvor genannten Variante - der Ordner "_ScriptLibrary" sich im 
wwwroot-Verzeichnis befinden.
</p>

<p>
Mit der Positionierung der folgenden Anweisung - dem Aufruf der <i>RSDispatch</i>-Methode - scheinen 
die Meinungen auseinanderzugehen. In der Dokumentation von Microsoft ist zu lesen, da&szlig; die <i>RSDispatch</i>-Methode 
als erster Eintrag in der ASP-Seite vorzunehmen ist. Andererseits findet man aber auch Hinweise, 
wonach der Aufruf der <i>RSDispatch</i>-Methode und die <i>INCLUDE</i>-Anweisung am Ende der 
ASP-Seite zu erfolgen haben.
</p>

<p>
In unserem Beispiel bliebe es gleich, an welcher Stelle die Methode <i>RSDispatch</i> aufgerufen wurde. 
Alle Methoden wurden in jedem Fall ordnungsgem&auml;&szlig; abgearbeitet. Ich habe mich hier f&uuml;r das Ende der Datei 
entschieden, was den Aufruf der <i>RSDispatch()</i> und den Anfang der Datei, was die <i>INCLUDE</i>-Anweisung 
betrifft.
</p>

<pre style="background='silver';">
&lt;!--#INCLUDE FILE="_ScriptLibrary/RS.ASP"--&gt;
...
&lt;% RSDispatch %&gt;
</pre>

<p>
Hinsichtlich des Verzeichnisses "_ScriptLibrary" sollte folgendes beachtet werden: Die Beispiele dieses 
Artikels, wo die Dateinamen mit "<b>remotecalljs</b>" beginnen, d&uuml;rften auf allen Rechnern ohne Probleme 
laufen. Die Dateien, die mit "<b>remotecallvbs</b>" beginnen, setzen die neueste Version der ScriptLibrary 
<b>zwingend</b> voraus. Das Verzeichnis "_ScriptLibrary" dieses Artikels entspricht der Version 1.0b - 
der zur Zeit neusten Version. Die Downloadadresse finden Sie weiter unten im Text.
</p>

<h2>Erstellen der Funktionen und Unterroutinen</h2>

<p>
Im n&auml;chsten Schritt werden dann die einzelnen Funktionen erstellt. Hierbei ist zu beachten, da&szlig; 
<i>SUB</i>-Prozeduren nicht direkt m&ouml;glich sind, da sie keine Werte zur&uuml;ckgeben k&ouml;nnen, sondern nur bestimmte 
Anweisungen ausf&uuml;hren. Das hei&szlig;t aber nicht, da&szlig; auf <i>SUB</i>-Prozeduren ganz verzichtet werden mu&szlig;. Diese 
k&ouml;nnen jederzeit aus einer <i>Function</i> heraus aufgerufen werden. Weiterhin ist zu beachten, da&szlig; die 
definierten Funktionen <i>Public</i> sein m&uuml;ssen: Zwar sind alle Funktionen in VBScript <i>Public</i>, soweit nichts 
anderes angegeben wurde - aber der &Uuml;bersicht wegen habe ich in den Beispielen <i>Public</i> mit angegeben.
</p>

<p>
In unserem Beispiel haben wir folgende Funktionen erstellt:
</p>

<pre style="background='silver';">
Public Function VBGetMessage()
    VBGetMessage = "Diese Function wurde Remote aufgerufen."
End Function

Public Function VBGetMessage2(ByVal aa, ByVal bb)
    VBGetMessage2 = cint(aa) * cint(bb)
End Function

Public Function VBGetMessage3(ByVal aa, ByVal bb)
    VBGetMessage3 = cint(aa)-cint(bb)
End Function

Public Function VBGetMessage4(ByVal aa, ByVal bb)
    VBGetMessage4 = cint(aa)/cint(bb)
End Function
</pre>

<p>
Zu den Besonderheiten bei der Konvertierung der &uuml;bergebenen Funktionsparameter habe ich oben im 
Text entsprechende Ausf&uuml;hrungen gemacht. Die Parameter werden standardm&auml;&szlig;ig als String &uuml;bergeben. Sollen 
mit den Werten Berechnungen durchgef&uuml;hrt werden, ist es besser, diese entsprechend voher zu konvertieren. 
</p>

<h2>Ver&ouml;ffentlichen der einzelnen Funktionen und Unterroutinen</h2>

<p>
Zum Schlu&szlig; m&uuml;&szlig;en die Funktionen "&ouml;ffentlich" bekannt gemacht werden, also f&uuml;r RemoteScripting aufrufbar. 
Hierzu gibt es zwei M&ouml;glichkeiten:
</p>

<h3>1.	Jscript</h3>

<p>
Die Variante entspricht den urspr&uuml;nglichen Intentionen des RS, was ja - wie eingangs schon erw&auml;hnt - 
urspr&uuml;nglich auf JavaScript/Jscript ausgerichtet war. 
</p>

<p>
Hier wird also eine Funktion definiert, die ihrerseit die Verbindung zu unserer Funktion, die wir in unserer 
ASP-Seite definiert haben, herstellt. 
</p>

<p>
Der entsprechende Code sieht hierzu wie folgt aus (<b>remotecalljs.asp</b>):
</p>

<pre style="background='silver';">
&lt;SCRIPT LANGUAGE=JScript RUNAT=Server&gt;
var public_description = new RemoteMethods();

function RemoteMethods()
{
    this.VBGetMessage = Function("return VBGetMessage()");
    this.VBGetMessage2 = Function("aa","bb","return VBGetMessage2(aa,bb)");
    this.VBGetMessage3 = Function("ac","bc","return VBGetMessage3(ac,bc)");
    this.VBGetMessage4 = Function("aa","bb","return VBGetMessage4(aa,bb)");
}
&lt;/SCRIPT&gt;
</pre>

<h3>2. VBScript</h3>

<p>
Mit der Version 1.0b der ScriptLibrary, die unter der Adresse
<a href="http://msdn.microsoft.com/scripting/remotescripting/rsdown.htm" target="_blank">http://msdn.microsoft.com/scripting/remotescripting/rsdown.htm</a>
heruntergeladen werden kann, ist es m&ouml;glich &uuml;ber die <i>Class</i>-Anweisung die erstellten Funktionen &ouml;ffentlich 
bekannt zu machen. Hierbei wird eine Objektinstanz &uuml;ber die Variable <i>public_description</i> (der Name ist 
zwingend durch die RS.ASP vorgegeben!) auf die Klasse erzeugt.
</p>

<p>
Der sich daraus ergebene Code sieht dann wie folgt aus (<b>remotecallvbs.asp</b>):
</p>

<pre style="background='silver';">
Class RemoteMethods
    Public Function VBGetMessage()
        VBGetMessage = "Diese Function wurde Remote aufgerufen."
    End Function
    
    Public Function VBGetMessage2(ByVal aa, ByVal bb)
        VBGetMessage2 = cint(aa) * cint(bb)
    End Function
    
    Public Function VBGetMessage3(ByVal aa, ByVal bb)
        VBGetMessage3 = cint(aa)-cint(bb)
    End Function
    
    Public Function VBGetMessage4(ByVal aa, ByVal bb)
        VBGetMessage4 = cint(aa)/cint(bb)
    End Function
End Class
set public_description = new RemoteMethods
</pre>

<p>
In Anbetracht dessen, da&szlig; hier die gewohnte VBScript-Umgebung erst gar nicht verlassen wird und - soweit 
nicht schon in der Praxis bisher umgesetzt - die bislang definierten Funktionen nur noch durch das 
<i>Class</i>-Objekt umschlossen werden brauchen, ist dieser Ansatz der durchaus elegantere.
</p>

<h2>Zusammenfassung</h2>

<p>
Mit Remote Scripting ist es m&ouml;glich, den Ablauf des Webangebotes so zu gestalten, da&szlig; ASP Seiten nicht 
immer wieder neu geladen werden m&uuml;ssen. Gerade wenn man viele aufwendige Grafiken schon einmal geladen hat, 
gen&uuml;gt es doch auf die sich durch die Clientanfrage ergebenden &Auml;nderungen einzugehen und lediglich das 
daraus resultierende Ergebnis dem Client anzuzeigen. 
</p>

<p>
Ein weiterer und sehr wesentlicher Punkt ist die Sicherheit der Webanwendungen. Sicherheitsrelevante Daten 
m&uuml;ssen nicht mehr sichtbar f&uuml;r den Client &uuml;ber den URL &uuml;bertragen werden. Mit Remote Scripting k&ouml;nnen 
diese Informationen f&uuml;r den Client verdeckt an den Server &uuml;bermittelt werden. 
</p>

<p>
Ebenso wird mit dem Einsatz von Remote Scripting auf mehr Struktur in der ASP-Programmierung geachtet. 
Durch das Zusammenspiel mit Function- und Sub-Prozeduren ist der einzelne dazu angehalten, &uuml;bersichtlicher zu 
programmieren. Der Nebeneffekt, der sich daraus ergibt, ist, da&szlig; ASP-Logik und Design noch st&auml;rker 
getrennt werden und die ASP-Logik zentral administrierbar bleibt.
</p>

<p><strong>This printed page brought to you by <a href="http://www.alphasierrapapa.com/">AlphaSierraPapa</a></strong></p>
<h2>Download des Codes</h2>
<p><a href="../Code/20010606.zip">Klicken Sie hier</a>, um den Download zu starten.<br><SPAN class="content">http://www.aspheute.com/code/20010606.zip</span></p>
<h2>Verwandte Artikel</h2>
<p>
<a href="../artikel/20000526.htm">Klassen in VBScript</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20000526.htm</span><br>
<a href="../artikel/20010628.htm">Onlinestatus des Users &uuml;ber RemoteScripting ermitteln</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010628.htm</span><br>
<a href="../artikel/20010125.htm">Remote Scripting (I)</a><br>
<SPAN class="content">http:/www.aspheute.com/artikel/20010125.htm</span><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Fscripting%2Fremotescripting%2Frsdown%2Ehtm">Remote Scripting Download</a><br>
<SPAN class="content">http://msdn.microsoft.com/scripting/remotescripting/rsdown.htm</span><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Emicrosoft%2Ecom%2Fmsdownload%2Fvbscript%2Fscripting%2Easp">Windows Script 5.5</a><br>
<SPAN class="content">http://www.microsoft.com/msdownload/vbscript/scripting.asp</span><br>

</p>

&nbsp;<P>
<center>

</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
