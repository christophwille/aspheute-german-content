<HTML>
<HEAD>
<TITLE>Authentifizierung in Web Services - WS-Security, Benutzername / Passwort</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Der WS-Security Standard umfasst das Signieren von SOAP Nachrichten, das Verschl&uuml;sseln von SOAP Nachrichten, sowie das Anh&auml;ngen von Security Credentials an SOAP Nachrichten. Mit letzterem werden wir uns heute befassen.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,SOAP,Web Service,WSE,Web Service Enhancements,UsernameToken,IPasswordProvider,Authentication,Authentifizierung,WS-Security">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Authentifizierung in Web Services - WS-Security, Benutzername / Passwort</H1>
<p>
Geschrieben von: <a href="../autoren/christophwille.htm">Christoph Wille</a><br>
Kategorie: <a href="../kategorien/Web%20Services.htm">Web Services</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20030502"></SCRIPT>
</p>
<p>
Der WS-Security Standard umfasst das Signieren von SOAP Nachrichten, das Verschl&uuml;sseln von SOAP Nachrichten, sowie das
Anh&auml;ngen von Security Credentials an SOAP Nachrichten. Diese Security Credentials werden f&uuml;r die Authentifizierung verwendet,
und k&ouml;nnen Benutzername / Passwort, ein X.509 Zertifikat oder Bin&auml;rtoken sein. Wir besch&auml;ftigen uns heute mit ersterem, und
werden dies mit Hilfe der Web Services Enhancements (WSE) 1.0 unter .NET implementieren.
</p>
<p>
Die <a href="http://msdn.microsoft.com/library../default.htm?url=/downloads/list/websrv.asp" target="_blank">XML Web Services Downloads</a>
Seite enth&auml;lt die aktuellsten Links zu den Web Service Enhancements. F&uuml;r diesen Artikel wurden Server und Client-seitig das
<a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=06255A94-2635-4D29-A90C-28B282993A41&displaylang=en" target="_blank">Web Services Enhancements 1.0 SP1 for Microsoft .NET</a>,
und auf der Entwicklermaschine (VS.NET 2002 oder 2003 vorausgesetzt) zus&auml;tzlich das 
<a href="http://www.microsoft.com/downloads/details.aspx?FamilyId=E1924D29-E82D-4D9A-A945-3F074CE63C8B&displaylang=en" target="_blank">Web Services Enhancements Settings Tool for Visual Studio .NET</a>
eingesetzt. Bitte installieren Sie diese Tools entsprechend.
</p>
<p>
Die Benutzername / Passwort Authentifizierung des WS-Security Standards ist im Web Services Enhancements (WSE) &uuml;ber die 
<i>UsernameToken</i> Klasse implementiert. Der Client generiert diesen Token, schickt ihn im Request an den Server, der Server
liest ihn aus dem Request aus - und &uuml;berpr&uuml;ft, ob der User authentifiziert werden kann. Die &Uuml;berpr&uuml;fung des <i>UsernameToken</i>
passiert in einem vom Entwickler separat zu erstellenden Password Provider, wo man die Authentifizierung gegen beliebige Datenquellen
vornehmen kann.
</p>

<h2>Der Password Provider f&uuml;r den Web Service</h2>
<p>
Unser erster Schritt ist also, einen Password Provider (im Download als <b>SamplePasswordProvider</b> enthalten) zu 
implementieren. Dieser ist eine DLL Assembly, und enth&auml;lt folgenden Code (<b>SimpleProvider.cs</b>):
</p>

<pre style="background='silver';">
using System;
using Microsoft.Web.Services.Security;

namespace SamplePasswordProvider
{
  public class Simple : IPasswordProvider
  {
    public string GetPassword(UsernameToken token)
    {
      // Absicherung, damit wir auf alle F&auml;lle einen Token in der Hand haben
      if (null == token)
        throw new ArgumentNullException();

      string strUsername = token.Username;
      return strUsername;
    }
  }
}
</pre>

<p>
Die Funktionalit&auml;t f&uuml;r WS-Security in den Web Services Enhancements befindet sich im Namespace <i>Microsoft.Web.Services.Security</i>,
der &uuml;ber die Assembly <b>Microsoft.Web.Services.dll</b> referenziert wird.
</p>

<IMG SRC="Bilder/200305/20030502_1.png" width="566" height="439" alt="" border="0">

<p>
Die Password Provider Klasse selbst implementiert das Interface <i>IPasswordProvider</i>, das nur eine einzige Methode hat:
<i>GetPassword</i>. Damit wird f&uuml;r einen Benutzernamen das Passwort geliefert - den Vergleich des Passwortes nimmt die WSE
Infrastruktur selbst vor, da Passw&ouml;rter ja gehasht &uuml;bertragen werden k&ouml;nnen (oder mittels Decryption Key Provider beliebig
verschl&uuml;sselt).
</p>
<p>
Kompilieren Sie die Assembly, und merken Sie vor, da&szlig; Sie die Assembly in das <b>bin</b> Verzeichnis der Web Service Applikation
kopieren m&uuml;ssen!
</p>

<h2>Der Web Service</h2>
<p>
Erzeugen Sie einen Web Service in Visual Studio .NET, und wie im Assemblyprojekt zuvor, f&uuml;gen Sie eine Referenz auf die WSE
Assembly ein. Nach diesen Vorarbeiten m&uuml;ssen wir die WSE Infrastruktur &uuml;ber die <b>web.config</b> einbinden. Hier kommt das 
Web Services Enhancements Settings Tool for Visual Studio .NET ins Spiel - dieses kann &uuml;ber das Kontextmen&uuml; des Projekts 
aufgerufen werden ("WSE Settings"):
</p>

<IMG SRC="Bilder/200305/20030502_2.png" width="488" height="185" alt="" border="0">

<p>
Die erste Tabseite legt fest, ob und welche Features von WSE wir verwenden wollen. Diese Einstellungen passen uns gut,
und wir gehen zum Security Tab:
</p>

<IMG SRC="Bilder/200305/20030502_3.png" width="488" height="188" alt="" border="0">

<p>
Dort geben wir die Assembly sowie den vollen Klassennamen unseres Password Providers an (den Sie in das <b>bin</b> Verzeichnis kopieren).
Nach diesem Point-and-Click "Abenteuer" modifiziert uns das Tool automatisch die <b>web.config</b> (Achtung: die Strings <i>type</i> sind
nur der Leserlichkeit wegen auf mehrere Zeilen aufgeteilt, in einer lauff&auml;higen <b>web.config</b> m&uuml;ssen diese in einer einzigen Zeile
stehen!):
</p>

<pre style="background='silver';">
&lt;configuration&gt;
  &lt;configSections&gt;
      &lt;section name="microsoft.web.services"
               type="Microsoft.Web.Services.Configuration.WebServicesConfiguration, 
               Microsoft.Web.Services, Version=1.0.0.0, Culture=neutral, 
               PublicKeyToken=31bf3856ad364e35" /&gt;
  &lt;/configSections&gt;

  &lt;microsoft.web.services&gt;
   &lt;security&gt;
      &lt;!--namespace.classname, assembly name --&gt;
      &lt;passwordProvider type="SamplePasswordProvider.Simple, SamplePasswordProvider" /&gt;
   &lt;/security&gt;
  &lt;/microsoft.web.services&gt; 
  
  &lt;system.web&gt;
   &lt;webServices&gt;
      &lt;soapExtensionTypes&gt;
            &lt;add type="Microsoft.Web.Services.WebServicesExtension,Microsoft.Web.Services,
            Version=1.0.0.0,Culture=neutral,PublicKeyToken=31bf3856ad364e35" 
            priority="1" group="0" /&gt;
      &lt;/soapExtensionTypes&gt;
   &lt;/webServices&gt;
</pre>

<p>
Nach dieser Vorarbeit kommen wir endlich zum Code des Web Services (Projekt <b>UsernameTokenAuth</b>), beginnen wir mit den 
zus&auml;tzlichen Namespace Imports:
</p>

<pre style="background='silver';">
using Microsoft.Web.Services;
using Microsoft.Web.Services.Security;
using System.Web.Services.Protocols;
</pre>

<p>
Die ersten beiden sind f&uuml;r das WSE, der dritte f&uuml;r die <i>SoapException</i> Klasse, mit der wir Fehler an den Client
zur&uuml;ckmelden. Sehen wir uns nun unsere Web Service Methode an:
</p>

<pre style="background='silver';">
[WebMethod]
public string UsernameTokenAuthSampleMethod()
{
  UsernameToken utCurrent = Authenticate();
  return "Hello World, " + utCurrent.Username;
}
</pre>

<p>
Die ganze Arbeit ist wieder in eine Methode namens <i>Authenticate</i> ausgelagert. Im Vergleich zu fr&uuml;heren Beispielen
macht sie aber nur Hilfsarbeiten, da die eigentliche Authentifizierung durch WSE und unseren Password Provider erledigt 
wird. Trotzdem ist der Sourcecode interessant und vor allem auch notwendig:
</p>

<pre style="background='silver';">
private UsernameToken Authenticate()
{
   // Wir m&uuml;ssen 3 Checks durchf&uuml;hren 
   //   * SoapContext mu&szlig; existieren (SOAP Request &amp; WSE installiert)
   //   * Nur ein UsernameToken darf &uuml;bergeben worden sein
   //   * Ein Passwort mu&szlig; &uuml;bergeben worden sein (Kontrolle auf SendHashed)

   SoapContext sc = HttpSoapContext.RequestContext;
   
   // CHECK 1
   if (null == sc)
   {
      throw new ApplicationException("Nur SOAP Requests erlaubt");
   }

   // CHECK 2
   UsernameToken utCurrent = null;
   foreach (SecurityToken st in sc.Security.Tokens)
   {
      if (st is UsernameToken)
      {
         if (null != utCurrent)
         {
            // ein zweiter Token wurde &uuml;bergeben - Abbruch
            throw new SoapException("Nur ein UsernameToken pro Request erlaubt!",
                              SoapException.ClientFaultCode);
         }
         else
            utCurrent = (UsernameToken)st;
      }
   }
   if (null == utCurrent)
      throw new SoapException("Kein UsernameToken &uuml;bergeben", 
                        SoapException.ClientFaultCode);

   // CHECK 3
   if (utCurrent.PasswordOption != PasswordOption.SendHashed)
      throw new SoapException("Falsche &Uuml;bergabeart f&uuml;r Passwort", 
                        SoapException.ClientFaultCode);

   // alles ok ab hier
   return utCurrent;
}
</pre>

<p>
Die drei Fehlerf&auml;lle sind leicht erkl&auml;rt: der erste ist, da&szlig; am Client der Webservice ohne WSE aufgerufen wurde, also ein 
normaler unauthentifizierter Request gestartet wurde. Der zweite Fall ist, da&szlig; mehr als ein UsernameToken &uuml;bergeben wurde - gegen
welchen soll authentifiziert werden? Da wir das nicht wissen, brechen wir sicherheitshalber ab. Der dritte Fall ist, da&szlig; auf der
Clientseite das Passwort nicht gehashed verschickt wurde, also ein leeres Passwort theoretisch m&ouml;glich w&auml;re - dies ist aus 
Sicherheitsgr&uuml;nden auch zu unterbinden.
</p>
<p>
Nach all diesen zus&auml;tzlichen Checks kann man sicher sein, da&szlig; sicherheitstechnisch alles wasserdicht ist. Damit haben wir einen
abgesicherten Service, und k&ouml;nnen uns dem Client zuwenden.
</p>

<h2>Der Client</h2>
<p>
Das Erstellen der Web Referenz funktioniert automatisch, wenn man das Web Services Enhancements Settings Tool for Visual Studio .NET
installiert hat. Wenn nicht, mu&szlig; man sicherstellen, da&szlig; im Web Service Proxy die Klasse so definiert ist:
</p>

<pre style="background='silver';">
public class Service1 : Microsoft.Web.Services.WebServicesClientProtocol {
</pre>

<p>
Die Basisklasse ist ge&auml;ndert - das Tool erledigt das selbst&auml;ndig, ohne Tool mu&szlig; man diese &Auml;nderung per Hand machen. Noch das WSE
als Referenz eingebunden, und schon kann man den Client coden (Projekt <b>UsernameTokenAuthClient</b>):
</p>

<pre style="background='silver';">
using System;

// Notwendig f&uuml;r WSE
using Microsoft.Web.Services.Security;

namespace UsernameTokenAuthClient
{
   class ConsoleAppWsClient
   {
      [STAThread]
      static void Main(string[] args)
      {
         localhost.Service1 svc = new localhost.Service1();
         
         // Neuen UsernameToken anlegen, und der Tokens Collection des Request Contexts anh&auml;ngen
         UsernameToken ut = new UsernameToken("test", "test", PasswordOption.SendHashed);
         svc.RequestSoapContext.Security.Tokens.Add(ut);

         // Und jetzt den Web Service aufrufen
         string strRetVal = svc.UsernameTokenAuthSampleMethod();
         Console.WriteLine(strRetVal);
      }
   }
}
</pre>

<p>
Hierbei ist wichtig darauf zu achten, den <i>RequestSoapContext</i> zu verwenden, weil es gibt auch den
<i>ResponseSoapContext</i> - wenn man bei IntelliSense nicht genau schaut, kann das zu einer langwierigen
Fehlersuche f&uuml;hren! Ansonsten ist der Code sehr &auml;hnlich zu dem, den wir f&uuml;r Custom SOAP Headers verwendet haben.
</p>
<p>
Dank WSE ist die Implementierung einer Benutzername / Passwort Authentifizierung nach dem WS-Security Standard keine
gro&szlig;e Aff&auml;re - im Prinzip ist es ein Kochrezept, das immer angewendet wird. Die aktuellen SOAP Toolkits unterst&uuml;tzen
diesen Standard bereits - auf verschiedensten Plattformen und f&uuml;r verschiedenste Programmiersprachen.
</p>


<h2>Schlu&szlig;bemerkung</h2>
<p>
Die Benutzername / Passwort Authentifizierung ist eine gute - vor allem standardisierte - M&ouml;glichkeit, Authentifizierung bei
Web Services zu implementieren. Doch WS-Security bietet noch mehr Authentifizierungsmethoden, und eine davon werden wir
im n&auml;chsten Artikel beleuchten: X.509 Zertifikate f&uuml;r die Authentifizierung.
</p>
<h2>Download des Codes</h2>
<p><a href="../Code/20030502.zip">Klicken Sie hier</a>, um den Download zu starten.</p>
<h2>Verwandte Artikel</h2>
<p>
<a href="20030501.htm">Authentifizierung in Web Services - SOAP Header</a><br>
<a href="20030429.htm">Authentifizierung in Web Services - Windows Integrated</a><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Emicrosoft%2Ecom%2Fdownloads%2Fdetails%2Easpx%3FFamilyId%3D06255A94%2D2635%2D4D29%2DA90C%2D28B282993A41%26displaylang%3Den">Web Services Enhancements 1.0 SP1 for Microsoft .NET</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Emicrosoft%2Ecom%2Fdownloads%2Fdetails%2Easpx%3FFamilyId%3DE1924D29%2DE82D%2D4D9A%2DA945%2D3F074CE63C8B%26displaylang%3Den">Web Services Enhancements Settings Tool for Visual Studio .NET</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2Fdefault%2Easp%3Furl%3D%2Fdownloads%2Flist%2Fwebsrv%2Easp">XML Web Services Downloads</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Eine weitere sehr hilfreiche Resource ist das <a href="http://aspxfiles.com/">deutsche ASP.NET Wiki</a>,
das als zentrale Anlaufstelle f&uuml;r Tips, Tricks, Know How und alles N&uuml;tzliche was man in seinem Alltag als 
(ASP).NET-Entwickler so braucht und entdeckt gedacht ist. 
</p>

<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20030502" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Authentifizierung in Web Services - WS-Security, Benutzername / Passwort"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20030502.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Christoph Wille"><input type="hidden" name="AuthorEmail" value="christophw@alphasierrapapa.com"><input type="hidden" name="Artikel" value="20030502"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20030502.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
