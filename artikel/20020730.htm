<HTML>
<HEAD>
<TITLE>C# XML-Kommentare &mdash; Dokumentation von selbst</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Wenn wir unsere Software erfolgreich verkaufen wollen, mu&szlig; sie ohne grossen Aufwand anwendbar sein. Dokumentation ist der Schl&uuml;ssel dazu. Hier geht es um Dokumentation f&uuml;r Programmierer.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Dokumentation,Kommentar,Information,XML,Csharp,C Sharp,Tags,XML Kommentare,Ndoc,HTML Help,HTMLHelp">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>C# XML-Kommentare &mdash; Dokumentation von selbst</H1>
<p>
Geschrieben von: <a href="../autoren/bernhardspuida.htm">Bernhard Spuida</a><br>
Kategorie: <a href="../kategorien/Dokumentation.htm">Dokumentation</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20020730"></SCRIPT>
</p>
<p>
"Kommentare brauche ich nicht, ist doch eh klar was passiert" &mdash; Zwei Monate sp&auml;ter: "H&auml;h???". K&auml;ufer der 
Komponente: "Und wie bitte soll ich das aufrufen?" &mdash; wenn wir mit unseren Softwarekomponenten erfolgreich sein wollen, 
m&uuml;ssen sie leicht verwendbar sein. Wenn wir in einem Team Software entwickeln, m&uuml;ssen unsere Kollegen mit unserem 
Code ihre eigenen Aufgaben erledigen k&ouml;nnen. Wir haben in beiden F&auml;llen zwei M&ouml;glichkeiten:
</p>

<ol>
	<li>Wir sind immer f&uuml;r Erkl&auml;rungen verf&uuml;gbar</li>
	<li>Unser Code ist sauber dokumentiert</li>
</ol>

<p>
M&ouml;glichkeit 2 ist doch entschieden attraktiver, oder nicht? Traditionell ist das Schreiben von Dokumentation nicht der Teil 
des Entwicklungprozesses der am liebsten erledigt wird. Aber seit im Rahmen von <b>.NET</b> die Programmiersprache C# 
eingef&uuml;hrt wurde geht das (fast) von selbst. An die Javaprogrammierer die das hier lesen: ich kenne JDOC &mdash; aber hier 
geht es um C#, klar? ;-)</p>
<p>
F&uuml;r die Beispiele in diesem Artikel wird das <b>.NET</b> Framework SDK, sowie wahlweise Visual Studio.net oder 
SharpDevelop und/oder NDoc ben&ouml;tigt.
</p>

<h2>Warum kommentieren?</h2>
<p>
Ich wei&szlig; aus eigener langer Erfahrung (siehe Autoreninfo), da&szlig; man als Programmierer dazu neigt seine eigenen Programme 
nicht zu dokumentieren &mdash; man hat das ja selbst geschrieben, daher wei&szlig; man ja was im Code passiert? Falsch!
</p>
<p>
Nach einer erschreckend kurzen Zeit kennt man seinen eigenen Code ohne Dokumentation nicht mehr. Wie geht es dann einem Kunden der 
unser Control/unsere Bibliothek gekauft hat? Wenn wir unsere Software erfolgreich verkaufen wollen, mu&szlig; sie ohne grossen Aufwand 
anwendbar sein. Dokumentation ist der Schl&uuml;ssel dazu. Hier geht es nicht um Endbenutzerhandb&uuml;cher, sondern um 
Dokumentation f&uuml;r Programmierer in unserem Team, Programmierer als Kunden unseren Codes.
</p>
<p>
Mal ehrlich: w&auml;re ein grosses Projekt wie <b>.NET</b> ohne Dokumentation erfolgreich? W&auml;re <b>Deine</b> ActiveX Control 
ohne Dokumentation zu verkaufen &mdash; und sei es nur um wenige Dollar? Verwendest Du gerne Bibliotheken oder Komponenten ohne 
jegliche Dokumentation?
</p>
<p>
Die Antwort ist in allen F&auml;llen nein. Trotzdem wird Dokumentieren der Schnittstellen und Funktionsweise meist als l&auml;stig 
empfunden.
</p>
<p>
Ein Beispiel warum Dokumentieren Sinn macht:
</p>

<pre style="background='silver';">
#!/usr/bin/perl -s
## Ian Goldberg &lt;ian@cypherpunks.ca&gt;, 19980817
$f=$d?-1:1;4D=pack(C',33..86);$p=shift;
$p=~y/a-z/A-Z/;$U='$D=~s/.*)U$/U$1/;
$D=~s/U(.)/$1U/;';($V=$U)=~s/U/V/g;
$p=~s/[A_Z]/$k=ord($&amp;)-64,&amp;e/eg;$k=0;
while(&lt;&gt;){y/a-z/A-Z/;y/A-Z//dc;$o.=$_}$o='X'
while length($o)%5&amp;&amp;!$d;
$o=~s/./chr(($f*&amp;e+ord($&amp;)-13)%26+65/eg;
$o=~s/X*$//if $d;$o=~~s/.{5}/$&amp; /g;
print&rdquo;$o/n&rdquo;;sub v{$v=ord(substr($D,$_[0]))-32;
$v&gt;53?53:$v}
sub w{$D=~s/(.{$_[0]})(.*)(.)/$2$1$3/}
sub e{eval&rdquo;$U$V$V&rdquo;;$D=~s/(.*)([UV].*[UV])(.*]/$3$2$1/;
&amp;w(&amp;v(53));$k?(&amp;w($k)):($c=&amp;v(&amp;v(0)),$c&gt;52?&amp;e:$c)}
</pre>

<p>
Das ist kein 'Spaghetticode' &mdash; das Programm l&auml;ft linear ohne Verzweigungen ab. Trotzdem geht die Verst&auml;ndlichkeit 
gegen Null. Die erl&auml;uterte Version findet sich unter den Links im Artikel 'The fine Art of Commenting' (Ich wei&szlig;, manche 
werden es als fies empfinden da&szlig; ich in einem C#-Artikel ein Perl-Programm als Beispiel verwendet habe &mdash; auf Wunsch 
kann ich auch genauso unverst&auml;ndliche Beispiele in anderen Sprachen liefern).
</p>
<p>
Aber es gibt Auswege &mdash; automatisierte Dokumentationssysteme. Wir brauchen 'nur noch' unseren Code kommentieren und der 'Rest 
passiert von selbst'.
</p>

<h2>Was kommentieren?</h2>
<p>
Wir k&ouml;nnen drei Arten von Kommentaren unterscheiden, die regelm&auml;&szlig;ig in der t&auml;glichen Programmierpraxis auftreten:
</p>

<ol>
	<li>Dokumentierende Kommentare</li>
	<li>Funktionale Kommentare</li>
	<li>Erkl&auml;rende Kommentare</li>
</ol>

<p>
Alle drei Arten Kommentare sind wichtig f&uuml;r den Erfolg eines Projektes. Dokumentierende Kommentare sind sowohl innerhalb des 
Teams als auch f&uuml;r die K&aumlu;fer der Software wichtig. Funktionale Kommentare sind innerhalb des Teams das Lebenselixir, 
erkl&auml;rende Kommentare sind f&uuml;r alle wichtig: Uns selbst, das Team, die Kunden.
</p>

<h3>Dokumentierende Kommentare</h3>
<p>
In diese Kategorie fallen Kommentare, die die Entwicklung des Projektes/des Files wiederspiegeln. Dazu geh&ouml;ren:
</p>

<ul>
<li>Dateiname</li>
<li>Versions/Build-nummer</li>
<li>Erstellungsdatum</li>
<li>Datum der letzten &Auml;nderung</li>
<li>Name des Autors</li>
<li>Urheberrechtsvermerk</li>
<li>Zweck des Programms</li>
<li>Versionsgeschichte</li>
<li>Abh&auml;ngigkeiten</li>
<li>Eventuell ben&ouml;tigte Hardware</li>
</ul>

<p>
Derartige Kommentare k&ouml;nnen von Hand eingef&uuml;gt werden. Da dies jedoch ein &uuml;beraus fehleranf&auml;lliger 
Prozess ist, sollte man so weit m&ouml;glich daf&uuml;r die Platzhalter eines Versionskontrollsystems wie Visual SourceSafe, 
CVS oder ARCH verwenden. Je nach Vorliebe. Diese Platzhalter werden automatisch auf die jeweils aktuellen Werte gesetzt.
</p>

<h3>Funktionale Kommentare</h3>
<p>
Funktionale Kommentare dienen einem Zweck: den <b>Entwicklungsprozess</b> effizienter zu gestalten. Sie beschreiben weder den 
Entwicklungsprozess wie es dokumentarische Kommentare tun, noch die Funktionsweise des Codes wie es erkl&auml;rende Kommentare tun.
</p>
<p>
Sie dienen der Kommunikation innerhalb eines Entwicklerteams &mdash; mitunter sogar als Notizen an sich selbst. H&auml;ufigster und 
offensichtlichster Punkt in dieser Kategorie sind <i>TO DOs</i>. Andere funktionale Kommentare w&auml;ren zum Beispiel:
</p>

<ul>
<li>Fehlerbeschreibungen</li>
<li>Nachrichten an Teamkollegen</li>
<li>Anmerkungen &uuml;ber potentielle Verbesserungen</li>
</ul>

<p>
Diese Sorte Kommentare sollte sparsam verwendet werden, auch wenn sie wichtig sind. Nicht jede Kleinigkeit verdient derartige 
Aufmerksamkeit.
</p>
<p>
Besonders bei dieser Art Kommentare ist es wichtig, in sich konsistent zu bleiben &mdash; entweder 'TODO', To do', 'ToDo', oder was 
auch immer, <b>Hauptsache alle Teammitglieder halten sich an die Regelung</b>. Dadurch wird sichergestellt da&szlig; alle mit einer 
einfachen Suche in ihrem jeweiligen Lieblingseditor alle entsprechenden Stellen im Code finden.
</p>
<p>
In diese Kategorie fallen auch alle beseitigten Fehler. Hier sollte das 'Wer', 'Was' und 'Wann' festgehalten werden. Man 
k&ouml;nnte jetzt nat&uuml;rlich argumentieren da&szlig; derartige Kommentare unter 'dokumentarisch' fallen, aber da die 
Fehlerbeschreibung hierher geh&ouml;rt, geh&ouml;rt auch der Bericht &uuml;ber seine Beseitigung hierher.
</p>

<h3>Erkl&auml;rende Kommentare</h3>
<p>
Jetzt kommen wir zum Herz des erfolgreichen Softwareprojekts &mdash; der Erkl&auml;rung wie es funktioniert. Wenn wir Software 
lediglich aus der Sicht eines Endanwenders betrachten, ben&ouml;tigen wir das alles nicht. Wollen wir unsere APIs anderen 
Programmierern &mdash; in unserem Team oder als Kunden &mdash; zug&auml;nglich machen, so haben wir nur eine Wahl: Dokumentation. 
Ohne Erkl&auml;rung von 'Was' und 'Wie' wird unser genialer Code nie akzeptiert oder erfolgreich verwendet werden. Au&szlig;er 
nat&uuml;rlich wir haben ein Produkt f&uuml;r Endbenutzer geschrieben, sagen wir ein Officepaket &mdash;aber  wieso gibt es 
auch da meterweise B&uuml;cher 'f&uuml;r Gummies' (aus urheberrechtlichen Gr&uuml;nden ge&auml;ndert)? Und wieso verdienen 
andere an solchen B&uumlchern, nicht wir? F&uuml;r uns als 'Programmierer f&uuml;r Programmierer' ist das Ganze zum Gl&uuml;ck 
einfacher: Kommentare einf&uuml;gen und unser Dokumentationssystem erledigt den Rest f&uuml;r uns.
</p>

<h2>Wie kommentieren?</h2>
<p>
Die leidige Aufgabe, unsere Interfaces zu dokumentieren wird uns zum Gl&uuml;ck durch das .NET Framework (genauer C#) sehr erleichtert. Wir 
m&uuml;ssen 'nur noch' unseren Code mit Kommentaren in einem speziellen Format versehen und den Rest erledigt der Compiler, die 
IDE oder Software wie NDoc. Dazu mehr im n&auml;chsten Abschnitt.
</p>
<p>
Diese 'magischen' Kommentare enthalten XML-Tags mit bestimmten Schl&uuml;sselworten. Sie folgen einem bestimmten Muster:
</p>

<pre style="background='silver';">
///&lt;exception cref="BogusException"&gt ;
///Diese Exception wird bei einem Fehlalarm ausgel&ouml;st.
///&lt;see cref="ExceptionHandling" /&gt;
///&lt;/exception&gt;
</pre>

<p>
Wir sehen als erstes da&szlig; alle Kommentarzeilen mit drei statt zwei 'Slashes' beginnen. Als zweites sehen wir da&szlig; wir uns an die 
Regeln f&uuml;r wohlgeformtes XML halten m&uuml;ssen, also sich die Tags nicht '&uuml;berkreuzen' d&uuml;rfen. Weiters sehen wir, 
da&szlig; die Tags Attribute besitzen k&ouml;nnen, hier jeweils Verweise. Die XML-Kommentare in <b>.NET</b> lassen sich in zwei 
Kategorien unterteilen:
</p>

<ul>
	<li>Kategorie-Tags</li>
	<li>Formatierungs-Tags</li>
</ul>

<p>
Die Kategorie-Tags dienen zur Erstellung von Eintr&auml;gen in der generierten Dokumentation. Sie entsprechen den Interfaces, 
Parametern etc. Die Formatierungs-Tags erzeugen Verweise, erstellen Listen etc.
</p>
<p>
Die neun Kategorie-Tags sind in alphabetischer Reihenfolge:
</p>

<table cellspacing="2" width="90%">
<tr><th>Tag</th><th>Verwendung</th><th>Attribute</th></tr>
<tr><td valign="top">example</td><td valign="top">Anwendungsbeispiel f&uuml;r das jeweilige API-element.<br>
Verwendet meist das &lt;code&gt; tag.</td><td valign="top">keine</td></tr>
<tr><td valign="top">exception</td><td valign="top">Beschreibt eine Exception die auftreten kann.</td><td valign="top">cref *</td></tr>
<tr><td valign="top">include</td><td valign="top">Bindet eine externe XML-Datei ein.</td><td valign="top">file, path *</td></tr>
<tr><td valign="top">param</td><td valign="top">Beschreibt einen Parameter einer Methode oder Eigenschaft</td><td valign="top">name *</td></tr>
<tr><td valign="top">permission</td><td valign="top">Gibt die Zugangsberechtigungen bzw. die G&uuml;ltigkeit (Scope) eines Typmitglieds wieder</td><td valign="top">cref *</td></tr>
<tr><td valign="top">remarks</td><td valign="top">Beschreibt einen Typ oder eine Klasse</td><td valign="top">keine</td></tr>
<tr><td valign="top">returns</td><td valign="top">Gibt den R&uuml;ckgabewert einer Methode wieder</td><td valign="top">keine</td></tr>
<tr><td valign="top">seealso</td><td valign="top">Gibt einen Verweis auf verwandte Themen</td><td valign="top">cref *</td></tr>
<tr><td valign="top">summary</td><td valign="top">Beschreibt Typmitglieder wie Methoden, Eigenschaften, Felder</td><td valign="top">keine</td></tr>
</table>

<p>
Die mit einem Sternchen versehenen Attribute werden vom Compiler auf G&uuml;ltigkeit gepr&uuml;ft, da sie im Sourcecode vorhandenen 
Elementen oder Querverweisen auf andere XML-Kommentare entsprechen.
</p>
<p>
Der beim Tag &lt;include&gt; als <i>path</i> angegebene Pfad muss als 'XPath' angegeben werden, also der XML-Notation f&uuml;r 
Pfade in XML-Dateien folgen. Man beachte die Verwendung von einfachen und doppelten Anf&uuml;hrungsstrichen. Sie mu&szlig; genauso 
erfolgen! Im konkreten Fall ist ein <i>&lt;include&gt;</i> folgendermassen zusammengesetzt:
</p>

<pre style="background='silver';">
///&lt;include file='dateipfad\dateiname' path='tagpfad[@name="id"]' /&gt;
</pre>

<p>
Ein konkretes Beispiel k&ouml;nnte folgenderma&szlig;en aussehen:
</p>

<pre style="background='silver';">
///&lt;include file='doku\xml\Meineklassedoku.xml' path='Doku/MeineKlasse[@name="Foo"]/*' /&gt;
</pre>

<p>
Der <b>Pfad zur Datei</b> ist nicht gleich dem <b>Tagpfad</b>! Ersterer kann relativ oder absolut in der &uuml;blichen Notation 
f&uuml;r Dateisystempfade angegeben werden. Letzterer gibt das Elternelement der einzuf&uuml;genden Kommentare im eingebundenen 
XML-Dokument an, da in einem eingebundenen Dokument mehrere Texte f&uuml;r unterschiedliche Einbindestellen enthalten sein 
k&ouml;nnen. Bez&uuml;glich Feinheiten im Aufbau von XPaths sei an dieser Stelle auf die Dokumentation zum .NET Framework 
SDK verwiesen. F&uuml;r das Beispiel k&ouml;nnte also die Datei <i>Meineklassedoku.xml</i> wie folgt aufgebaut sein:
</p>

<pre style="background='silver';">
&lt;Doku&gt;
      &lt;MeineKlasse name="Foo"&gt;
       &lt;summary&gt;
        Hier steht der Text, der Foo erkl&auml;rt.
        &lt;/summary&gt;
      &lt;/MeineKlasse&gt;
      &lt;MeineKlasse name="Bar"&gt;
       &lt;summarys&gt;
        Und nun zu etwas v&ouml;llig anderem...
       &lt;/summary&gt;
      &lt;/MeineKlasse&gt;
&lt;/Doku&gt;
</pre>

<p>
In der daraus generierten XML-Datei steht dann der <i>&lt;summary&gt;</i>  Eintrag der unter der <i>id</i> mit Namen "Foo" 
gefunden wurde.
</p>
<p>
Die elf Formatierungs-Tags, ebenfalls in alphabetischer Reihenfolge:
</p>

<table cellspacing="2" width="90%">
<tr><th>Tag</th><th>Verwendung</th><th>Attribute</th></tr>
<tr><td valign="top">c</td><td valign="top">Text wird als einzeiliger Sourcecodeauszug formatiert</td><td valign="top">keine</td></tr>
<tr><td valign="top">code</td><td valign="top">F&uuml;r mehrzeilige Sourcecodeausz&uuml;ge</td><td valign="top">keine</td></tr>
<tr><td valign="top">description</td><td valign="top">Beschreibung</td><td valign="top">keine</td></tr>
<tr><td valign="top">item</td><td valign="top">Punkt in einer Liste</td><td valign="top">keine</td></tr>
<tr><td valign="top">list</td><td valign="top">Liste</td><td valign="top">type</td></tr>
<tr><td valign="top">listheader</td><td valign="top">Listenkopfzeile</td><td valign="top">keine</td></tr>
<tr><td valign="top">para</td><td valign="top">F&uuml;gt einen Absatz ein (wie &lt;p&gt; in HTML)</td><td valign="top">keine</td></tr>
<tr><td valign="top">paramref</td><td valign="top">Zeichnet einen Text als Parameter aus.</td><td valign="top">name *</td></tr>
<tr><td valign="top">see</td><td valign="top">F&uuml;gt einen Verweis innerhalb eines XML-Kommentars ein</td><td valign="top">cref *</td></tr>
<tr><td valign="top">term</td><td valign="top">Begriff, der durch &lt;description&gt; definiert wird</td><td valign="top">keine</td></tr>
<tr><td valign="top">value</td><td valign="top">Beschreibt eine Eigenschaft</td><td valign="top">keine</td></tr>
</table>

<p>
Diese Tags erkl&auml;ren sich eigentlich fast alle von selbst. Lediglich auf die Listen wollen wir n&auml;her eingehen, da daf&uuml;r
das Zusammenspiel mehrerer Tags n&ouml;tig ist. Es gibt f&uuml;r das Attribut 'type' drei zul&auml;ssige Werte: table, number, 
bullet. Damit wird das Aussehen der Liste bestimmt. Nun zu einem Beispiel das den Aufbau einer Liste verdeutlicht:
</p>

<pre style="background='silver';">
///&lt;list type ="bullet"&gt;
///&lt;listheader&gt;
///&lt;term&gt;Listentitel&lt;/term&gt;
///&lt;description&gt;Teil 2 des Titels&lt;/description&gt;
///&lt;/listheader&gt;
///&lt;item&gt;
///&lt;term&gt;Eintrag 1:&lt;/term&gt;
///&lt;description&gt;Beschreibung 1&lt;/description&gt;
///&lt;/item&gt;
///&lt;item&gt;
///&lt;term&gt;Eintrag 2:&lt;/term&gt;
///&lt;description&gt;Beschreibung 2&lt;/description&gt;
///&lt;/item&gt;
///&lt;/list&gt;
</pre>

<p>
Ok, noch einer: &lt;paramref&gt; kann auch in einer alternativen Form verwendet werden:
</p>

<pre style="background='silver';">
///&lt;paramref&gt;Foo&lt;/paramref&gt; macht 'bar'.
///oder so:
///Diese Funktion parst &lt;paramref="baz" /&gt; zur Weitergabe als Argument fuer &lt;c&gt;frobnicate(parsedBaz)&lt;/c&gt;.
</pre>

<p>
Um ein wenig mit XML-Kommentaren und ihrer Umsetzung in HTML(-Help) zu experimentieren gibt es von Lutz Roeder das Tool 'Documentor', 
das XML-Kommentare interaktiv in das entsprechende HTML umsetzt:
</p>

<IMG SRC="Bilder/200207/20020730_1.png" width="500" height="600" alt="" border="0">

<p>
Die so erzeugten Kommentare k&ouml;nnen &uuml;ber die Zwischenablage in den Quelltext &uuml;bernommen werden. Dieses Tool findet 
sich unter dem entsprechenden Link am Ende des Artikels.
</p>

<h2>Und wo bleibt die Doku?</h2>
<p>
Der C# Compiler selbst hat eine Option <i>'/doc:outputfile'</i>. Diese Option sorgt lediglich daf&uuml;r da&szlig; die 
XML-Kommentare in eine XML-Datei namens <i>outputfile</i> extrahiert werden. Ebenso k&ouml;nnen wir in <b>Visual Studio .net</b> die 
Dokumentation extrahieren lassen. Dazu m&uuml;ssen wir die Eigenschaften f&uuml;r das Projekt aktivieren, in den 
Konfigurationsdialog wechseln, die <i>'build'</i>-Option w&auml;hlen und die Eigenschaft <i>'XML-Dokumentationsdatei'</i> auf den 
gew&uuml;nschten relativen Pfad setzen.
</p>
<p>
Wir wollen aber eine interaktiv als (HTML)Hilfedatei verf&uuml;gbare Dokumentation der Schnittstellen. Was also tun?
</p>
<p>
Man kann sich nun entweder selbst ein Tool schreiben das die notwendige Umwandlung vornimmt (vorausgesetzt man ist in XML/XSLT 
entsprechend versiert und hat spezielle Anforderungen an die erzeugte Dokumentation), auf das im unten angef&uuml;hrten MSDN-Artikel 
vorgestellte Tool zur&uuml;ckgreifen oder <i>NDoc</i>, ein Open Source Tool zur Dokumentationsgenerierung analog zu JDoc f&uuml;r 
Java, verwenden.
</p>
<p>
Falls die Open Source IDE <i>#develop</i> verwendet wird, ist <i>NDoc</i> bereits integriert. Zur Erstellung der HTML-Dokumentation 
mu&szlig; hier bei den Projektoptionen die Option <i>XML-Doku generieren</i> auf dem zweiten Tab aktiviert werden und zur Erstellung der 
eigentlichen Dokumentation aus dem Kontext- oder Compiler-men&uuml; der Punkt <i>'Dokumentation generieren'</i> ausgew&auml;hlt 
werden.
</p>

<IMG SRC="Bilder/200207/20020730_2.png" width="504" height="664" alt="" border="0">

<p>
NDoc ist sowohl innerhalb von #develop wie auch in der eigenst&auml;ndigen Version mit einer graphischen Benutzeroberfl&auml;che 
versehen.<b> Will man allerdings HTML Help Dateien generieren, so mu&szlig; das entsprechende SDK von Microsoft installiert sein</b>.
</p>


<h2>Schlu&szlig;bemerkung</h2>
<p>
Na, ist doch nicht so schwierig, oder? Wer seine Kommentare in XML einf&uuml;gt spart sich viel l&auml;stige Dokumentationsarbeit 
im Nachhinein. Diese Zeit kann man dann f&uuml;r neue coole Projekte, Urlaub oder auch Beschwerden &uuml;ber undokumentierte APIs 
in den Projekten anderer nutzen.
</p><h2>Verwandte Artikel</h2>
<p>
<a href="20000713.htm">A Brief History of C#</a><br>
<a href="20001117.htm">Einfaches XML-Auslesen in .NET</a><br>
<a href="20020617.htm">Erstellen von HTML Help Dateien</a><br>
<a href="20020116.htm">XML-Daten verarbeiten mit XSLT</a><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eaisto%2Ecom%2Froeder%2Fdotnet%2F">Documentor for .NET (Lutz Roeder)</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2Fdefault%2Easp%3Furl%3D%2Flibrary%2Fen%2Dus%2Fhtmlhelp%2Fhtml%2FhwMicrosoftHTMLHelpDownloads%2Easp">Microsoft HTML Help Downloads</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fndoc%2Esourceforge%2Enet%2F">Ndoc Homepage</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eicsharpcode%2Enet%2FOpenSource%2FSD%2F">SharpDevelop (#develop)</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eicsharpcode%2Enet%2FTechNotes%2F">Tech Note: The fine Art of Commenting</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Fmsdnmag%2Fissues%2F02%2F06%2FXMLC%2Fxmlc%2Easp">XML Comments Let You Build Documentation Directly From Your Visual Studio .NET Source Files</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20020730" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="C# XML-Kommentare &mdash; Dokumentation von selbst"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20020730.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Bernhard Spuida"><input type="hidden" name="AuthorEmail" value="bernhard@icsharpcode.net"><input type="hidden" name="Artikel" value="20020730"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20020730.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
