<HTML>
<HEAD>
<TITLE>Stored Procedures 101 in ADO.NET</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Auf Stored Procedures mu&szlig; in ADO.NET nicht verzichtet werden. Bis auf die Anpassungen f&uuml;r den ADO.NET Code hat sich eigentlich nichts ver&auml;ndert - und das sehen wir uns heute an.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,ADO.NET,SqlCommand,SqlConnection,Parameters,CommandType,stored procedure,sp,.NET,SDK,sample,database,Datenbank">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Stored Procedures 101 in ADO.NET</H1>
<p>
Geschrieben von: <a href="../autoren/christianholm.htm">Christian Holm</a><br>
Kategorie: <a href="../kategorien/ADOdotNET.htm">ADO.NET</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20010626"></SCRIPT>
</p>
<p>
Manche (in grauer Vorzeit implementierte) Sachen funktionieren so gut, da&szlig; man sie auch weiterhin verwendet.
So auch Stored Procedures. Auf diese mu&szlig; n&auml;mlich in ADO.NET nicht verzichtet werden. Bis auf die 
Anpassungen f&uuml;r den ADO.NET Code hat sich eigentlich nichts ver&auml;ndert. Und diese &Auml;nderungen stellen
das heutige Artikelthema dar.
</p>

<p>
So allm&auml;hlich wird ADO.NET ganz stabil und man braucht die Stabilit&auml;t nicht mehr mit einem Kartenhaus zu
vergleichen. Aus diesem Grund ist es wieder mal Zeit einen ADO.NET Artikel zu schreiben, da
(anscheinend) keine &Auml;nderungen im Aufbau (Namespaces, Klassen) von ADO.NET mehr zu erwarten sind. Der 
heutige Artikel soll Ihnen den Umstieg zu ADO.NET etwas erleichtern, indem er L&ouml;sungen zu den wichtigsten
Aufgaben zeigt. Also z.B. das Zur&uuml;ckgeben von Recordsets oder die Verwendung von <i>Input</i> Parametern.
</p>

<p>
Es sei darauf hingewiesen, da&szlig; dieser Artikel nicht Grundlagen &uuml;ber Stored Procedures und Ihren 
Verwendungszweck erl&auml;utert, sondern wie schon eingangs erw&auml;hnt, einen leichteren Umstieg zu ADO.NET erm&ouml;glichen soll.
AspHeute bietet ausreichende Lekt&uuml;re &uuml;ber Stored Procedures, in der die Basics und die 
Performanceissues erkl&auml;rt werden.
</p>

<p>
Die Verwendung bzw. das Zugreifen auf Stored Procedures in ADO.NET ist eigentlich (relativ) einfach -  
leichter als ich mir vorgestellt habe. Nach den vielen &Auml;nderungen war dies schwer vorherzusehen. Also habe ich zwei 
Beispiele erstellt, die ich heute in diesem Artikel pr&auml;sentieren werde. 
</p>

<p>
Wie Sie ja wissen, bringt die Nutzung von Stored Procedures einiges an Vorteilen mit sich. Nat&uuml;rlich auch
im Hinblick auf die Performance von Datenbankoperationen, da diese bei Stored Procedures am Datenbankserver
ablaufen. Warscheinlich eines der auschlaggebenden Argumente f&uuml;r die Weiterverwendung dieser.
Mit Stored Procedures k&ouml;nnen Sie die Abfragestatements einfach kapseln, Sicherheitsvorkehrungen
treffen und sie leichter optimieren.
</p>

<p>
Auch die Einbindung in eine ASP bzw. ASP.NET Seite gestaltet sich wesentlich einfacher als die herk&ouml;mmliche
Verwendung von SQL Statements im Code. Ihre
(hoch) optimierten Abfragestatements und sonstiger eingebetteter Code wird einfach durch den Aufruf
des Namens der Stored Procedures und &Uuml;bergabe gegebenenfalls vorhandener Parameter ausgef&uuml;hrt.
</p>

<p>
Passend f&uuml;r ADO.NET m&uuml;ssen Sie sich hier nat&uuml;rlich auf die <i>Parameters</i> Collection des 
ADO.NET SqlCommand Objektes beziehen. Mit dieser lassen sich Input-, Output-Parameter, etc.
nat&uuml;rlich viel leichter angeben und andererseits noch mehr Performance aus Ihrem Code herausquetschen - 
was einem halt immer so von den Anbietern einer neueren Version suggeriert wird.
</p>

<p>
Im ersten Beispiel rufen wir eine bereits in der Northwind SQL-Datenbank vorhandene Stored 
Procedure (<b>Ten Most Expensive Products</b>, was f&uuml;r ein Zufall) auf. Um dies zu erreichen legen 
wir den <i>CommandType</i> des <i>SqlCommand</i> Objektes als <i>StoredProcedure</i> fest. Das nun folgende 
Beispiel (<b>RetRS.aspx</b>) zeigt den einfachen Aufruf einer Stored Procedure und die nachfolgende
Ausgabe der Ergebnisrecordsets:
</p>

<pre style="background='silver';">
&lt;%@Page Language="C#" %&gt;
&lt;%@Import Namespace="System.Data" %&gt;
&lt;%@Import Namespace="System.Data.SqlClient" %&gt;
&lt;%

string strConn ="server=(local)\\NetSDK;database=northwind;Trusted_Connection=yes";
SqlConnection MyNWConn = new SqlConnection(strConn);
SqlCommand TenMostExpCmd = new SqlCommand("Ten Most Expensive Products",MyNWConn);
TenMostExpCmd.CommandType = CommandType.StoredProcedure;

MyNWConn.Open();

SqlDataReader MySqlReader = TenMostExpCmd.ExecuteReader();
</pre>

<p>
Wie bei allen ASP.NET Seiten sind zuerst immer die Directives anzugeben. Hier legen wir
mit <i>@Page</i> die verwendete Sprache fest, und danach sind mit <i>@Import</i> die ben&ouml;tigten 
Namespaces aus dem .NET Framework einzubinden.
Hier ist die Namens&auml;nderung im Gegensatz zur Beta 1 des .NET Frameworks zu beachten.
</p>

<p>
Nach der Festlegung des Connectionstrings und Erstellung einer neuen Verbindung zur Northwind
SQL-Datenbank k&ouml;nnen wir dann den Namen der zu verwendenden Stored Procedure und das SqlConnection 
Objekt dem SqlCommand Objekt &uuml;bergeben. Wie schon erw&auml;hnt, setzten wir den CommandType des SqlCommand Objektes 
auf <i>StoredProcedure</i>. Danach wird die Verbindung ge&ouml;ffnet und ein neues Objekt f&uuml;r den SqlDataReader 
instanziert.
</p>

<pre style="background='silver';">
  Response.Write("&lt;table cellspacing=\"2\" cellpadding=\"2\" border=\"2\"&gt;");
  Response.Write("&lt;th&gt;" + MySqlReader.GetName(0) + "&lt;/th&gt;&lt;th&gt;" _
  		+ MySqlReader.GetName(1) + "&lt;/th&gt;");
        
  while (MySqlReader.Read())
  {
    Response.Write("&lt;tr&gt;");
    Response.Write("&lt;td&gt;" + MySqlReader.GetString(0) + "&lt;/td&gt;");
    Response.Write("&lt;td&gt;" + MySqlReader.GetDecimal(1) + "&lt;/td&gt;");
    Response.Write("&lt;/tr&gt;");
  }
  Response.Write("&lt;/table&gt;");

  MySqlReader.Close();
  MyNWConn.Close();
%&gt;
</pre>

<p>
Der restliche Code ist eigentlich nur Formsache, d.h. er tr&auml;gt wesentlich dazu bei, wie die Daten 
ausgegeben werden. Da ich einen SqlDataReader verwendet habe, ist die Sache wortw&ouml;rtlich
straight forward. Das soll nicht nur simpel hei&szlig;en, sondern auch, da&szlig; der Output Stream auch nur 
read only und forward ist. Ergo nix mit Datenmanipulation. Wenn dies jedoch erforderlich w&auml;re,
w&uuml;rde ich auch meine Daten zuerst "binden" (<i>.Bind()</i>) und dann einem DataGrid zuweisen.
</p>

<p>
Was trotz aller Schnelle noch zu erw&auml;hnen ist, ist die richtige Zuweisung der Datentypen bei der 
Gewinnung der einzelnen Felder der Recordsets (Get<i>DatenTyp</i> Methode):
</p>

<pre style="background='silver';">
    Response.Write("&lt;td&gt;" + <b>MySqlReader.GetString(0)</b> + "&lt;/td&gt;");
    Response.Write("&lt;td&gt;" + <b>MySqlReader.GetDecimal(1)</b> + "&lt;/td&gt;");
</pre>

<p>
Da es den Datentyp mit der Bezeichnung <i>Money</i> nur mehr in SQL gibt, tritt hier <i>Decimal</i> 
in den Vordergrund.
</p>

<p>
Da dies alles ist, was der Code imstande ist zu produzieren (au&szlig;er Exceptions vielleicht),
k&ouml;nnen wir uns das Ergebnis nach der erfolgreichen Ausf&uuml;hrung der .aspx Seite in einem Webbrowser 
ansehen:
</p>

<IMG SRC="Bilder/200106/20010626_1.png" width="332" height="461" alt="" border="0">

<p>
Ein bischen aufwendiger ist das n&auml;chste Beispiel (<b>InputParam.aspx</b>), das wie der Name schon sagt
sich Input Parameters bedient. &Auml;hnlich wie bei Methoden bzw. Funktionen in der VB Welt k&ouml;nnen Sie hier
Werte &uuml;bergeben, die das zur&uuml;ckgelieferte Resultat einer Stored Procedure beeinflu&szlig;en.
Kurze Rede, langes Beispiel:
</p>

<pre style="background='silver';">
&lt;%@Page Language="C#" %&gt;
&lt;%@Import Namespace="System.Data" %&gt;
&lt;%@Import Namespace="System.Data.SqlClient" %&gt;
&lt;%
string strConn ="server=(local)\\NetSDK;database=northwind;Trusted_Connection=yes";
SqlConnection MyNWConn = new SqlConnection(strConn);
SqlCommand SqlCmd = new SqlCommand("SalesByCategory",MyNWConn);
SqlCmd.CommandType = CommandType.StoredProcedure;
SqlParameter MyParam = SqlCmd.Parameters.Add("@CategoryName", SqlDbType.NVarChar, 15);
MyParam.Value = "Seafood";

MyNWConn.Open();
SqlDataReader MySqlReader = SqlCmd.ExecuteReader();

Response.Write("&lt;table cellspacing=\"2\" cellpadding=\"2\" border=\"2\"&gt;");
Response.Write("&lt;th&gt;" + MySqlReader.GetName(0) + "&lt;/th&gt;&lt;th&gt;" + MySqlReader.GetName(1) + "&lt;/th&gt;");
while (MySqlReader.Read())
{
    Response.Write("&lt;tr&gt;");
    Response.Write("&lt;td&gt;" + MySqlReader.GetString(0) + "&lt;/td&gt;");
    Response.Write("&lt;td&gt;" + MySqlReader.GetDecimal(1) + "&lt;/td&gt;");
    Response.Write("&lt;/tr&gt;");
}
Response.Write("&lt;/table&gt;");

MySqlReader.Close();
MyNWConn.Close();
%&gt;
</pre>

<p>
Abgesehen von der Verwendung einer anderen Stored Procedure (<b>SalesByCategory</b>) und des &auml;hnlichen
Codes zum vorigen Beispiel, sind hier folgende Zeilen interessant:
</p>

<pre style="background='silver';">
SqlParameter MyParam = SqlCmd.Parameters.Add("@CategoryName", SqlDbType.NVarChar, 15);
MyParam.Value = "Seafood";
</pre>

<p>
Wie in diesem Beispiel gezeigt wird, k&ouml;nnen Sie nun durch die Setzung der CommandType Property auf
<i>StoredProcedure</i> auf die zur Verf&uuml;gung gestellte <i>Parameters</i> Collection zugreifen.
Hier f&uuml;gen wir einen neuen Parameter (<i>MyParameter</i>) dem SqlCommand Objekt hinzu. Dieser bezieht
sich auf die Tabellenspalte <i>CategoryName</i> und ist vom Enumtyp <i>NVarChar</i>, sowie von der L&auml;nge 
15. Was noch fehlt ist nat&uuml;rlich der Wert, den der Parameter haben soll. Dies erreichen wir indem wir
die <i>Value</i> Property auf den gew&uuml;nschten Wert setzen (hier: <i>Seafood</i>).
</p>

<p>
Der nun folgende Screenshot pr&auml;sentiert das Ergebnis der erfolgreichen Ausf&uuml;hrung der ASP.NET Seite:
</p>

<IMG SRC="Bilder/200106/20010626_2.png" width="328" height="527" alt="" border="0">

<h2>Schlu&szlig;bemerkung</h2>
<p>
Dieser Artikel sollte Ihnen einen schnellen &Uuml;berblick &uuml;ber die wichtigsten &Auml;nderungen f&uuml;r Stored Procedures
gegen&uuml;ber dem old-fashioned ASP geben, damit Ihre geliebten Stored Procedures auch in Zukunft weiter existieren k&ouml;nnen.
Da sich seit der Beta 2 des .NET Frameworks die Bezeichnungen gefestigt haben und sich bis zum Release
der Erstversion (eigentlich) nichts mehr &auml;ndern sollte, macht es jetzt um so mehr Sinn sich mit dieser
neuen und sehr umfangreichen Materie auseinanderzusetzen.
</p>
<h2>Download des Codes</h2>
<p><a href="../Code/20010626.zip">Klicken Sie hier</a>, um den Download zu starten.</p>
<h2>Verwandte Artikel</h2>
<p>
<a href="20001106.htm">Datenaufbereitung in ADO.NET</a><br>
<a href="20001102.htm">Datenbankzugriff mittels ADO.NET</a><br>
<a href="20020206.htm">Der ODBC .NET Data Provider</a><br>
<a href="20011031.htm">Gegengifte f&uuml;r SQL Injection</a><br>
<a href="20011206.htm">Performancemessungen in .NET</a><br>
<a href="20010326.htm">Records z&auml;hlen mit Stored Procedures</a><br>
<a href="20011203.htm">Verhinderung von SQL Injection Marke .NET</a><br>
<a href="20001031.htm">Was ist neu in ADO.NET</a><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Edotnetgerman%2Ecom%2F">DotNetGerman Diskussionslisten</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Eine weitere sehr hilfreiche Resource ist das <a href="http://aspxfiles.com/">deutsche ASP.NET Wiki</a>,
das als zentrale Anlaufstelle f&uuml;r Tips, Tricks, Know How und alles N&uuml;tzliche was man in seinem Alltag als 
(ASP).NET-Entwickler so braucht und entdeckt gedacht ist. 
</p>

<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20010626" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Stored Procedures 101 in ADO.NET"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20010626.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Christian Holm"><input type="hidden" name="AuthorEmail" value="office@holmcs.com"><input type="hidden" name="Artikel" value="20010626"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20010626.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
