<HTML>
<HEAD>
<TITLE>Dateiupload mit ASP.NET</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="In diesem Artikel zeigt der Autor, wie man unter ASP.NET eine Datei auf den Webserver laden kann. Und zwar, ohne eine Komponente von einem Fremdhersteller zu kaufen.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,HtmlInputFile,Upload,Dateiupload,MemoryStream,Stream,SaveAs,PostedFile,FileName,ASP.NET,.NET,Framework,File Upload">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Dateiupload mit ASP.NET</H1>
<p>
Geschrieben von: <a href="../autoren/christophwille.htm">Christoph Wille</a><br>
Kategorie: <a href="../kategorien/ASPdotNET.htm">ASP.NET</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20000802"></SCRIPT>
</p>
<p>
Etwas das unter ASP ohne Fremdkomponente nicht vern&uuml;nftig m&ouml;glich war ist das Uploaden
von Dateien auf einen Webserver, obwohl die Verwendungsm&ouml;glichkeiten dieses Features
vom Content-Managementsystem bis zu einem Kostenvoranschlagsservice f&uuml;r &Uuml;bersetzungen
(basierend auf dem Inhalt von upgeloadeten Dateien) reichen kann. Nat&uuml;rlich sind das nur
zwei von vielen Anwendungsm&ouml;glichkeiten.
</p>
<p>
Wie gesagt, unter ASP ben&ouml;tigt man Fremdkomponenten, um mittels ASP Dateien am Webserver
entgegennehmen zu k&ouml;nnen. ASP.NET bietet diese Funktionalit&auml;t mit einer HTML Control names 
<i>HtmlInputFile</i>, die sich von der bereits bekannten <nobr><i>INPUT TYPE=FILE</i></nobr> 
im groben nur durch das <i>RUNAT=SERVER</i> Tag unterscheidet. Aber sie ist fixer Bestandteil
des Produkts, managed den Upload f&uuml;r Sie, und verh&auml;lt sich am Browser wie die normale Control
die Sie bereits kennen.
</p>
<p>
In diesem Artikel stelle ich zwei Anwendungsf&auml;lle des Dateiuploads vor:
</p>

<ul>
	<li>Upload in eine Datei
	<li>Upload und direkte Weiterverwendung der Daten
</ul>

<p>
Bei ersterem Ansatz handelt es sich um die einfachste L&ouml;sung, der zweite demonstriert ein
sehr flexibles Konzept wie man die Daten des Uploads selbst in Empfang nehmen und weiterverarbeiten
kann.
</p>
<p>
Voraussetzung um den Sourcecode dieses Artikels verwenden zu k&ouml;nnen ist eine Installation des <i>Microsoft .NET Framework SDK's</i> auf
einem Webserver. Weiters setze ich voraus, da&szlig; der Leser die Programmiersprache C# zu einem gewissen Grad beherrscht -
es finden sich etliche Artikel auf diesem Server, um das notwendige Wissen zu erlernen.
</p>

<h2>Upload in eine Datei</h2>
<p>
Sehen Sie sich den nachfolgenden Screenshot an - solche Beispiele d&uuml;rften Ihnen vom Dateiupload
unter ASP auch bereits bekannt sein.
</p>

<IMG SRC="Bilder/200008/20000802_1.png" width="620" height="388" border="0" alt="">

<p>
Obwohl es von "au&szlig;en" nicht viel anders aussieht, so passiert unter der Haube doch etwas deutlich
anderes als wir es von ASP gewohnt sind. Dazu werden wir jetzt den Sourcecode genauer unter die 
Lupe nehmen (<b>uploadNsave.aspx</b>):
</p>

<pre style="background='silver';">
&lt;% @Page Language=&quot;C#&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Dateiupload in ASP.NET&lt;/title&gt;
&lt;/head&gt;
&lt;body bgcolor=&quot;#ffffff&quot; style=&quot;font:8pt verdana;&quot;&gt;
&lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;
void btnUploadTheFile_Click(object Source, EventArgs evArgs) 
{
  string strFileNameOnServer = txtServername.Value;
  string strBaseLocation = &quot;c:\\temp\\&quot;;
  
  if (&quot;&quot; == strFileNameOnServer) 
  {
    txtOutput.InnerHtml = &quot;Fehler - es mu&szlig; ein Dateiname angegeben werden.&quot;;
    return;
  }

  if (null != uplTheFile.PostedFile) 
  {
    try 
    {
      uplTheFile.PostedFile.SaveAs(strBaseLocation+strFileNameOnServer);
      txtOutput.InnerHtml = &quot;Datei erfolgreich nach &lt;b&gt;&quot; + 
        strBaseLocation+strFileNameOnServer+&quot;&lt;/b&gt; upgeloadet&quot;;
    }
    catch (Exception e) 
    {
      txtOutput.InnerHtml = &quot;Fehler beim Speichern von &lt;b&gt;&quot; + 
        strBaseLocation+strFileNameOnServer+&quot;&lt;/b&gt;&lt;br&gt;&quot;+ e.ToString();
    }
  }
}
&lt;/script&gt;

&lt;table&gt;
&lt;form enctype=&quot;multipart/form-data&quot; runat=&quot;server&quot;&gt;
&lt;tr&gt;
  &lt;td&gt;Datei ausw&amp;auml;hlen:&lt;/td&gt;
  &lt;td&gt;&lt;input id=&quot;uplTheFile&quot; type=file runat=&quot;server&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td&gt;Name am Server:&lt;/td&gt;
  &lt;td&gt;&lt;input id=&quot;txtServername&quot; type=&quot;text&quot; runat=&quot;server&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;
  &lt;input type=button id=&quot;btnUploadTheFile&quot; value=&quot;Speichern&quot; 
                    OnServerClick=&quot;btnUploadTheFile_Click&quot; runat=&quot;server&quot;&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/form&gt;
&lt;/table&gt;
    
&lt;span id=txtOutput style=&quot;font: 8pt verdana;&quot; runat=&quot;server&quot; /&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>
Betrachten wir f&uuml;r den Anfang nur das Formular, das die Datei (und den Namen, den sie am Server
erhalten soll) an den Server schickt. Da wir gemischte Daten schicken, ist der <i>enctype</i> auf
<nobr><i>multipart/form-data</i></nobr> gesetzt. Das ist noch nichts Neues. Das Einzige, das auf ASP.NET 
hinweist ist da&szlig; das Form am Server ausgef&uuml;hrt wird (<i>RUNAT=SERVER</i>).
</p>
<p>
In diesem Formular verwende ich im Gegensatz zum Artikel 
<a href="20000728.htm">On-the-fly Generierung von Graphiken</a> keine Web Controls,
sondern HTML Controls - deswegen sieht es auch sehr vertraut aus. Allerdings w&uuml;rde man unter
ASP sicher nicht das finden:
</p>

<pre style="background='silver';">
&lt;input type=button id=&quot;btnUploadTheFile&quot; value=&quot;Speichern&quot; 
   OnServerClick=&quot;btnUploadTheFile_Click&quot; runat=&quot;server&quot;&gt;
</pre>

<p>
Der Klick auf den Button l&ouml;st am Server ein Event aus, das in der Funktion <i>btnUploadTheFileFile_Click</i>
abgehandelt wird. Und somit sind wir beim Code, der notwendig ist, um eine Datei am Server
erfolgreich abzuspeichern:
</p>

<pre style="background='silver'";>
if (null != uplTheFile.PostedFile) 
{
  try 
  {
    uplTheFile.PostedFile.SaveAs("c:\\temp\\file.bin");
    txtOutput.InnerHtml = &quot;Datei erfolgreich upgeloadet&quot;;
  }
  catch (Exception e) 
  {
    txtOutput.InnerHtml = &quot;Fehler beim Speichern&lt;br&gt;&quot;+ e.ToString();
  }
}
</pre>

<p>
Das ist zwar nicht exakt der Sourcecode aus dem Beispiel, allerdings fehlt nur das "Rundherum"
f&uuml;r die Namensvergabe am Server - der Fileupload funktioniert hier ebenso. Also was passiert?
Die <i>if</i> Abfrage &uuml;berpr&uuml;ft, ob eine Datei gepostet wurde, indem sie die Eigenschaft <i>PostedFile</i>
gegen <i>null</i> vergleicht. Wird eine Datei upgeloadet, so h&auml;lt diese Eigenschaft eine g&uuml;ltige Referenz
auf ein Objekt vom Typ <i>HttpPostedFile</i>, und ist somit verschieden von <i>null</i>.
</p>
<p>
Nach diesem Sicherheitscheck bleibt uns "nur noch" die Datei zu speichern - ein simpler Aufruf der
Funktion <i>SaveAs</i> auf dem Objekt <i>HttpPostedFile</i> erledigt alles f&uuml;r uns. Sollte etwas schiefgehen,
wird unser Code dar&uuml;ber mit einer Exception benachrichtigt. So einfach ist es in ASP.NET eine Datei
auf den Webserver zu laden.
</p>
<p>
Der Code im Beispiel selbst differiert nur dahingehend, da&szlig; die Datei einen benutzergew&auml;hlten Namen
erhalten kann. Dadurch ist er zwar etwas l&auml;nger, aber bereits sehr flexibel. Der Weiterverwendung
und Erweiterung in eigenen Projekten steht nichts im Wege.
</p>

<h2>Upload und direkte Weiterverwendung der Daten</h2>
<p>
So nett und sch&ouml;n das einfache Speichern der upgeloadeten Datei in eine Datei am Server
auch sein kein, so oft m&ouml;chte man mit den upgeloadeten Daten (den Bits) sofort wieder
weiterarbeiten - ohne den Umweg in eine Datei. Anwendungsf&auml;lle w&auml;ren etwa die Daten in 
die Datenbank zu speichern, die Daten zu parsen, oder irgendeine andere Bearbeitung durchzuf&uuml;hren. 
</p>
<p>
Auch in diesem Fall l&auml;&szlig;t uns ASP.NET und das .NET Framework nicht im Stich. Anstatt die Kontrolle
mit der <i>SaveAs</i> Funktion aus der Hand zu geben, kann man direkten Zugriff auf den Stream der
upgeloadeten Daten bekommen und mit diesen sofort weiterarbeiten - w&auml;hrend der Upload passiert.
</p>
<p>
Das Beispiel, das ich zu Demonstrationszwecken gebastelt habe, erf&uuml;llt derzeit nur einen
Zweck: die upgeloadeten Daten werden aus dem Stream ausgelesen und in einer Stringvariablen 
zwischengespeichert - um dann einfach an den Client zur&uuml;ckgeschickt zu werden. F&uuml;r Textuploads
mag das bereits sinnvoll sein, bei bin&auml;ren Uploads (Bilder zum Beispiel) ist der Output nicht
gerade &uuml;berw&auml;ltigend:
</p>

<IMG SRC="Bilder/200008/20000802_2.png" width="620" height="388" border="0" alt="">

<p>
Der vorige Screenshot zeigt, da&szlig; mein Sourcecode (<b>uploadNdump.aspx</b>) auch mit bin&auml;ren 
Daten korrekt umgehen kann. Dies erreicht ich durch eine Zwangsumkonvertierung auf ASCII.
Die Details dazu k&ouml;nnen Sie dem Sourcecode und der folgenden Beschreibung entnehmen.
</p>

<pre style="background='silver';">
&lt;% @Page Language=&quot;C#&quot; %&gt;
&lt;% @Import Namespace=&quot;System.IO&quot; %&gt;
&lt;% @Import Namespace=&quot;System.Text&quot; %&gt;
&lt;html&gt;
&lt;head&gt;
  &lt;title&gt;Dateiupload in ASP.NET&lt;/title&gt;
&lt;/head&gt;
&lt;body bgcolor=&quot;#ffffff&quot; style=&quot;font:8pt verdana;&quot;&gt;
&lt;script language=&quot;C#&quot; runat=&quot;server&quot;&gt;
void btnUploadTheFile_Click(object Source, EventArgs evArgs) 
{
  if (null != uplTheFile.PostedFile) 
  {
    try 
    {
      const int BUFFER_SIZE = 255;
      int nBytesRead = 0;
      Byte[] Buffer = new Byte[BUFFER_SIZE];
      StringBuilder strUploadedContent = new StringBuilder(&quot;&quot;);
      
      Stream theStream = uplTheFile.PostedFile.InputStream;
      nBytesRead = theStream.Read(Buffer, 0, BUFFER_SIZE);
      
      while (0 != nBytesRead)
      {
        strUploadedContent.Append(
                Encoding.ASCII.GetString(Buffer,0,nBytesRead));
        nBytesRead = theStream.Read(Buffer,0,BUFFER_SIZE);
      }
      
      txtOutput.InnerHtml = strUploadedContent.ToString();
    }
    catch (Exception e) 
    {
      txtOutput.InnerHtml = &quot;Fehler beim Speichern von &lt;b&gt;&quot; + 
        uplTheFile.PostedFile.FileName + &quot;&lt;/b&gt;&lt;br&gt;&quot;+ e.ToString();
    }
  }
}
&lt;/script&gt;

&lt;table&gt;
&lt;form enctype=&quot;multipart/form-data&quot; runat=&quot;server&quot;&gt;
&lt;tr&gt;
  &lt;td&gt;Datei ausw&amp;auml;hlen:&lt;/td&gt;
  &lt;td&gt;&lt;input id=&quot;uplTheFile&quot; type=file runat=&quot;server&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;
  &lt;input type=button id=&quot;btnUploadTheFile&quot; value=&quot;Speichern&quot; 
                    OnServerClick=&quot;btnUploadTheFile_Click&quot; runat=&quot;server&quot;&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/form&gt;
&lt;/table&gt;
    
&lt;span id=txtOutput style=&quot;font: 8pt verdana;&quot; runat=&quot;server&quot; /&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>
Der Formularteil des Scripts ist bereits aus dem vorigen Listing bekannt, einzig und allein das Feld
f&uuml;r die Namensgebung der Datei am Server fehlt - man braucht es nicht mehr. Was sind nun aber
die &Auml;nderungen am Code f&uuml;r den Upload selbst? Im Grunde ist es nur dieser Part:
</p>

<pre style="background='silver';">
const int BUFFER_SIZE = 255;
int nBytesRead = 0;
Byte[] Buffer = new Byte[BUFFER_SIZE];
StringBuilder strUploadedContent = new StringBuilder(&quot;&quot;);

Stream theStream = uplTheFile.PostedFile.InputStream;
nBytesRead = theStream.Read(Buffer, 0, BUFFER_SIZE);

while (0 != nBytesRead)
{
  strUploadedContent.Append(
          Encoding.ASCII.GetString(Buffer,0,nBytesRead));
  nBytesRead = theStream.Read(Buffer,0,BUFFER_SIZE);
}
</pre>

<p>
Zuerst definiere ich eine Konstante, und instanziere darauffolgend drei Variablen, die in der Bearbeitung
der Streamdaten ben&ouml;tigt werden: eine Variable, die die Anzahl der gelesenen Bytes speichert, der
Puffer f&uuml;r die gelesenen Daten, und der StringBuilder, der dazu verwendet wird, um die auf ASCII
konvertierten eingelesenen Streamdaten zu speichern.
</p>
<p>
Und dann beginnt die Action - zuerst hole ich mir eine Referenz auf den <i>Stream</i>, der &uuml;ber das
Object <i>HttpPostedFile</i> zur Verf&uuml;gung gestellt wird (dieses wiederum &uuml;ber die Eigenschaft <i>PostedFile</i>
des <i>HtmlInputFile</i> Objects). Dadurch erspare ich mir weitere Zugriffe auf Eigenschaften und
fremde Objekte, die nur die Rechenzeit verl&auml;ngern w&uuml;rden.
</p>
<p>
Dann lese ich die ersten Daten ein, und steige damit in die <i>while</i>
Schleife ein. Dort wird der Puffer auf ASCII konvertiert, und die n&auml;chsten Daten eingelesen. Die
<i>while</i> Schleife wird dann abgebrochen, wenn keine Daten mehr am Server angekommen sind.
</p>
<p>
Ist die <i>while</i> Schleife beendet, habe ich die Daten als String zur Weiterverarbeitung in der Hand -
anstatt sie zur&uuml;ck an den Client zu schicken, k&ouml;nnte ich auch den String parsen - oder in eine 
Datenbank schreiben. Der Anwendungsfall bestimmt die Weiterverwendung.
</p>
<p>
&Uuml;brigens: wenn man die unmodifizierten Bin&auml;rdaten verwenden m&ouml;chte, dann
sollte man die Konvertierung auf ASCII unterlassen, und je nach Bedarf den richtigen
"Zwischenspeicher" verwenden - ein gro&szlig;es Bytearray, einen MemoryStream oder eigene Datenstrukturen.
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
In diesem Artikel habe ich Ihnen zwei Methoden des Dateiuploads vorgestellt: das Speichern der
upgeloadeten Datei am Server mit Hilfe der <i>SaveAs</i> Methode, als auch das direkte Auslesen
der Daten mit Hilfe des <i>Stream</i> Objekts. Die letztere Methode wird dann zum Einsatz kommen,
wenn man direkt mit den Daten der Datei weiterarbeiten m&ouml;chte, ohne vorher den Umweg &uuml;ber eine
physikalische Datei am Server zu gehen.
</p>
<h2>Download des Codes</h2>
<p><a href="../Code/20000802.zip">Klicken Sie hier</a>, um den Download zu starten.</p>
<h2>Verwandte Artikel</h2>
<p>
<a href="20010510.htm">Beliebige Anzahl von Dateien uploaden</a><br>
<a href="19990812.htm">Dateien mit dem Browser auf Webserver laden</a><br>
<a href="20010202.htm">Dateiupload mit ASP und WSC</a><br>
<a href="20010124.htm">Dateiupload mit ASP.NET und VB.NET</a><br>
<a href="20000724.htm">Exception Handling in C#</a><br>
<a href="20000714.htm">Kontrollstatements in C#</a><br>
<a href="20000728.htm">On-the-fly Generierung von Graphiken</a><br>
<a href="20000717.htm">Schleifenbefehle in C#</a><br>
<a href="20001030.htm">Uploaden einer beliebigen Datei in eine Datenbank</a><br>
<a href="20040303.htm">Vergleich von DataGrid, DataList und Repeater-Control - was verwende ich wann?</a><br>
<a href="20000731.htm">Verwendung von Arrays in C#</a><br>
<a href="20010507.htm">Web-basiertes Dateimanagement mit dem ASP FileMan</a><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Edotnetgerman%2Ecom%2Flinks%2Fdl%5Faspnet%2Easp">ASP.NET Download</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Edotnetgerman%2Ecom%2Flisten%2FaspDEdotnet%2Easp">Die aspDEdotnet Liste</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Eine weitere sehr hilfreiche Resource ist das <a href="http://aspxfiles.com/">deutsche ASP.NET Wiki</a>,
das als zentrale Anlaufstelle f&uuml;r Tips, Tricks, Know How und alles N&uuml;tzliche was man in seinem Alltag als 
(ASP).NET-Entwickler so braucht und entdeckt gedacht ist. 
</p>

<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20000802" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Dateiupload mit ASP.NET"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20000802.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Christoph Wille"><input type="hidden" name="AuthorEmail" value="christophw@alphasierrapapa.com"><input type="hidden" name="Artikel" value="20000802"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20000802.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
