<HTML>
<HEAD>
<TITLE>Thumbnailgenerierung in .NET</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Produktkataloge und Online-Bildergalerien haben (meist) eines gemeinsam: bevor man zum eigentlichen Detailbild gelangt, wird einem zuerst ein Vorschaubild, ein Thumbnail, pr&auml;sentiert. Heute sehen wir uns an, wie man mit .NET einen Thumbnail generiert">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Thumbnail,Vorschaubild,Preview,Teaser,GetThumbnail,GetThumbnailImage,Image,OutputStream,Response,.NET">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Thumbnailgenerierung in .NET</H1>
<p>
Geschrieben von: <a href="../autoren/christophwille.htm">Christoph Wille</a><br>
Kategorie: <a href="../kategorien/ASPdotNET.htm">ASP.NET</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20020225"></SCRIPT>
</p>
<p>
Produktkataloge und Online-Bildergalerien haben (meist) eines gemeinsam: bevor man zum eigentlichen
Detailbild gelangt, wird einem zuerst ein Vorschaubild, ein Thumbnail, pr&auml;sentiert. Solange die Bilder
offline generiert werden, kann man auch die Thumbnails offline mitgenerieren - was aber, wenn die Bilder
am Server gewartet/erstellt werden, und man die Thumbnails dynamisch on the fly generieren soll?
</p>
<p>
Um die Spannung gleich abzubauen: die Thumbnailgenerierung unter .NET ist an sich ganz einfach - man 
mu&szlig; nur die <i>GetThumbnailImage</i> Methode der
<i>Image</i> Klasse aufrufen, und schon bekommt man automatisch das Thumbnail in der gew&uuml;nschten Gr&ouml;&szlig;e 
in die Hand gedr&uuml;ckt. Es ist zwar praktisch, da&szlig; es so einfach ist, hat aber den Nachteil, da&szlig; man bestimmte
Arbeiten dann immer wieder per Hand macht - &ouml;ffnen der Grafik, ermitteln der Skalierungverh&auml;ltnisse, etc. 
Warum das nicht alles in eine Klasse verpacken, und immer wieder verwerten?
</p>
<p>
Das war das Stichwort - Klasse. Unsere Klasse wird <i>Thumbnail</i> hei&szlig;en, und im Prinzip nur aus 
vielen polymorphen <i>GetThumbnail</i> Methoden bestehen (mehrere Methoden mit identem Namen aber
unterschiedlicher Parameterliste). Um die Wiederverwendbarkeit noch zu steigern, kompilieren wir
die Klasse in eine Assembly - damit kann ich auf die Klasse von jeder Programmiersprache aus 
zugreifen.
</p>
<p>
Damit zum Code (die Erkl&auml;rung folgt) in <b>Thumbnail.cs</b>, in der die gleichnamige Klasse implementiert ist:
</p>

<pre style="background='silver';">
using System;
using System.Drawing;

namespace AspHeute.ThumbsUp
{
  public class Thumbnail
  {
    public bool AbortThumbnailGeneration()
    {
      return false;
    }
    
    public Image GetThumbnail(string strFilename, int nScalePercentage)
    {
      Image img2Scale = Image.FromFile(strFilename);
      Image imgThumb = GetThumbnail(img2Scale, nScalePercentage);
      img2Scale.Dispose();  // cleanup
      return imgThumb;
    }
    
    public Image GetThumbnail(Image imgFullSize, int nScalePercentage)
    {
      if (nScalePercentage &lt; 1 || nScalePercentage &gt; 99)
        throw new ArgumentException("Scale percentage must be between 1 and 99");
      
      int nImageWidth = imgFullSize.Width;
      int nImageHeight = imgFullSize.Height;
      nImageWidth = (int)((double)nImageWidth * ((double)nScalePercentage/100.0));
      nImageHeight = (int)((double)nImageHeight * ((double)nScalePercentage/100.0));
      return GetThumbnail(imgFullSize, nImageWidth, nImageHeight);
    }
    
    public Image GetThumbnail(Image imgFullSize, int nWidth, int nHeight)
    {
      Image.GetThumbnailImageAbort cb = new Image.GetThumbnailImageAbort(AbortThumbnailGeneration);
      return imgFullSize.GetThumbnailImage(nWidth, nHeight, cb, IntPtr.Zero);
    }
  }
}
</pre>

<p>
Die drei Methoden namens <i>GetThumbnail</i> nehmen jeweils unterschiedliche Parameter entgegen. Die erste
erlaubt den Aufruf mittels Dateinamen und Skalierungsfaktor, und ruft nach &Ouml;ffnen des Bildes sein
Pendant mit <i>Image</i> in der Parameterliste auf. Diese Methode erledigt die Berechnung der Breite
und H&ouml;he des Thumbnails basierend auf dem Skalierungsfaktor, und gibt die Arbeit der Thumbnailgenerierung
an die letzte <i>GetThumbnail</i> Implementierung weiter. Die ruft dann <i>GetThumbnailImage</i> auf, und
liefert das <i>Image</i> an den jeweiligen Aufrufer zur&uuml;ck.
</p>
<p>
Auch wenn das auf den ersten Blick nach Overkill aussieht - ich kann ohne ein Image anzugreifen ein
skaliertes Thumbnail erstellen (Methode 1), von einem ge&ouml;ffneten Bild einen skalierten Thumbnail 
erstellen (Methode 2), sowie ein v&ouml;llig frei skaliertes Thumbnail erstellen (Methode 3).
</p>
<p>
F&uuml;r die Kompilierung der Assembly habe ich eine Batchdatei namens <b>build.bat</b> mitgegeben. Nach
erfolgreicher Kompilierung mu&szlig; die Assembly in das <b>bin</b> Verzeichnis kopiert werden, und dann kann
man sie in ASP.NET verwenden.
</p>
<p>
Die Verwendung der Klasse demonstriert <b>GenThumbnailPercent.aspx</b> - obwohl in C# erstellt,
kann man die Klasse dank Kompilierung in Assembly genauso in VB.NET verwenden.
</p>

<pre style="background='silver';">
&lt;% @Page Language="C#" %&gt;
&lt;%@ Import Namespace="AspHeute.ThumbsUp" %&gt;
&lt;%
string strImage = Server.MapPath("Pinzgauer.jpg");
int nPercentage = 40;
Thumbnail myThumb = new Thumbnail();
System.Drawing.Image imgThumb = myThumb.GetThumbnail(strImage, nPercentage);

Response.Clear();
Response.ContentType = "image/jpeg";
imgThumb.Save(Response.OutputStream, System.Drawing.Imaging.ImageFormat.Jpeg);
imgThumb.Dispose();
Response.End();
%&gt;
</pre>

<p>
Die <i>GetThumbnail</i> Methode wird hier mit Dateinamen und Prozentsatz der Skalierung aufgerufen.
Der zur&uuml;ckgelieferte Thumbnail wird direkt in den <i>OutputStream</i> des <i>Response</i> Objekts
geschrieben. Und um Resourcen zu schonen, disposen wir das Image sofort. Das Bild, das am Client
ankommt, sieht dann so aus:
</p>

<IMG SRC="Bilder/200202/20020225_1.jpg" width="231" height="200" alt="" border="0">

<h2>Skalieren mit vorgegebenen Seiten</h2>
<p>
Bilder werden auf Websites nicht nur prozentuell skaliert, sondern des &ouml;fteren mit einer fixen
Seitenl&auml;nge - entweder Breite oder H&ouml;he ist fix vorgegeben, die jeweils andere Seite soll im 
Verh&auml;ltnis skaliert werden. Um dies zu realisieren, habe ich zwei weitere polymorphe Methoden
in die Klasse eingebaut:
</p>

<pre style="background='silver';">
    public Image GetThumbnail(string strFilename, int nPixelSize, bool bPortrait)
    {
      Image img2Scale = Image.FromFile(strFilename);
      Image imgThumb = GetThumbnail(img2Scale, nPixelSize, bPortrait);
      img2Scale.Dispose();  // cleanup
      return imgThumb;      
    }
    
    public Image GetThumbnail(Image imgFullSize, int nPixelSize, bool bPortrait)
    {
      int nImageWidth = imgFullSize.Width;
      int nImageHeight = imgFullSize.Height;
      int nScalePercentage = 0;
      if (bPortrait)
      {
        nScalePercentage = (int)(nPixelSize * 100.0 / (double)nImageHeight);
        nImageWidth = (int)((double)nImageWidth * ((double)nScalePercentage/100.0));
        nImageHeight = nPixelSize;
      }
      else
      {
        nScalePercentage = (int)(nPixelSize * 100.0 / (double)nImageWidth);  
        nImageHeight = (int)((double)nImageHeight * ((double)nScalePercentage/100.0));
        nImageWidth = nPixelSize;
      }
      return GetThumbnail(imgFullSize, nImageWidth, nImageHeight);
    }
</pre>

<p>
Wird die Breite als fix angesehen, so ist das Bild im Landscape Modus, ist die H&ouml;he hingegen fix,
nennt sich das Portrait. Deshalb: ist der Parameter <b>bPortrait</b> true, dann ist die H&ouml;he fix, und umgekehrt
wenn <b>bPortrait</b> false ist, ist die Breite fix vorgegeben. Zusammen mit der Wunschl&auml;nge der
Seite rechnet man das Verh&auml;ltnis aus, und bestimmt die fehlende skalierte Seite. Und schon hat
man den skalierten Thumbnail.
</p>

<p>
Die Verwendung wird wieder in einem kleinen Beispiel demonstriert, <b>GenThumbnailPixel.aspx</b>:
</p>

<pre style="background='silver';">
&lt;% @Page Language="C#" %&gt;
&lt;%@ Import Namespace="AspHeute.ThumbsUp" %&gt;
&lt;%@ Import Namespace="System.Drawing" %&gt;
&lt;%@ Import Namespace="System.Drawing.Imaging" %&gt;
&lt;%
string strImage = Server.MapPath("Pinzgauer.jpg");
int nPixelSize = 150;
bool bPortrait = false;
Thumbnail myThumb = new Thumbnail();
System.Drawing.Image imgThumb = myThumb.GetThumbnail(strImage, nPixelSize, bPortrait);

Response.Clear();
Response.ContentType = "image/jpeg";
imgThumb.Save(Response.OutputStream, ImageFormat.Jpeg);
imgThumb.Dispose();
Response.End();
%&gt;
</pre>

<p>
Nat&uuml;rlich kann man die <i>Save</i> Methode von <i>Image</i> auch in eine Datei speichern lassen -
das ist speziell dann interessant, wenn man Thumbnails vorgeneriert, und nicht dynamisch pro User
erstellt. Solche Batchjobs sollte man aber besser auch als solche ablaufen lassen, und nicht in ASP.NET.
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
Das Erstellen von Thumbnails in .NET ist ein Kinderspiel - mit ein wenig Klasse kann man sogar noch
einiges an Produktivit&auml;t herausholen, wie dieser Artikel gezeigt hat.
</p>
<h2>Download des Codes</h2>
<p><a href="../Code/20020225.zip">Klicken Sie hier</a>, um den Download zu starten.</p>
<h2>Verwandte Artikel</h2>
<p>
<a href="20020702.htm">.NET Komponenten in COM+ Clients einsetzen</a><br>
<a href="20001130.htm">Bildinformationen selbst ermitteln</a><br>
<a href="20000929.htm">Dateien lesen in ASP.NET</a><br>
<a href="20001012.htm">Einf&uuml;hrung: C#-Klassen in ASP.NET</a><br>
<a href="20000728.htm">On-the-fly Generierung von Graphiken</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Eine weitere sehr hilfreiche Resource ist das <a href="http://aspxfiles.com/">deutsche ASP.NET Wiki</a>,
das als zentrale Anlaufstelle f&uuml;r Tips, Tricks, Know How und alles N&uuml;tzliche was man in seinem Alltag als 
(ASP).NET-Entwickler so braucht und entdeckt gedacht ist. 
</p>

<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20020225" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Thumbnailgenerierung in .NET"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20020225.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Christoph Wille"><input type="hidden" name="AuthorEmail" value="christophw@alphasierrapapa.com"><input type="hidden" name="Artikel" value="20020225"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20020225.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
