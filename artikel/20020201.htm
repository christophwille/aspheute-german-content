<HTML>
<HEAD>
<TITLE>Dateityp-Ermittlung in Managed C++</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Im gestrigen Artikel habe ich gezeigt, wie man mit Hilfe einer COM+ Komponente herausfinden kann, ob eine Datei eine Datei ist. Heute sehen wir uns die Thematik in .NET an, und machen gleich ein paar Aufw&auml;rm&uuml;bungen in Managed C++.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Managed C++,GC,Garbage Collector,__gc,__value,using,COM+,.NET,cl.exe,File.Exists,__nogc,Marshal,Unicode,GetFileType">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Dateityp-Ermittlung in Managed C++</H1>
<p>
Geschrieben von: <a href="../autoren/christophwille.htm">Christoph Wille</a><br>
Kategorie: <a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20020201"></SCRIPT>
</p>
<p>
Im gestrigen Artikel <a href="20020131.htm">Vorsicht Falle: Dateien, die keine sind</a> habe ich gezeigt, wie man
mit Hilfe einer in C++ geschriebenen COM+ Komponente herausfinden kann, ob es sich bei der Datei die
man verwenden m&ouml;chte um eine "echte" oder "nur" um Devices und Named Pipes handelt. Heute sehen wir uns
die Thematik in .NET an, und machen gleich ein paar Aufw&auml;rm&uuml;bungen in Managed C++.
</p>
<p>
Bevor wir zum harten Kern des Themas kommen, eine erfreuliche Nachricht vorweg: unter .NET liefert die
<i>File.Exists</i> Methode nur dann True, wenn es sich um eine Datei auf einem Laufwerk handelt - COM
Ports und andere Devices liefern False. Die Verwendung demonstriert das folgende Beispiel (<b>fileexists.aspx</b>):
</p>

<pre style="background='silver';">
&lt;%@ Page Language="C#" %&gt;
&lt;%@ Import Namespace="System.IO" %&gt;
&lt;script language="C#" runat="server"&gt;
void Page_Load(Object sender, EventArgs e) 
{
  bool bResult = File.Exists("c:\\COM1");
  idOutput.Text = bResult.ToString();
}
&lt;/script&gt; 
&lt;html&gt; 
&lt;body&gt; 
	&lt;asp:label id="idOutput" runat="server"/&gt;
&lt;/body&gt; 
&lt;/html&gt;
</pre>

<p>
Damit haben wir schon die halbe Miete - den zuverl&auml;ssigen Check, ob auf eine Datei lesend zugegriffen werden
kann. Will man eine neue Datei erstellen, dann hilft <i>File.Exists</i> keineswegs - weil die Datei sowohl
g&uuml;ltig als auch ung&uuml;ltig ein False retourliefern wird. Hier m&uuml;ssen wir uns etwas anderes ausdenken.
</p>

<h2>Plan B - Dateityp ermitteln</h2>
<p>
Man k&ouml;nnte die Komponente aus dem gestrigen Artikel <a href="20020131.htm">Vorsicht Falle: Dateien, die keine sind</a>
ja ohne weiteres nach Anleitung des Artikels <a href="20000828.htm">Verwenden von COM Komponenten in ASP.NET</a> mittels
eines RTCW (Runtime Callable Wrapper) einbinden. Die Sache hat einen Nachteil - man verliert f&uuml;r eine Komponente
mit so geringer Funktionalit&auml;t unsinnigerweise viel Performance.
</p>
<p>
Ergo werden wir die Komponente .NET-tauglich machen. Und was w&auml;re besser geeignet als Managed C++, wenn
der Compiler daf&uuml;r sogar gratis im .NET SDK mit dabei ist? Gestern konnten nur die Visual Studio 6
Besitzer die Komponente selbst kompilieren, heute kann es jeder der das SDK am Rechner hat!
</p>

<h2>Die Komponente</h2>
<p>
Aus Spa&szlig; an der Freude habe ich mich mit Managed C++ anhand dieses Projekts richtig zu besch&auml;ftigen
begonnen. Im Endeffekt hat das Umschreiben und Einlernen in Managed C++ weniger als eine Stunde ben&ouml;tigt,
und die Komponente ist sogar deutlich einfacher zu verwenden als zuvor. Beginnen wir in der Datei
<b>secenhance.cpp</b> (&uuml;brigens die einzige f&uuml;r das gesamte Komponentenprojekt!) ganz oben:
</p>

<pre style="background='silver';">
#include "windows.h"

#using &lt;mscorlib.dll&gt;
using namespace System;
using namespace System::Runtime::InteropServices;

namespace SecurityEnhance
{
__value public enum FileType {undefined=-1, unknown=0, disk=1, character=2, pipe=3};
</pre>

<p>
Wenn man fl&uuml;chtig genug hinsieht, s&auml;he das beinahe aus wie C# Code. Allerdings komme ich um das
<i>#include</i> f&uuml;r die Windowsfunktionen nicht herum, und ich mu&szlig; mich explizit darum k&uuml;mmern,
da&szlig; der Compiler die MetaData von .NET erh&auml;lt - mittels <i>#using</i> Statements. Ach ja, noch
ein kleiner Unterschied - anstatt des Punkts werden zwei Doppelpunkte eingesetzt (bei <i>System.Runtime.InteropServices</i>).
</p>
<p>
In der unmanaged C++ Komponente habe ich die (Datei)Typen mittels in <i>#define</i> Statements deklarierten
Konstanten zur&uuml;ckgeliefert, jetzt habe ich das auf eine <i>enum</i> umgebaut. Das coole an der Sache ist, da&szlig; wenn ich den Namespace <i>SecurityEnhance</i> in eine
Anwendung importiere, ist die Enum dort genauso verwendbar - keine <i>const</i> Statements mehr! Und typsicher
ist es so nebenbei auch noch.
</p>
<p>
Sehen wir uns nun die Klasse <i>FileUtilities</i> an:
</p>

<pre style="background='silver';">
__gc public class FileUtilities
{
public:
   FileUtilities(){}
     
public:
   FileType GetFileType(System::String *sFileName, System::Int32 *Win32ErrorCode)
   {
     wchar_t __nogc* pszFileName = static_cast&lt;wchar_t*&gt;
                         (Marshal::StringToHGlobalUni(sFileName).ToPointer());
     FileType theType = FileType::undefined;
     *Win32ErrorCode = 0;

     // open the file for generic reading
     HANDLE hFile = ::CreateFileW(pszFileName, 
                         GENERIC_READ,
                         FILE_SHARE_READ | FILE_SHARE_WRITE, 
                         NULL, 
                         OPEN_EXISTING, 
                         0, 
                         NULL );

     if (INVALID_HANDLE_VALUE == hFile)
     {
          DWORD dwError = ::GetLastError();
          *Win32ErrorCode = (long)dwError;
     }
     else
     {
          DWORD dwFileType = ::GetFileType(hFile);
          switch (dwFileType)
          {
          case FILE_TYPE_UNKNOWN: theType = FileType::unknown; break;
          case FILE_TYPE_DISK: theType = FileType::disk; break;
          case FILE_TYPE_CHAR: theType = FileType::character; break;
          case FILE_TYPE_PIPE: theType = FileType::pipe; break;
          default: theType = FileType::undefined;
          }
          ::CloseHandle(hFile);
     }
     Marshal::FreeHGlobal(pszFileName);
     return theType;
   }
};
</pre>
<p>
Alle Schl&uuml;sselw&ouml;rter in Managed C++ die f&uuml;r .NET neu eingef&uuml;hrt wurden, beginnen mit zwei Unterstrichen.
Ein <i>__value</i> aus der Enumdefinition bedeutet, da&szlig; es sich um einen Value-Type handelt. Das <i>__gc</i>
hingegen zeigt an, da&szlig; es sich um eine Garbage-Collected Klasse handelt. Somit ergibt sich irgendwie zwingend,
da&szlig; Variablen die mit <i>__nogc</i> verziert sind, nicht von .NET verwaltet werden.
</p>
<p>
Eine solche ist <i>pszFileName</i>. Diese brauche ich, weil ich mit der String Klasse aus .NET nicht direkt
in das WIN32 API hineingehen kann - zuerst mu&szlig; ich den String auf einen "normalen" Unicode String konvertieren
lassen, wobei mir die <i>Marshal</i> Klasse aus <i>System.Runtime.InteropServices</i> unter die Arme greift.
</p>
<p>
Nach dieser Konvertierung verwende ich im Prinzip den identen Sourcecode von gestern. Nur der R&uuml;ckgabewert
ist diesmal eine typsichere Enum, und der WIN32 Fehlercode kommt als per Rerferenz &uuml;bergebene Integer Variable zur&uuml;ck.
</p>
<p>
Kompiliert wird mittels <b>cl.exe</b>, ich habe entsprechende Batchdateien zur einfachen Verwendung mitgegeben.
&Uuml;brigens: die erzeugte Assembly kann man genauso in <i>ildasm.exe</i> betrachten wie C# Anwendungen auch:
</p>

<IMG SRC="Bilder/200202/20020201.png" width="532" height="483" alt="" border="0">

<h2>Einsatz der Komponente</h2>
<p>
Da wir eine .NET Assembly vor uns haben, darin eine richtige .NET Klasse plus Enumeration vorhanden ist,
stellt sich eine kleine Konsolenanwendung sehr einfach dar (<b>filetype.cs</b>):
</p>

<pre style="background='silver';">
// Kompilieren mit "csc filetype.cs /r:secenhance.dll"
using System;
using SecurityEnhance;

public class MainClass
{
public static void Main()
{
  FileUtilities fu = new FileUtilities();
  int Win32ErrorCode = 0;
  FileType f = fu.GetFileType("c:\\COM1", ref Win32ErrorCode);
  Console.WriteLine(f.ToString() + " " + Win32ErrorCode.ToString());
}
}
</pre>
<p>
Und schon wissen wir, da&szlig; obwohl <i>File.Exists</i> uns ein False liefert, es sich um eine Datei vom
Typ 3, also Character beziehungsweise Device handelt. Und auf sowas greift man nat&uuml;rlich nicht zu! Weder
lesend, noch schreibend.
</p>
<p>
Der Vollst&auml;ndigkeit halber nun noch das obige Beispiel als ASP.NET Script (<b>filetype.aspx</b>). Die Assembly mu&szlig;
man wie immer ins <i>bin</i> Verzeichnis kopieren:
</p>

<pre style="background='silver';">
&lt;%@ Page Language="C#" %&gt;
&lt;%@ Import Namespace="SecurityEnhance" %&gt;
&lt;script language="C#" runat="server"&gt;
void Page_Load(Object sender, EventArgs e) 
{
  FileUtilities fu = new FileUtilities();
  int Win32ErrorCode = 0;
  FileType f = fu.GetFileType("c:\\COM1", ref Win32ErrorCode);
  idOutput.Text = f.ToString() + " " + Win32ErrorCode.ToString();
}
&lt;/script&gt; 
&lt;html&gt; 
&lt;body&gt; 
	&lt;asp:label id="idOutput" runat="server"/&gt;
&lt;/body&gt; 
&lt;/html&gt;
</pre>

<h2>Schlu&szlig;bemerkung</h2>
<p>
In bestimmten F&auml;llen kann Managed C++ zum Retter in der Not werden - vor allem dann, wenn man eine
bestehende Applikation oder Teile davon .NET-tauglich machen m&ouml;chte. Mit C# h&auml;tte ich sicher deutlich
l&auml;nger gebraucht, den C++ Code zu portieren.
</p>
<h2>Download des Codes</h2>
<p><a href="../Code/20020201.zip">Klicken Sie hier</a>, um den Download zu starten.</p>
<h2>Verwandte Artikel</h2>
<p>
<a href="20020226.htm">Ein Touch-Utility in C#</a><br>
<a href="20000828.htm">Verwenden von COM Komponenten in ASP.NET</a><br>
<a href="20020131.htm">Vorsicht Falle: Dateien, die keine sind</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Eine weitere sehr hilfreiche Resource ist das <a href="http://aspxfiles.com/">deutsche ASP.NET Wiki</a>,
das als zentrale Anlaufstelle f&uuml;r Tips, Tricks, Know How und alles N&uuml;tzliche was man in seinem Alltag als 
(ASP).NET-Entwickler so braucht und entdeckt gedacht ist. 
</p>

<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20020201" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Dateityp-Ermittlung in Managed C++"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20020201.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Christoph Wille"><input type="hidden" name="AuthorEmail" value="christophw@alphasierrapapa.com"><input type="hidden" name="Artikel" value="20020201"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20020201.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
