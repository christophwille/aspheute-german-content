<HTML>
<HEAD>
<TITLE>Passw&ouml;rter speichern - aber richtig!</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="In sehr vielen - um nicht zu sagen fast allen - Webanwendungen werden Benutzerdaten verwaltet, vom Webforum bis hin zum Webshop. Diese enthalten den Usernamen als auch das Passwort  - als Plain Text. Eine Sicherheitsl&uuml;cke par excellence.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Sicherheit,.NET,C#,CSharp,C Sharp,Security,Passwort,Password,Salt,Hash,salted hash,RNGCryptoServiceProvider,random number,rnd">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Passw&ouml;rter speichern - aber richtig!</H1>
<p>
Geschrieben von: <a href="../autoren/christophwille.htm">Christoph Wille</a><br>
Kategorie: <a href="../kategorien/Sicherheit.htm">Sicherheit</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20040105"></SCRIPT>
</p>
<p>
In sehr vielen - um nicht zu sagen fast allen - Webanwendungen werden Benutzerdaten verwaltet, 
vom Webforum bis hin zum Webshop. Diese Benutzerdaten umfassen auch die Logininformationen der User, welche
neben dem Usernamen auch das Passwort enthalten - und das als Plain Text. Eine Sicherheitsl&uuml;cke par excellence.
</p>
<p>
Warum ist das eine Sicherheitsl&uuml;cke, wenn man den Usernamen und das Passwort als Plain Text speichert? Nun, stellen
Sie sich vor, ein Cracker verschafft sich durch etwaige Betriebssystem- bzw. Serversoftwarefehler Zugang zum System, und
kann die Benutzerdatenbank auslesen. Da er den Benutzernamen und das Passwort jedes beliebigen Users kennt, kann er
jetzt als "echter" User einloggen und mit dessen Berechtigungen machen was er m&ouml;chte - von der Bestellung im Webshop hin
zu Rufmord im Forum. Und Sie sind der Betreiber...
</p>
<p>
Wie kann man dieses Sicherheitsrisiko eliminieren? Nun, warum weit schweifen wenn es eine seit Jahrzehnten bekannte und 
bew&auml;hrte Methode zur sicheren Speicherung von Passw&ouml;rtern gibt: unter UNIX werden Passw&ouml;rter von Benutzern als sogenannter
"gesalteter Hash" gespeichert.
</p>

<h2>Was ist ein gesalteter Hash?</h2>
<p>
Ein Hash ist ein numerischer Wert fixer L&auml;nge der Daten beliebiger L&auml;nge eindeutig identifiziert. Ein Beispiel f&uuml;r einen
Hashalgorithmus ist SHA1, der bereits <a href="20010330.htm">Thema eines ASP Artikels</a> war. Der geneigte
Leser k&ouml;nnte nun einwenden, da&szlig; das Speichern des Hashes anstatt des Passworts ausreichen w&uuml;rde - warum aber stimmt das nicht? 
</p>
<p>
Der Grund hierf&uuml;r ist, da&szlig; gegen gehashte Passw&ouml;rter - ein gutes Beispiel sind die MD5-gehashten Passw&ouml;rter von NT4 -
&uuml;blicherweise eine sogenannte Dictionary Attacke gefahren wird. Dabei handelt es sich um einen Brute Force Angriff: alle
W&ouml;rter in einem W&ouml;rterbuch wurden MD5 gehasht, und diese werden nun mit der Passwortdatenbank verglichen. Und raten Sie mal,
wie schnell man damit einige Passw&ouml;rter gefunden hat.
</p>
<p>
Der gesaltete Hash hat den Sinn, genau solche Attacken ins Leere laufen zu lassen, indem man jedem Passwort vor dem Hashen
einen zuf&auml;lligen Wert, den sogenannten Salt, anh&auml;ngt - und erst dann den Hash &uuml;ber das Passwort und den Salt berechnet.
Zwar mu&szlig; man zum Vergleich des Passwortes den Salt neben gesalteten Hash mitspeichern, aber der einzige Angriffsvektor
bleibt jetzt das W&ouml;rterbuch f&uuml;r jedes einzelne gespeicherte Passwort neu mit dem Salt zu codieren - und das dauert dann schon
sehr lange.
</p>

<h2>Speichern des gesalteten Hashs</h2>
<p>
Wie bereits erw&auml;hnt, mu&szlig; man jetzt anstatt Benutzername und Passwort drei Felder speichern: Benutzername, Salt und das
mit dem Salt gehashte Passwort. Ebenfalls bereits erw&auml;hnt habe ich, da&szlig; wenn diese Daten einem Cracker in die H&auml;nde fallen,
er mit Standardangriffen ein Problem bekommt, und sehr wahrscheinlich sich ein leichteres Opfer suchen wird.
</p>
<p>
Ein Punkt mu&szlig; aber beachtet werden: eine "Passwort-Erinnerungsemail" kann man jetzt nicht mehr schicken - alles was man tun kann,
ist dem User ein vollst&auml;ndig neues Passwort zu generieren und zuzusenden. Da auch in diesem Bereich viele Fehler passieren,
beginnen wir mit dem .NET Code f&uuml;r das Generieren eines wirklich zuf&auml;lligen Passwortes.
</p>

<h2>Passw&ouml;rter generieren - aber richtig!</h2>
<p>
Die gesamte Klasse enstand im Zuge eines (C# ASP.NET) Community Projekts zusammen mit einem weiteren AspHeute-Autor, n&auml;mlich
<a href="../autoren/alexanderzeitler.htm">Alexander Zeitler</a>. Auch dort stellte sich die Frage, wie man gute Passw&ouml;rter generiert, und wie man diese
korrekt in einer Datenbank ablegt.
</p>
<p>
Daf&uuml;r haben wir die Klasse <i>Password</i> erstellt, die folgende Signatur hat:
</p>

<pre style="background='silver';">
namespace DotNetGermanUtils
{
  public class Password
  {
    public Password(string strPassword, int nSalt)

    public static string CreateRandomPassword(int PasswordLength)

    public static int CreateRandomSalt()

    public string ComputeSaltedHash()
  }
}
</pre>

<p>
Die Methode zur Generierung eines neuen Passwortes ist statisch, und man kann bestimmen, wie lang das generierte
Passwort sein soll:
</p>

<pre style="background='silver';">
    public static string CreateRandomPassword(int PasswordLength)
    {
      String _allowedChars = "abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNOPQRSTUVWXYZ23456789";
      Byte[] randomBytes = new Byte[PasswordLength];
      RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
      rng.GetBytes(randomBytes);
      char[] chars = new char[PasswordLength];
      int allowedCharCount = _allowedChars.Length;

      for(int i = 0;i&lt;PasswordLength;i++)
      {
        chars[i] = _allowedChars[(int)randomBytes[i] % allowedCharCount];
      }

      return new string(chars);
    }
</pre>

<p>
Das Prinzip ist &auml;hnlich zur ASP L&ouml;sung im Artikel <a href="20000531.htm">Generieren eines sicheren Paßwortes</a>, allerdings ist hier etwas spezielles
eingebaut: wir verwenden kryptographisch sichere Zufallszahlen, um aus dem "Array" <i>_allowedChars</i> Buchstaben
f&uuml;r das Passwort auszuw&auml;hlen. Die Klasse <i>RNGCryptoServiceProvider</i> wurde auch schon im Artikel
<a href="20010924.htm">Unknackbare Verschlüsselung mit Onetime Pads</a> besprochen.
</p>
<p>
Damit hat man ein wirklich zuf&auml;lliges Passwort generiert, das man nun dem Benutzer als Initialpasswort setzen kann -
nur braucht man daf&uuml;r einen Salt.
</p>

<h2>Wir erzeugen einen Salt</h2>
<p>
Im Prinzip handelt es sich hier nur um eine Hilfsfunktion, die ebenfalls auf den <i>RNGCryptoServiceProvider</i>
zur&uuml;ckgreift:
</p>

<pre style="background='silver';">
    public static int CreateRandomSalt()
    {
      Byte[] _saltBytes = new Byte[4];
      RNGCryptoServiceProvider rng = new RNGCryptoServiceProvider();
      rng.GetBytes(_saltBytes);

      return ((((int)_saltBytes[0]) &lt;&lt; 24) + (((int)_saltBytes[1]) &lt;&lt; 16) + 
        (((int)_saltBytes[2]) &lt;&lt; 8) + ((int)_saltBytes[3]));
    }
</pre>

<p>
Erzeugt wird ein 4 Byte langer Salt (ein Integer, aus Einfachheitsgr&uuml;nden f&uuml;r die Speicherung in Datenbanktabellen).
Dieser Salt sowie das generierte Passwort dienen als Grundlage, um den Salted Hash zu erzeugen.
</p>

<h2>Berechnen des Salted Hash</h2>
<p>
Das Berechnen des Salted Hash ist eine Instanzmethode, die auf zwei Membervariablen zugreift, die im Konstruktor gesetzt
werden:
</p>

<pre style="background='silver';">
  public class Password
  {
    private string _password;
    private int _salt;

    public Password(string strPassword, int nSalt)
    {
      _password = strPassword;
      _salt = nSalt;
    }
</pre>

<p>
Damit liefert die Methode <i>ComputeSaltedHash</i> nur noch den Hash selbst zur&uuml;ck, und nimmt keine weiteren Parameter an. 
Gehashed wird &uuml;brigens mit dem bekannten SHA1 Algorithmus:
</p>

<pre style="background='silver';">
    public string ComputeSaltedHash()
    {
      // Create Byte array of password string
      ASCIIEncoding encoder = new ASCIIEncoding();
      Byte[] _secretBytes = encoder.GetBytes(_password);
      
      // Create a new salt
      Byte[] _saltBytes = new Byte[4];
      _saltBytes[0] = (byte)(_salt &gt;&gt; 24);
      _saltBytes[1] = (byte)(_salt &gt;&gt; 16);
      _saltBytes[2] = (byte)(_salt &gt;&gt; 8);
      _saltBytes[3] = (byte)(_salt);

      // append the two arrays
      Byte[] toHash = new Byte[_secretBytes.Length + _saltBytes.Length];
      Array.Copy(_secretBytes, 0, toHash, 0, _secretBytes.Length);
      Array.Copy(_saltBytes, 0, toHash, _secretBytes.Length, _saltBytes.Length);

      SHA1 sha1 = SHA1.Create();
      Byte[] computedHash = sha1.ComputeHash(toHash);

      return encoder.GetString(computedHash);
    }
</pre>

<p>
Damit haben wir die gesamten Funktionen beisammen, und k&ouml;nnen die Klasse zum Einsatz bringen.
</p>

<h2>Die Klasse <i>Password</i> im t&auml;glichen Einsatz</h2>
<p>
Ich habe ein kleines Beispiel zusammengestellt, das das Erstellen eines neuen Passwortes, eines neuen Salts, und dann
das Generieren des Salted Hash zeigt:
</p>

<pre style="background='silver';">
using System;
using DotNetGermanUtils;

namespace HashPassword
{
  class TestApplication
  {
    [STAThread]
    static void Main(string[] args)
    {
      // Generate a new random password string
      string myPassword = Password.CreateRandomPassword(8);

      // Debug output
      Console.WriteLine(myPassword);

      // Generate a new random salt
      int mySalt = Password.CreateRandomSalt();

      // Initialize the Password class with the password and salt
      Password pwd = new Password(myPassword, mySalt);

      // Compute the salted hash
      // NOTE: you store the salt and the salted hash in the datbase
      string strHashedPassword = pwd.ComputeSaltedHash();

      // Debug output
      Console.WriteLine(strHashedPassword);
    }
  }
}
</pre>

<p>
Folgender Punkt ist besonders wichtig:
<strong>Generieren Sie f&uuml;r jeden Benutzer unbedingt einen neuen Salt. Sollten beide User zuf&auml;llig das gleiche Passwort verwenden,
so ist der Salted Hash dennoch verschieden f&uuml;r beide Benutzerkonten!</strong>
</p>
<p>
Der gezeigte Sourcecode zeigt das Erstellen eines neuen Passworts und eines neuen Salts, wie sieht es aus wenn der User
einloggen m&ouml;chte? Nun, nichts leichter als das:
</p>

<pre style="background='silver';">
// retrieve salted hash and salt from user database, based on username
...

Password pwd = new Password(txtPassword.Text, nSaltFromDatabase);

if (pwd.ComputeSaltedHash() == strStoredSaltedHash)
{
   // user is authenticated successfully
}
else
{
...
</pre>

<p>
Im Prinzip nicht anders als bei bisherigen Benutzername/Passwort Implementierungen, aber die Daten sind bedeutend sicherer
auch im Falle da&szlig; die (serverseitigen) Passwortdaten unbefugten Dritten in die H&auml;nde fallen.
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
Die Klasse, die im heutigen Artikel vorgestellt wurde, kann man in seine eigenen .NET Projekte einbinden - entweder direkt
in C# Projekten oder als Assembly in anderen Programmiersprachen. Ausreden f&uuml;r unsichere Passwortspeicherung gibt es ab sofort 
nicht mehr!
</p>
<h2>Download des Codes</h2>
<p><a href="../Code/20040105.zip">Klicken Sie hier</a>, um den Download zu starten.</p>
<h2>Verwandte Artikel</h2>
<p>
<a href="20010528.htm">Aber bitte mit Rijndael</a><br>
<a href="20020115.htm">CAPICOM One</a><br>
<a href="20000531.htm">Generieren eines sicheren Pa&szlig;wortes</a><br>
<a href="20010330.htm">Passw&ouml;rter mit SHA1 absichern</a><br>
<a href="20000920.htm">PGP-Verschl&uuml;sselung bei Dateien</a><br>
<a href="20010924.htm">Unknackbare Verschl&uuml;sselung mit Onetime Pads</a><br>
<a href="20000921.htm">Ver- und entschl&uuml;sseln von Texten mit PGP</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20040105" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Passw&ouml;rter speichern - aber richtig!"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20040105.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Christoph Wille"><input type="hidden" name="AuthorEmail" value="christophw@alphasierrapapa.com"><input type="hidden" name="Artikel" value="20040105"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20040105.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
