<HTML>
<HEAD>
<TITLE>Was ist neu in ADO.NET</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Dieser Artikel gibt Ihnen einen &Uuml;berblick &uuml;ber die wesentlichen Neuerungen in ADO.NET um einen raschen Umstieg zu erm&ouml;glichen.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,ADO.NET,ADO dot net,.NET,Framework,SDK,ASP.NET,DataReader,DataSet,DataSetCommand">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Was ist neu in ADO.NET</H1>
<p>
Geschrieben von: <a href="../autoren/christianholm.htm">Christian Holm</a><br>
Kategorie: <a href="../kategorien/ADOdotNET.htm">ADO.NET</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20001031"></SCRIPT>
</p>
<p>
Dieser Artikel gibt Ihnen einen &Uuml;berblick &uuml;ber die wesentlichen Neuerungen in ADO.NET um einen raschen
Umstieg zu erm&ouml;glichen. ADO.NET ist nicht &quot;nur&quot; eine neue Version von ADO 
(Microsoft ActiveX Data Objects), sondern bietet ernstzunehmende Vorteile in der Programmierung, Wartung,
Performance und dem Datenaustausch zwischen einzelnen Komponenten, der auf dem universellen XML Standard
basiert.
</p>
<p>
Wir werden uns mit dem grunds&auml;tzlichen Komponentenmodell auf dem ADO.NET aufbaut befassen, und die beiden wesentlichsten
Grundbestandteile, das <i>DataSet</i> und die <i>.NET Data Providers</i> besprechen. Nat&uuml;rlich behandeln wir auch
die Begriffe <i>DataTable</i>, <i>DataReader</i> und <i>DataColumn</i> damit Sie so schnell wie m&ouml;glich
effiziente L&ouml;sungen mit Hilfe von ADO.NET erstellen k&ouml;nnen.
</p>
<h2>Warum eine neue Technologie?</h2>
<p>
ADO.NET enth&auml;lt umfangreiche Verbesserungen von Microsoft ActiveX Data Objects (ADO), welches ein standardisiertes
Entwicklungs-Modell f&uuml;r auf Datenaustausch basierende Applikationen bietet. Das Kernst&uuml;ck einer 
auf ADO.NET aufbauenden Applikation ist das <i>Data Set</i>. Das <i>Data Set</i> ist eine im Speicher
abgelegte Kopie eines Datenbankinhaltes, einer oder mehrerer Datenbanken. Ein Data Set kann mehrere Datentabellen
enthalten, welche sich auf die einzelnen Tabellen in der Datenbank oder auf spezielle <i>Views</i> beziehen. W&auml;hrend dem Arbeiten
mit einem Data Set besteht aber keine aktive Verbindung mit der physikalischen Datenquelle, weil ja das
Data Set im Speicher abgelegt wird.
</p>
<p>
Das folgende vereinfachte Schema zeigt die Hauptstruktur von ADO.NET:
</p>

<IMG SRC="Bilder/200010/20001031_ADOSchema.png" width="590" height="431" alt="" border="0">

<p>
Anders als in fr&uuml;heren Versionen von ADO, werden folgende Schritte durchgef&uuml;hrt um den Datenaustausch bzw.
die Manipulation von Daten durchzuf&uuml;hren:
</p>

<ul>
<li>Erstellen der Verbindung zur ben&ouml;tigten Datenbank
<li>Gewinnung der erforderlichen Daten, z.B. &uuml;ber SQL-Statements
<li>Ablegen der Datens&auml;tze im DataSet welches im Speicher residiert
<li>Schlie&szlig;en der aktiven Verbindung zur Datenquelle
<li>Manipulation der im DataSet enthalten Daten bei getrennter Verbindung
</ul>

<h2>Vorteile von ADO.NET</h2>
<p>
<li>Flexibilit&auml;t:
Die Flexibilit&auml;t von ADO.NET ist auf die Verwendung von XML zur&uuml;ckzuf&uuml;hren. Dadurch, da&szlig; XML als
Format f&uuml;r Datenaustausch zwischen den einzelnen Applikationen verwendet wird und XML schon eine gro&szlig;e Akzeptanz 
genie&szlig;t ist der Programmieraufwand relativ gering. Die Komponente die das Data Set als XML erh&auml;lt mu&szlig; zudem nicht
unbedingt eine ADO.NET Komponente sein. Sie k&ouml;nnen die Komponente entweder mit Visual Studio.NET entwickeln
oder auch mit jeder anderen IDE. Die einzige Vorausetzung f&uuml;r die Komponete ist, da&szlig; diese mit XML umgehen kann.
</p>
<p>
<li>Einfache Wartung:
Es gibt kaum eine Komponente die sich nicht laufend verbessert oder erweitert. Durch die Verwendung von XML gestaltet
sich dies aber sehr einfach. Wenn Sie nun Funktionen erweitern bzw. hinzuf&uuml;gen wollen, brauchen Sie z.B. nur dem Data Set
die Informationen f&uuml;r die hinzugef&uuml;gte Tabelle oder Datenquelle bekannt geben.
<p>
<li>&Uuml;bersichtliche und typensichere Programmstruktur:
Entwickler k&ouml;nnen die Objekte des ADO.NET einfachst durch die typensichere Programmstruktur ver&auml;ndern. 
Beispiel:
</p>

<p>in ADO:</p>
 
<pre style="background='silver';">
...
IF LieferDatum &gt; rsProducts.Fields("Verfuegbarkeit").Value
...
</pre>

<p>
typensichere Programmstruktur in ADO.NET:
</p>

<pre style="background='silver';">
...
IF LieferDatum &gt; tProdukt.Verfuegbarkeit
...
</pre>

<p>
<li>Performance:
Signifikante Unterschiede besonders gegen&uuml;ber Disconnected Recordsets. In ADO.NET ist
keine Datentypumwandlung in von COM akzeptierte Datentypen mehr n&ouml;tig, um mit anderen Komponenten
zu kommunizieren. Weiters enf&auml;llt durch Verwendung von XML das aufwendige COM Marshalling.
</p>

<p>
<li>Skalierbarkeit:
Durch die Verwendung von <i>Data Sets</i> werden lange Datenbank-Locks sowie lange aktive Datenbankverbindungen
vermieden. Das spart Serverresourcen und stellt sicher, da&szlig; Ihre Applikation sowohl f&uuml;r 10 als auch 1000
User optimal arbeitet.
</p>

<h2>Das MS .NET Framework und ADO.NET</h2>
<p>
Wie Sie vielleicht schon wissen oder in unseren bereits erschienenen Artikeln gelesen haben, ist
das .NET Framework objektorientiert. Wenn Sie nun einen speziellen Teil aus dem Framework bzw. eben ADO.NET
verwenden wollen, m&uuml;ssen Sie den gew&uuml;nschten Namespace referenzieren. Sie m&uuml;ssen sowohl angeben da&szlig; Sie
mit ADO.NET arbeiten wollen, als auch den gew&uuml;nschten Provider ausw&auml;hlen:
</p>
<p>
C#:
</p>

<pre style="background='silver';">
//Referenz auf Data Namespace:
using System.Data;
</pre>

<pre style="background='silver';">
//Auswahl des OleDb Providers
using System.Data.OleDb;
</pre>

<p>
oder
</p>

<pre style="background='silver';">
//Auswahl des SQL Providers
using System.Data.SqlClient;
</pre>


<p>
VB.NET:<br>
<pre style="background='silver';">
Imports System.Data
Imports System.Data.OleDb
</pre>

<p>
oder
</p>

<pre style="background='silver';">
Imports System.Data.SqlClient
</pre>


<p>
Beginnen wir nun mit einem kurzen &Uuml;berblick &uuml;ber das <i>DataSet</i>-Objekt und seine Bestandteile.
</p>
<h2>Das DataSet</h2>
<p>
Ein <i>Data Set</i> ist im XML Format gespeichert, was nat&uuml;rlich den Datenaustausch unter verschiedenen
Anwendungen erheblich erleichtert. DataSets k&ouml;nnen auch Daten enthalten die mit Beziehungen verkn&uuml;pft
sind, wie z.B. <i>Parent-Child</i>-Beziehungen die in einer hierarchischen Anordnung gespeichert sind.
Das DataSet ist also ein universell einsetzbares Modell welches unabh&auml;ngig von der zugrundeliegenden
Datenquelle ist, und Tabellen, Datenspalten bzw. -reihen, Constraints und Beziehungen enth&auml;lt.
</p>

<p>
Die hierarchische Struktur des Data Set Modells sieht so aus:
</p>

<IMG SRC="Bilder/200010/20001031_DataSetSchema.png" width="590" height="555" alt="" border="0">

<p>
Um einen reibungslosen Austausch der Daten zwischen Data Sets und den zugeordneten Datenquellen zu erm&ouml;glichen,
verwendet ADO.NET ein Objekt namens <i>DataSetCommand</i>. Microsoft bietet hierf&uuml;r zwei M&ouml;glichkeiten
je nach Datenquelle an:
</p>


<ul>
<li>Das <i>SqlDataAdapter</i>-Objekt: Wie der Name schon suggeriert, verwendet man es um mit SQL Server Datenbanken zu
kommunizieren.
<li>Das <i>OleDbDataAdapter</i>-Objekt: Mit diesem kann man auf alle Datenquellen zugreifen
die von <i>OLEDB Providern</i> unterst&uuml;tzt werden.
</ul>

<p>
Als n&auml;chsten wichtigen Punkt folgt der <i>DataTable</i>, der die Struktur der Datenbank-Tabelle (Table) und die Daten an sich enth&auml;lt.
</p>

<h3>Der DataTable</h3>

<p>
Ein DataTable stellt eine Tabelle (Table) der im Speicher abgelegten Daten dar. Wie schon erw&auml;hnt enth&auml;lt dieser
die Struktur der Tabelle, welche durch die Aufteilung in Spalten (ColumnsCollection) gegeben ist. Hinzu
kommen noch die einzelnen Datenreihen (RowsCollection), welche die in der Tabelle gespeicherten Daten repr&auml;sentieren.
Der DataTable speichert sowohl den originalen State der Daten als auch die Ver&auml;nderungen.
</p>

<p>
Erstellen wir nun unter Verwendung von C# als Beispiel eine neue Instanz eines DataTables namens <i>Verkauf</i> mit 
einem Table mit der Bezeichnung <i>tProdukte</i>. Als sinnvolle Eigenschaft sollen die Stringvergleiche
im DataTable <i>case sensitiv</i> sein:
</p>

<p>
Instanzieren des DataTables:
</p>

<pre style="background='silver';">
DataTable Verkauf = new DataTable();
Verkauf.CaseSensitive = true;
</pre>

<p>
Erstellen des <i>tProdukte</i> Tables:
</p>

<pre style="background='silver';">
Verkauf.TableName = "tProdukte";
</pre>

<p>
Alternativ bietet sich nat&uuml;rlich der um einiges k&uuml;rzerer Code an:
</p>

<pre style="background='silver';">
DataTable Verkauf = new DataTable("tProdukte");
Verkauf.CaseSensitive = true;
</pre>


<h3>Die DataColumn</h3>

<p>
Nat&uuml;rlich wollen Sie dem Table auch Spalten hinzuf&uuml;gen. Hierbei gibt es zwei M&ouml;glichkeiten. Die eine ist die
Erstellung von normalen Spaltenfeldern, worin wie gewohnt Daten gespeichert werden. Die andere M&ouml;glichkeit
besteht darin, Berechnungsfelder mit enthaltenen Berechnungsformel zu erstellen.
</p>

<p>
Befassen wir uns zun&auml;chst mit der ersten M&ouml;glichkeit. Erstellen wir eine Spalte namens <i>ProduktName</i> in
unserem zuvor erstellten DataTable <i>Verkauf</i>. Diese Spalte soll vom Datentyp <i>String</i> sein,
da darin wie der Name suggeriert die tats&auml;chlichen Namen der Produkte gespeichert werden.
</p>

<p>
Wir deklarieren zun&auml;chst eine Variable namens <i>VerkaufSpalte</i> vom Datentyp <i>DataColumn</i>. Diese
erh&auml;lt am Anfang den Wert <i>null</i>, da es am Beginn noch keine Spalten gibt.
</p>

<pre style="background='silver';">
DataColumn VerkaufSpalte = null;
</pre>

<p>
Nun erstellen wir die neue Spalte <i>ProduktName</i> samt String Datentyp-Zuweisung, nachdem wir wie
oben gezeigt den DataTable instanziert haben.
</p>

<pre style="background='silver';">
VerkaufSpalte = tProdukte.Columns.Add("ProduktName", 
    System.Type.GetType("System.String"));
</pre>

<p>
Da wir f&uuml;r Endkunden die Mehrwertsteuer zum Nettopreis hinzurechen wollen, k&ouml;nnen wir dies elegant mit
einem Berechnungsfeld l&ouml;sen:
</p>

<pre style="background='silver';">
DataColumn Bruttopreis = new DataColumn();
Bruttopreis.DataType = System.Type.GetType("System.Currency");
Bruttopreis.Expression = "Nettopreis * 1.2";
</pre>

<p>
Sie wissen nun wie man <i>DataTables</i>, <i>Tables</i> und <i>Colums</i> erstellt. Welche M&ouml;glichkeiten
des Zugriffs es auf eine bestehende Datenbank gibt, beschreibt der zweite Kernpunkt dieses Artikels:
</p>

<h2>.NET Data Providers</h2>

<p>
Unter diesem Punkt m&ouml;chte ich beschreiben, wie man eine Verbindung allgemein aufbaut, eine einfache 
Abfrage erstellt und was es mit dem <i>DataReader</i> so auf sich hat.
</p>

<h3>Erstellung einer Verbindung</h3>

<p>
Microsoft bietet Ihnen innerhalb des .NET Frameworks zwei <i>Connection</i> Objekte an:
</p>

<ul>
<li>Das SqlConnection Object - Zugriff auf MS SQL Server
<li>Das OleDbConnection Object - Zugriff auf eine DB via OLEDB Provider
</ul>

<p>
Um einen .NET Data Provider des .NET Frameworks in Ihrem Sourcecode zu verwenden, m&uuml;ssen Sie wie gewohnt auf
den dazugeh&ouml;rigen Namespace referenzieren:
</p>

<ul>
<li> SQL Server .NET Data Provider - System.Data.SqlClient
<li> OleDb .NET Data Provider - System.Data.OleDb
</ul>

<p>
In dem nun folgenden Beispiel erstellen und &ouml;ffen wir eine Verbindung zu einer SQL Datenbank unter
Verwendung von C#. Einmal verwenden wir das <i>OleDbConnection Object</i> und dann das optimalere 
<i>SqlConnection Object</i>:
</p>

<p>
OleDbConnection Object:<br>
</p>

<pre style="background='silver';">
string strConn ="Provider= SQLOLEDB.1; Data Source=localhost; uid=sa; pwd=;" _
  " Initial Catalog=MyDatabase;";
OleDbConnection MyDBConn = new OleDbConnection(strConn);
MyDBConn.Open();
...
</pre>

<p>
SqlConnection Object:<br>
</p>

<pre style="background='silver';">
string strConn ="server=localhost; uid=sa; pwd=; database=MyDatabase;";
SqlConnection MyDBConn = new SqlConnection(strConn);
MyDBConn.Open();
...
</pre>


<p>
Nachdem wir also die Verbindung zur Datenbank ge&ouml;ffnet haben wollen wir nun ein einfaches
SQL Statment ausf&uuml;hren.
</p>

<p>
OledbCommand:
</p>

<pre style="background='silver';">
string strSQL = "SELECT * FROM tProdukte";
OleDbDataAdapter MyCmd = new OleDbDataAdapter(strSQL, MyDBConn);
</pre>

<p>
SQLCommand:
</p>

<pre style="background='silver';">
string strSQL = "SELECT * FROM tProdukte";
SqlDataAdapter MySqlCmd = new SqlDataAdapter(strSQL, MyDBConn);
</pre>

<p>
Bevor wir wir nun den Befehl ausf&uuml;hren k&ouml;nnen, m&uuml;ssen wir noch das <i>DataReader</i> Objekt erstellen.
</p>

<p>
OldbDataReader:
</p>

<pre style="background='silver';">
OlDbDataReader MySqlReader = MySqlCmd.ExecuteReader();
</pre>

<p>
SqlDataReader:
</p>

<pre style="background='silver';">
SqlDataReader MySqlReader = MySqlCmd.ExecuteReader();
</pre>


<p>
DataReader sch&ouml;n und gut, aber warum sollte man diesen verwenden, wenn man ja das DataSet auch verwenden k&ouml;nnte? 
Nun bei sehr gro&szlig;en Datenbanken und 
gro&szlig;er Benutzeranzahl werden Serverresourcen schnell aufgebraucht. Wenn diese User nun zus&auml;tzlich von der Datenbank
10000 Datenreihen einlesen, mu&szlig; Speicher f&uuml;r diese allokiert werden und bis zum Schlu&szlig; verf&uuml;gbar sein. Und das Data Set
cacht diese Daten.
</p>

<p>
Bei einfachen Ausleseoperationen verwenden Sie den resourcenschonenden <i>DataReader</i>. Dieser ist ein
<i>forward-</i> und <i>read-only</i> Cursor, der immer nur eine Zeile abarbeitet:
</p>

<pre style="background='silver';">
while (MySqlReader.Read()) 
{
  // Statements
}
</pre>

<h2>Schlu&szlig;bemerkung</h2>

<p>
Dieser Artikel stellt eine Einf&uuml;hrung in ADO.NET dar, mit dem Focus auf Umsteiger, die schon Erfahrung 
mit ADO haben - damit ein schnellerer Umstieg auf ADO.NET m&ouml;glich wird. 
</p>

<p>
Sie haben das neue ADO.NET Objektmodell und seinen Aufbau bzw. Struktur kennengelernt. Sie wissen in
groben Z&uuml;gen die Vorteile dieser neuen interessanten Technologie, und kennen die Begriffe <i>DataSet</i>,
<i>DataTable</i> sowie <i>DataColumn</i>. Das Erstellen einer Datenbank-Verbindung, eines einfachen Abfrage-Statements
und das effiziente Auslesen der einzelnen Datenreihen mit Hilfe des <i>DataReaders</i> haben ich Ihnen ebenfalls
kurz gezeigt.
</p>

<p>
In zuk&uuml;nftigen Artikeln &uuml;ber ADO.NET werde ich mich ausf&uuml;hrlicher mit dem Datenbankzugriff befassen.
</p><h2>Verwandte Artikel</h2>
<p>
<a href="20001116.htm">Das DataTable Objekt in ADO.NET</a><br>
<a href="20001106.htm">Datenaufbereitung in ADO.NET</a><br>
<a href="20001102.htm">Datenbankzugriff mittels ADO.NET</a><br>
<a href="20020117.htm">Last but not least - .NET 1.0 ist da!</a><br>
<a href="20010626.htm">Stored Procedures 101 in ADO.NET</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Eine weitere sehr hilfreiche Resource ist das <a href="http://aspxfiles.com/">deutsche ASP.NET Wiki</a>,
das als zentrale Anlaufstelle f&uuml;r Tips, Tricks, Know How und alles N&uuml;tzliche was man in seinem Alltag als 
(ASP).NET-Entwickler so braucht und entdeckt gedacht ist. 
</p>

<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20001031" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Was ist neu in ADO.NET"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20001031.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Christian Holm"><input type="hidden" name="AuthorEmail" value="office@holmcs.com"><input type="hidden" name="Artikel" value="20001031"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20001031.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
