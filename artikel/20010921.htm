<HTML>
<HEAD>
<TITLE>Erstellung eines Intranets in ASP (Teil 5) - Application Day</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Bisher haben wir unser Hauptaugenmerk auf theoretische Aspekte und grundlegende Programmierung des Intranets gelegt; heute werden wir fast ausschlie&szlig;lich die Programmierung von Anwendungen f&uuml;r das Intranet fokusieren.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,ASPIntranet,ASPIntranet.de,Intranet,Applikation,Telefonregister,Feiertagverwaltung,Mitarbeiterverwaltung,Krankentage,Urlaubsverwaltung">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Erstellung eines Intranets in ASP (Teil 5) - Application Day</H1>
<p>
Geschrieben von: <a href="../autoren/alexanderzeitler.htm">Alexander Zeitler</a><br>
Kategorie: <a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20010921"></SCRIPT>
</p>
<p>
Zum letzten Teil der Artikelserie zur Erstellung eines Intranets mit ASP hei&szlig;e ich Sie herzlich willkommen. Nachdem wir 
in den bisherigen Artikel unser Hauptaugenmerk auf theoretische Aspekte und grundlegende Programmierung des Intranets 
gelegt hatten, werden wir heute fast ausschlie&szlig;lich die Programmierung von Anwendungen f&uuml;r das Intranet fokusieren.
</p>

<p>
Beachten Sie bitte, da&szlig; alle in diesem  Teil gezeigten Datenbanktabellen in die bereits bestehende Datenbank <b>aspintranet.mdb</b>
aus der im Download verf&uuml;gbaren <b>update.mdb</b> importiert werden m&uuml;ssen, um zu vermeiden, da&szlig; bereits erfasste Daten und 
get&auml;tigte Einstellungen &uuml;berschrieben werden.
</p>

<p>
Weiterhin erhalten Sie heute den kompletten Code aller Artikel zum Download (au&szlig;er der Datenbank), so da&szlig; Sie sofort 
auf dem aktuellsten Stand von ASPIntranet sind.
</p>

<h2>Telefonliste</h2>

<p>
Die erste Anwendung, die wir heute programmieren werden, ist eine Telefonliste mit Sortierfunktion:
</p>

<IMG SRC="Bilder/200109/20010921_1.png" width="846" height="104" alt="" border="0">

<p>
Die Besonderheit an der Sortierfunktion (die im Screenshot auf "Nachname absteigend" steht): sie ist clientseitig. 
Dies bringt den Vorteil, da&szlig; zum einen die Sortierung schneller durchgef&uuml;hrt wird und zum anderen wird der Server bzw. 
die Datenbank nicht mit einer erneuten SQL-Abfrage belastet.
</p>

<p>
Die Telefonliste ist ein "Abfallprodukt", welches aus den bisher erfassten Daten entsteht. Es ist also keine neue 
Tabelle in der Datenbank notwendig. Allerdings ben&ouml;tigen wir in unserem Intranet-Verzeichnisbaum drei neue 
Verzeichnisse:
</p>

<IMG SRC="Bilder/200109/20010921_2.png" width="222" height="213" alt="" border="0">

<p>
Die Telefonliste soll in unserer Outlookleiste im Bereich "Verwaltung" erscheinen. Hierzu m&uuml;ssen wir sie &uuml;ber unsere 
Men&uuml;verwaltung anlegen:
</p>

<IMG SRC="Bilder/200109/20010921_3.png" width="464" height="419" alt="" border="0">

<p>
Das Icon f&uuml;r die Telefonliste befindet sich in dem Unterverzeichnis "images" im Verzeichnis "~olmenu".
</p>

<p>
Bitte weisen Sie den Mitarbeitern, die Sie inzwischen angelegt haben, die Berechtigung f&uuml;r den Zugriff auf die 
Telefonliste zu. Danach sollte die Anwendung "Telefonliste" in der Outlookleiste sichtbar sein:
</p>

<IMG SRC="Bilder/200109/20010921_4.png" width="121" height="205" alt="" border="0">

<p>
Somit sind alle Vorarbeiten erledigt und wir k&ouml;nnen mit der Programmierung der Telefonliste beginnen, welche in der 
Datei <b>default.asp</b> im Verzeichnis "telefonliste" erstellt wird.
</p>

<p>
Wie bereits erw&auml;hnt, besteht die Telefonliste aus Informationen, die wir bereits zu einem fr&uuml;heren Zeitpunkt erfasst 
haben. Hierbei handelt es sich um folgende mitarbeiterbezogene Daten innerhalb des Unternehmens:
</p>

<ul>
<li>Vorname</li>
<li>Nachname</li>
<li>Telefonnummer</li>
<li>Faxnummer</li>
<li>Email-Adresse</li>
<li>Abteilung</li>
<li>Mobilnummer</li>
</ul>

<p>
Die ben&ouml;tigten Informationen stehen in mehreren Tabellen unserer Datenbank. Wir ben&ouml;tigen in jeder Zeile die 
Informationen, die zum in dieser Zeile aufgelisteten Mitarbeiter geh&ouml;ren. Wenn wir die Abfragen so gestalten w&uuml;rden, 
wie wir das bisher getan haben, also immer dann eine SQL-Abfrage zu starten, wenn wir die entsprechende Information 
aus der Tabelle ben&ouml;tigen ("<i>...WHERE ID = " &amp; Kriterium &amp; "....</i>"), bek&auml;men wir eine Unzahl von SQL-Abfragen, die mit 
jedem neu angelegten Mitarbeiter steigen w&uuml;rden. Abhilfe schafft hier SQL selbst durch das 
<a href="20001023.htm">JOIN</a>-Statement. Dieses erm&ouml;glicht es uns, mehrere Tabellen 
miteinander zu "verbinden" und somit die Daten aus mehreren Tabellen so auszulesen, als w&uuml;rde es sich um eine 
einzige Tabelle handeln. 
</p>

<p>
Als Beispiel zeige ich Ihnen zun&auml;chst die JOIN-Abfrage, um die Nachnamen und Telefonnummern aller Mitarbeiter zu erhalten:
</p>

<pre style="background='silver';">
SELECT * Mitarbeiter.Nachname, Telefonnummern.Telefonnummer FROM Telefonnummern RIGHT JOIN 
    Telefonnummern ON (Telefonnummern.ID = Mitarbeiter.Telefonintern)
</pre>

<p>
Da wir allerdings insgesamt sechs Tabellen abfragen m&uuml;ssen, ben&ouml;tigten wir entsprechend auch sechs JOIN-Abfrage, 
die miteinander verkn&uuml;pft werden. Die JOIN-Abfrage f&uuml;r unsere Telefonliste sieht dann wie folgt aus:
</p>

<pre style="background='silver';">
SELECT Mitarbeiter.Vorname, Mitarbeiter.Nachname, Telefonnummern.Telefonnummer, Emailadressen.Emailadresse, 
    Abteilungen.Abteilung, Faxnummern.Faxnummer, Mobilnummern.Mobilnummer FROM Emailadressen 
    RIGHT JOIN (Telefonnummern RIGHT JOIN (Abteilungen RIGHT JOIN (Faxnummern RIGHT JOIN 
    (Mobilnummern RIGHT JOIN Mitarbeiter ON Mobilnummern.ID = Mitarbeiter.Mobilnummer) ON 
    Faxnummern.ID = Mitarbeiter.Telefax) ON Abteilungen.ID = Mitarbeiter.Abteilung) ON 
    Telefonnummern.ID = Mitarbeiter.Telefonintern) ON Emailadressen.ID = Mitarbeiter.Email
</pre>

<p>
Die Ausgabe der Datens&auml;tze erfolgt wie bei einer normalen SELECT-Abfrage auch. Allerdings m&ouml;chten wir die einzelnen 
Tabellenzeilen zur besseren Lesbarkeit mit abwechselnd mit zwei verschiedenen Farben hinterlegen. 
</p>

<p>
Hierzu definieren wir via CSS zwei verschieden Klassen "listrow1" und "listrow2" ("<b>/~include/aspintranet.css</b>") f&uuml;r 
die Tabellenzellen. W&auml;hrend der Ausgabe der Datens&auml;tze aus der vorangegangenen JOIN-Abfrage wechseln wir bei jedem 
Durchlauf die Klasse:
</p>

<pre style="background='silver';">
Do While Not rs.Eof
    Response.Write "&lt;tr&gt;"
    If RowStyle = 0 Then
        RowStyle = 1
        RowClass = "listrow1"
    Else
        RowStyle = 0
        RowClass = "listrow2"
    End if
</pre>

<p>
"RowStyle" wurde vor der Abfrage mit
</p>

<pre style="background='silver';">
Rowstyle = 0
</pre>

<p>
initialisiert. Um die wechselnden Klassen der Tabellenzellen zuzuweisen ist nun noch folgende Anweisung in jeder 
Zelle, die Datens&auml;tze enth&auml;lt, notwendig:
</p>

<pre style="background='silver';">
Response.Write "&lt;td class=""" &amp; RowClass &amp; """&gt;" &amp; rs("vorname") &amp; "&lt;/td&gt;"
</pre>

<p>
Um die clientseitige Sortierung der Telefonliste zu erreichen, bedienen wir uns eines Features des Internet 
Explorer: Behaviors, welche es erm&ouml;glichen HTML-Elementen "Verhaltenweisen" (Behaviors) zuzuordnen. Das in der 
Telefonliste verwendete Behavior ist das 
"<a href="http://msdn.microsoft.com/library../default.htm?url=/library/en-us/dndude/html/dude07232001.asp" target="_blank">Sort-Behavior</a>", 
welches es erm&ouml;glicht, ohne gro&szlig;en Aufwand Daten innerhalb einer HTML-Tabelle nach allen vorhandenen Spalten auf- und 
absteigend sortieren zu lassen. Voraussetzung hierf&uuml;r ist, da&szlig; die Tabelle mit den HTML-Tags "
<a href="http://www.teamone.de/selfhtml/tcea.htm#a4" target="_blank">&lt;THEAD&gt;</a>" und "&lt;TBODY&gt;" in Tabellenkopf und Tabellenk&ouml;rper 
unterteilt wird. Die Sortierung wird aktiviert, indem man auf den jeweiligen Titel der Spalte, nach der sortiert werden 
soll, klickt. Ein weiterer Klick kehrt die Sortierreihenfolge um.
</p>

<p>
Am Ende der Seite wird schlie&szlig;lich die Funktion "doNav()" aufgerufen, soda&szlig; die Navigationsleiste mit dem Titel 
"Telefonliste intern" eingeblendet wird. Damit ist die Telefonliste voll funktionst&uuml;chtig und wir k&ouml;nnen uns der 
n&auml;chsten Anwendung zuwenden.
</p>

<h2>Urlaubs- und Krankheitstageverwaltung</h2>

<p>
Ein Teil der Verwaltungsarbeit von Mitarbeitern besteht aus der Verwaltung der Urlaubs- und Krankheitstage der 
Mitarbeiter. Um Ihnen diese Arbeit in Zukunft zu erleichtern, werden wir eine Anwendung zur Verwaltung der 
Urlaubs- und Krankheitstage in unserem Intranet implementieren:
</p>

<IMG SRC="Bilder/200109/20010921_5.png" width="669" height="619" alt="" border="0">

<p>
Wie f&uuml;r die Telefonliste ben&ouml;tigen wir auch f&uuml;r die Urlaubsverwaltung ein neues Unterverzeichnis. Dieses liegt im 
Verzeichnis "mitarbeiter" und tr&auml;gt den Namen "urlaub".
</p>

<p>
Weiterhin ben&ouml;tigen wir in unserer Datenbank drei neue Tabellen:
</p>

<IMG SRC="Bilder/200109/20010921_6.png" width="625" height="101" alt="" border="0">

<p>
In dieser Tabelle werden die Urlaubs- und Krankheitstage zum jeweiligen Mitarbeiter 
zugeordnet gespeichert.
</p>

<IMG SRC="Bilder/200109/20010921_7.png" width="580" height="115" alt="" border="0">

<p>
In dieser Tabelle wird der Urlaubsanspruch gespeichert, der vom vertraglich vereinbarten 
Urlaub abweicht. Dieser gilt f&uuml;r das jeweils definierte Jahr und den zugeordneten Mitarbeiter.
</p>

<IMG SRC="Bilder/200109/20010921_8.png" width="559" height="126" alt="" border="0">

<p>
Diese Tabelle schlie&szlig;lich beinhaltet Urlaub, der ausgetragen wurde, z.B. bei der Ausbezahlung von Urlaub oder wenn 
Urlaub verf&auml;llt.
</p>

<p>
Der Aufbau der Seite, wie Sie sie im Screenshot gesehen haben, findet in der Datei <b>default.asp</b> im neu angelegten 
Verzeichnis "urlaub" statt.
</p>

<p>
Zun&auml;chst m&uuml;ssen wir eine im Screenshot nicht sichtbare Einstellung t&auml;tigen:
</p>

<pre style="background='silver';">
Session.LCID = 1031
</pre>

<p>
Hiermit stellen wir die L&auml;ndereinstellungen unseres Servers auf "de" f&uuml;r deutsch, wodurch auch auf englischsprachigen 
Servern die deutschen Datums- und Zahlenformate verwendet werden. Weitere Informationen zu diesem Thema finden Sie 
<a href="http://support.microsoft.com/support/kb/articles/q229/6/90.asp" target="_blank">hier</a>.
</p>

<p>
Ausgehend vom Screenshot arbeiten wir uns nun von oben nach unten durch die einzelnen Funktionen vor.
</p>

<p>
Die erste Anzeige, die wir also realisieren, ist die Anzeige des Jahres, f&uuml;r welches der Urlaub des Mitarbeiters 
angezeigt wird. Um zwischen den Jahren umschalten zu k&ouml;nnen, implementieren wir die M&ouml;glichkeit zum Bl&auml;ttern zwischen 
den Jahren, beginnend ab dem Jahr, seit dem der Mitarbeiter beim Unternehmen besch&auml;ftigt ist. Standardm&auml;&szlig;ig wird das 
aktuelle Jahr angezeigt.
</p>

<p>
Zun&auml;chst m&uuml;ssen wir also feststellen, welches Jahr vorgegeben wurde, und falls kein Jahr vorgegeben wurde, soll das 
aktuelle Jahr angezeigt werden:
</p>

<pre style="background='silver';">
If IntAktuellesJahr = "" Then IntAktuellesJahr = Year(Now())
DatStartDatum = ("01/" &amp; "01" &amp; "/" &amp; IntAktuellesJahr)
</pre>

<p>
Die zweite Anweisung setzt das Startdatum f&uuml;r unseren Kalender, der der Urlaubsplanung zugrunde liegt auf den 1.1. 
des eingestellten Jahres, da wir uns von dort ausgehend durch alle Tage des Jahres arbeiten.
</p>

<p>
Jetzt m&uuml;ssen wir feststellen, wann der Mitarbeiter die Arbeit im Unternehmen begonnen hat. Au&szlig;erdem ben&ouml;tigen wir 
den vertraglich vereinbarten Urlaubsanspruch:
</p>

<pre style="background='silver';">
StrSQL1 = "SELECT Urlaubsanspruch, Eintrittsdatum FROM Mitarbeiter WHERE 
    ID = " &amp; ID &amp; "" ' ID pr&uuml;fen
Set rs = Conn.Execute(StrSQL1)
IntAnspruchvertraglich = rs("urlaubsanspruch")
IntJahrEintritt = Year(rs("eintrittsdatum"))
</pre>

<p>
Um die Funktion zum Bl&auml;ttern zu integrieren m&uuml;ssen wir feststellen, ob das aktuell vorgegebene Jahr nach dem 
Eintrittsjahr liegt oder ob es gleich dem Eintrittsjahr ist. Ist es gleich dem Eintrittsjahr, darf keine 
M&ouml;glichkeit zum Zur&uuml;ckbl&auml;ttern bestehen, da wir auf der dann angezeigten Seite Fehlermeldungen erhalten w&uuml;rden. 
Sonst k&ouml;nnen wir ein Icon zum Zur&uuml;ckbl&auml;ttern anzeigen. Das Icon zum Vorw&auml;rtsbl&auml;ttern wird immer angezeigt, da 
der Urlaub f&uuml;r die Zukunft, sofern planbar, jederzeit eingetragen werden kann.
</p>

<p>
Hier der Code, der die Jahresanzeige mit Bl&auml;tterfunktion erzeugt:
</p>

<pre style="background='silver';">
Response.Write "	&lt;td&gt;"
If Int(IntAktuellesJahr) &gt; Int(IntJahrEintritt) Then
    Response.Write "&lt;a href=""default.asp?jahr="
    Response.Write (IntAktuellesJahr - 1)
    Response.Write "&amp;name="
    Response.Write Server.UrlEncode(StrMAName)
    Response.Write "&amp;id="
    Response.Write ID
    Response.Write """ onfocus=""blur()""&gt;&lt;img src=""images/button_zurueck.gif"" 
        width=""5"" height=""10"" border=""0"" alt=""""&gt;&lt;/a&gt;"
End If
Response.Write "&lt;/td&gt;"
Response.Write "    &lt;td&gt;&lt;div class=""eintrag"" style=""width: 40px;""&gt;"
Response.Write IntAktuellesJahr
Response.Write "&lt;/div&gt;&lt;/td&gt;"
Response.Write "    &lt;td&gt;&lt;a href=""default.asp?jahr="
Response.Write (IntAktuellesJahr + 1)
Response.Write "&amp;name="
Response.Write Server.UrlEncode(StrMAName)
Response.Write "&amp;id="
Response.Write ID
Response.Write """ onfocus=""blur()""&gt;&lt;img src=""images/button_vor.gif"" width=""5"" 
    height=""10"" border=""0"" alt=""""&gt;&lt;/a&gt;&lt;/td&gt;"
</pre>

<p>
Die n&auml;chste angezeigte Information im Screenshot ist der Resturlaub der Vorjahre. Um diesen 
zu erhalten, m&uuml;ssen s&auml;mtliche Urlaubstage der Vorjahre (bis zum Eintrittsjahr) addiert und mit 
den Urlaubsanspr&uuml;chen der Vorjahre verrechnet werden.
</p>

<pre style="background='silver';">
For IntJahrCount = IntJahrEintritt To IntAktuellesJahr
    StrSQL = "SELECT Anspruch FROM Urlaubsanspruch WHERE (MAID = " &amp; ID &amp; ") AND (Jahr = " &amp; IntJahrCount &amp; ")"
    Set rs = Conn.Execute(StrSQL)
    If Not rs.Eof Then
        IntAnspruchIst = rs("anspruch")
    Else
        IntAnspruchIst = IntAnspruchvertraglich
    End if
    IntAnzahlRest = IntAnzahlRest + IntAnspruchIst
Next
StrSQL = "SELECT Anzahl FROM Urlaub WHERE (MAID = " &amp; id &amp; ") AND (Datum &lt; #" &amp; DatStartDatum &amp; "#)"
Set rs = Conn.Execute(StrSQL)
Do While Not rs.Eof
    IntAnzahlRest = IntAnzahlRest - rs("anzahl")
    rs.Movenext
Loop
</pre>

<p>
Hierzu wird aus der Tabelle "Urlaubsanspruch" in einer Schleifen, die vom Eintrittsjahr bis zum aktuellen Jahr l&auml;uft, 
der Urlaubsanspruch gelesen, der nicht dem vertraglich festgelegten Urlaubanspruch entspricht. Diesen ben&ouml;tigen 
Sie, falls der Mitarbeiter in einem Jahr mehr oder weniger Urlaub erhalten soll, als vertraglich festgelegt wurde. 
Sollte kein Eintrag f&uuml;r das Jahr vorliegen, so wird der vertragliche Urlaubsanspruch verwendet, den wir bereits zu 
Beginn in die Variable "IntAnspruchvertraglich" &uuml;bernommen hatten. Diesen Anspruch summieren wir in der Variable 
"IntAnzahlrest"
</p>

<p>
Danach lesen wir aus der Tabelle "Urlaub" alle Urlaubstage des Mitarbeiters, die vor dem Startdatum liegen, also 
vor dem 1.1. des aktuellen Jahres. 
</p>

<pre style="background='silver';">
Response.Write "    &lt;td width=""30""&gt;&amp;nbsp;&lt;/td&gt;"
Response.Write "    &lt;td nowrap&gt;&lt;b&gt;Rest "
Response.Write (IntAktuellesJahr - 1)
Response.Write ":&lt;b&gt;&lt;/td&gt;"
StrSQL = "SELECT Austrag FROM Urlaubaustrag WHERE (MAID = " &amp; ID &amp; ") AND 
    (Jahr &lt; " &amp; IntAktuellesJahr &amp; ")"
Set rs = Conn.Execute(StrSQL)
Do While Not rs.Eof
    IntAustrag = IntAustrag + rs("Austrag")
    rs.Movenext
Loop
Response.Write "    &lt;td&gt;&lt;div class=""eintrag""&gt;"
Response.Write (IntAnzahlrest - IntAustrag - IntAnspruchIst)
Response.Write "&lt;/div&gt;&lt;/td&gt;"
</pre>

<p>
Nun geben wir die Vorjahreszahl aus, welche dadurch erzeugt wird, da&szlig; wir von der aktuellen 
Jahreszahl "1" subtrahieren. Im Anschlu&szlig; daran lesen wir noch aus der Tabelle "Urlaubaustrag" alle 
ausgetragenen Urlaubstage der Vorjahre. Diesen summieren wir in der Variable "IntAustrag". Wir haben nun 
drei Variablen mit verschiedenen Werten erzeugt:
</p>

<ul>
<li>IntAustrag: die Zahl der ausgetragenen Urlaubstage der Vorjahre</li>
<li>IntAnzahlrest: die Zahl der Resturlaubstage der Vorjahre</li>
<li>IntAnspruchIst: der Urlaubsanspruch des aktuellen Jahres</li>
</ul>

<p>
Diese drei Werte verrechnen wir nun in der gezeigten Art und Weise, soda&szlig; wir den aktuellen Restanspruch aus dem 
Vorjahr erhalten. Diesen lassen wir schlie&szlig;lich ausgeben.
</p>

<p>
Nun m&ouml;chten wir den Urlaubsanspruch des aktuellen Jahres anzeigen:
</p>

<pre style="background='silver';">
Response.Write "    &lt;td nowrap&gt;&lt;b&gt;Vertragl. Anspruch "
Response.Write IntAktuellesJahr &amp; ":&lt;/b&gt;&lt;/td&gt;"
Response.Write "    &lt;td&gt;&lt;div class=""eintrag""&gt;"
Response.Write FormatNumber(IntAnspruchIst,1)
Response.Write "&lt;/div&gt;&lt;/td&gt;"
</pre>

<p>
Hierzu m&uuml;ssen wir nur die bereits ermittelten Daten des aktuellen Jahres ausgeben lassen - die Jahreszahl sowie den 
Urlaubsanspruch.
</p>

<p>
Die letzte Information, die sich in der ersten Zeile des Urlaubsplaners befindet, ist der Gesamtanspruch des 
aktuellen Jahres, also die Differenz aus "IntAnzahlRest" und "IntAustrag":
</p>

<pre style="background='silver';">
IntGesamtJahrverbleibend = IntAnzahlRest - IntAustrag
Response.Write "    &lt;td width=30&gt;&amp;nbsp;&lt;/td&gt;"
Response.Write "    &lt;td nowrap&gt;&lt;b&gt;Gesamtanspruch "
Response.Write IntAktuellesJahr &amp; ":&lt;/b&gt;&lt;/td&gt;"
Response.Write "    &lt;td&gt;&lt;div class=""eintrag""&gt;"
Response.Write FormatNumber(IntGesamtJahrverbleibend,1)
Response.Write "&lt;/div&gt;&lt;/td&gt;"
</pre>

<p>
Diesen lassen wir zusammen mit der aktuellen Jahreszahl ausgeben.
</p>

<p>
Danach speichern wir die Zahl der verbliebenen Urlaubstage f&uuml;r das aktuelle Jahr in einer neuen Variable 
"IntGesamtJahrFix", da wir von diesem Wert nun unsere &uuml;ber das Jahr hinweg genommenen Urlaubstage abziehen 
werden. Allerdings ben&ouml;tigen wir f&uuml;r manche Berechnungen auch den urspr&uuml;nglichen Wert:
</p>

<pre style="background='silver';">
IntGesamtJahrFix = IntGesamtJahrverbleibend
</pre>

<p>
Die beiden Felder der zweiten Zeile "beantragter Urlaub 2001" und "Krankheitstage 2001" erzeugen wir zun&auml;chst 
leer. Diese werden wir am Ende mittels JavaScript mit Werten f&uuml;llen:
</p>

<pre style="background='silver';">
Response.Write "&lt;tr&gt;"
Response.Write "    &lt;td nowrap&gt;&lt;b&gt;beantragter Urlaub "
Response.Write IntAktuellesJahr &amp; ":&lt;/b&gt;&lt;/td&gt;"
Response.Write "    &lt;td nowrap width=""6""&gt;&lt;/td&gt;"
Response.Write "    &lt;td&gt;&lt;div class=""eintrag"" id=""genommen""&gt;&lt;/div&gt;&lt;/td&gt;"
Response.Write "    &lt;td width=""35"" nowrap&gt;&lt;/td&gt;"
Response.Write "    &lt;td nowrap&gt;&lt;b&gt;Krankheitstage "
Response.Write IntAktuellesJahr &amp; ":&lt;/b&gt;&lt;/td&gt;"
Response.Write "    &lt;td nowrap width=""1""&gt;&lt;/td&gt;"
Response.Write "    &lt;td&gt;&lt;div class=""eintrag"" id=""krankgesamt""&gt;&lt;/div&gt;&lt;/td&gt;"
Response.Write "&lt;/tr&gt;"
</pre>

<p>
Nun kommen wir zur Generierung des Kalenders mit der Anzeige der Urlaubs- und Krankheitstage. Hierzu lassen 
wir zuerst eine Zeile mit den Namen der Monate von Januar - Dezember erzeugen:
</p>

<pre style="background='silver';">
Response.Write "&lt;tr&gt;"
Response.Write "    &lt;td class=""headline""&gt;&amp;nbsp;&lt;/td&gt;"
For IntCounterI = 1 To 12
    Response.Write "&lt;td class=""headline""&gt;"
    Response.Write MonthName(IntCounterI,True)
    Response.Write ".&lt;/td&gt;"
Next
Response.Write "&lt;/tr&gt;"
</pre>

<p>
Bevor wir jetzt fortfahren ist etwas Theorie notwendig. Wir m&uuml;ssen 
n&auml;mlich in jeder Zelle des Kalenders einige Pr&uuml;fungen durchf&uuml;hren:
</p>

<IMG SRC="Bilder/200109/20010921_9.png" width="422" height="326" alt="" border="0">

<p>
Die Pr&uuml;fungen auf Feiertag und ob bereits ein Urlaubs-/Krankheitstag existiert w&uuml;rde jeweils eine 
Datenbankabfrage je Tag erfordern. Bei 365 Tagen erg&auml;be dies 730 Datenbankabfragen. Au&szlig;erdem w&auml;ren noch 
einige andere Abfragen notwendig. Auf alle F&auml;lle aber w&auml;re die Zahl der Datenbank-Abfragen derart hoch, da&szlig; 
die Geschwindigkeit der Anwendung einen sinnvollen Einsatz unm&ouml;glich machen w&uuml;rde. Um dieser Problematik aus dem 
Weg zu gehen, lesen wir die Tabellen "Feiertage" und "Urlaub" f&uuml;r das jeweils aktuelle Jahr in Arrays ein. Zwar 
m&uuml;ssen wir sp&auml;ter auch entsprechend viele Abfragen mit den Arrays durchf&uuml;hren. Diese sind allerdings wesentlich 
schneller als die Datenbankzugriffe. Grobe Tests haben bei dieser Anwendung ergeben, da&szlig; die Version mit 
Datenbankzugriffen etwa 400 - 500 % langsamer ist, als die aktuelle Version mit Arrays. Hier das Einlesen der 
Datenbanktabellen in die entsprechenden Arrays:
</p>

<pre style="background='silver';">
Dim Arrkranktagemonat(11)
Dim ArrUrlaubsTageMonat(11)
For IntCounterI = 0 To 11
    Arrkranktagemonat(IntCounterI) = 0
    ArrUrlaubsTageMonat(IntCounterI) = 0
Next
'Feiertage in Array &uuml;bertragen
StrSQL1 = "SELECT Datum,Bezeichnung FROM Feiertage"
Conn.CursorLocation = 3 ' adUseClient
Set rs1 = Conn.Execute(StrSQL1)
IntAnzahlFeiertage = rs1.RecordCount
IntArrayCount = 0
ReDim ArrFeierTage(IntAnzahlFeiertage,1)
Do While Not rs1.Eof
    ArrFeierTage(IntArrayCount,0) = rs1("Datum")
    ArrFeierTage(IntArrayCount,1) = rs1("Bezeichnung")
    IntArrayCount = IntArrayCount + 1
    rs1.Movenext
Loop
'Urlaubstage in Array &uuml;bertragen
StrSQL1 = "SELECT Datum, Anzahl FROM Urlaub WHERE (maid = " 
    &amp; ID &amp; ") AND (Year(datum) = " &amp; IntAktuellesJahr &amp; ")"
Conn.CursorLocation = 3 ' adUseClient
Set rs1 = Conn.Execute(StrSQL1)
IntUrlaubstageZahl = rs1.RecordCount
IntArrayCount = 0
ReDim ArrUrlaubsTage(IntUrlaubsTageZahl,1)
Do While Not rs1.Eof
    ArrUrlaubstage(IntArrayCount,0) = rs1("Datum")
    Arrurlaubstage(IntArrayCount,1) = rs1("Anzahl")
    IntArrayCount = IntArrayCount + 1
    rs1.Movenext
Loop
</pre>

<p>
Zun&auml;chst initialisieren wir die zwei Arrays "ArrKranktagemonat" und "ArrUrlaubsTageMonat" mit jeweils 11 
Elementen. Danach lassen wir die Zahl der Urlaub- und Krankheitstage f&uuml;r alle Monate auf den Wert "0" 
initialisieren. Die weitere Verwendung der beiden Arrays wird sp&auml;ter erkl&auml;rt.
</p>

<p>
Nun lesen wir die Feiertage aus der Tabelle "Feiertage". Hierzu verwenden wir ein client-side Recordset, soda&szlig; 
sofort alle Datens&auml;tze geholt werden. Hierdurch  haben wir die M&ouml;glichkeit sofort mittels "rs1.RecordCount" die 
Anzahl der Datens&auml;tze zu lesen (wir sparen uns hierdurch eine COUNT-Abfrage). Mit diesem Wert dimensionieren wir das 
<a href="20000927.htm">zweidimensionale Array</a> "ArrFeiertage". Danach lesen wir die 
Feiertage selbst in einer Schleife aus der Tabelle. Bei jedem Schleifendurchlauf lassen wir jeweils das Datum und 
die Bezeichnung des Feiertags in das Array schreiben. Au&szlig;erdem lassen wir einen Z&auml;hler "IntArrayCount" erh&ouml;hen. 
Auch zu dessen Verwendung sp&auml;ter mehr. Somit haben wir die Feiertage von der Datenbank in ein Array &uuml;bertragen. Exakt 
den gleichen Vorgang wiederholen wir nun mit der Tabelle "Urlaub", welche wir in das Array "ArrUrlaubstage" &uuml;bertragen.
</p>

<p>
Jetzt k&ouml;nnen wir mit der bereits theoretisch abgehandelten Generierung der einzelnen Kalendertage beginnen. 
Hierzu ben&ouml;tigen wir ein Feld, das 12 x 31 Felder gro&szlig; ist (12 Monate, max. 31 Tage je Monat). Bedingt durch die 
Art wie HTML-Tabellen aufgebaut werden, m&uuml;ssen wir hierbei die Tabelle zeilenweise von links oben nach rechts 
unten generieren. Somit ben&ouml;tigen wir zwei verschachtelte For-Next-Schleifen, die von "1" bis "31" (f&uuml;r die Tage) und 
von "1" bis "12" (f&uuml;r die Monate) z&auml;hlen, wobei die erste Schleife die &auml;u&szlig;ere Schleifen darstellt. In der ersten 
Spalte stehen die Tageszahlen, welche durch den Z&auml;hlerwert der &auml;u&szlig;eren Schleife dargestellt werden:
</p>

<pre style="background='silver';">
For IntCounterI = 1 To 31
    Response.Write "&lt;tr&gt;"
    Response.Write "    &lt;td class=""headline""&gt;"
    Response.Write IntCounterI
    Response.Write "&lt;/td&gt;"
</pre>

<p>
Mit der ersten Anweisung der inneren Schleife definieren wir, da&szlig; die aktuelle Zelle nicht belegt ist.
Au&szlig;erdem genieren wir das Datum dieser Zelle:
</p>

<pre style="background='silver';">
    For IntMonat = 1 To 12
        Response.Write "&lt;td class=""tage""&gt;"
        bIstBelegt = False
        DatDatum = (IntMonat &amp; "/" &amp; IntCounterI &amp; "/" &amp; IntAktuellesJahr)
</pre>

<p>
Dieses besteht aus dem Z&auml;hler der inneren Schleife, dem Z&auml;hler der &auml;u&szlig;eren Schleife und dem aktuellen Datum. 
Dieses wird im amerikanischen Datumsformat erzeugt, um Probleme beim Schreiben, Lesen und Vergleichen mit dem 
Datum in den Datenbanktabellen zu vermeiden. Um einen Vergleich des Datums mit dem Datum im Array vornehmen zu 
k&ouml;nnen, mu&szlig; es hingegen im deutschen Format vorliegen.:
</p>

<pre style="background='silver';">
If IntCounterI &lt; 10 Then
    If IntMonat &lt; 10 Then
        ArrDatum = ("0" &amp; IntCounterI &amp; "." &amp; "0" &amp; IntMonat &amp; "." &amp; IntAktuellesJahr)
    Else
        ArrDatum = ("0" &amp; IntCounterI &amp; "." &amp; IntMonat &amp; "." &amp; IntAktuellesJahr)
    End If
Else
    If IntMonat &lt; 10 Then
        ArrDatum = (IntCounterI &amp; "." &amp; "0" &amp; IntMonat &amp; "." &amp; IntAktuellesJahr)
	Else
        ArrDatum = (IntCounterI &amp; "." &amp; IntMonat &amp; "." &amp; IntAktuellesJahr)
    End If
End If
</pre>

<p>
F&uuml;r den Vergleich m&uuml;ssen die beiden zu vergleichenden Daten nicht auf "Datums-Ebene" identisch sein, sondern auf 
"String-Ebene". Deshalb werden f&uuml;hrende Nullen in den Datumsangaben "Tag" und "Monat" ben&ouml;tigt. Dies erledigt 
der oben gezeigte Code, in Abh&auml;ngigkeit davon, ob die Zahlen gr&ouml;&szlig;er oder kleiner "10" sind. Zahlen kleiner "10" 
m&uuml;ssen mit einer f&uuml;hrenden Null versehen werden. Zahlen gr&ouml;&szlig;er "10" nicht.
</p>

<p>
Nun folgt der eigentliche Vergleich zwischen dem Datum der Zelle und dem Datum des Feiertags im Array:
</p>

<pre style="background='silver';">
If IsDate(DatDatum) = True Then
    For IntCountFeiertage = 0 To UBound(ArrFeierTage)
        If CStr(ArrFeierTage(IntCountFeiertage,0)) = CStr(ArrDatum) Then
            Response.Write("&lt;div class=""nodate"" title=""" &amp; 
            ArrFeierTage(IntCountFeiertage,1) &amp; """&gt;Feiertag&lt;/div&gt;")
            bIstBelegt = True
        End If
    Next
</pre>

<p>
Zuvor wird noch &uuml;berpr&uuml;ft, ob das Datum, das im amerikanischen Format vorliegt, g&uuml;ltig ist. Hierzu verwenden wir die 
"IsDate()"-Funktion. Ist das Datum g&uuml;ltig, so wird in einer Schleife, die das komplette "Feiertagsarray" durchl&auml;uft 
gepr&uuml;ft, ob in dem Array ein Datum existiert, welches dem aktuellen Datum auf Stringebene entspricht. Ist dies der 
Fall, so wird in dieser Zelle der CSS-Style entsprechend gesetzt. Au&szlig;erdem wird das Wort "Feiertag" in die Zelle 
geschrieben. Als Titeltext des Wortes "Feiertag" wird der Name des Feiertags ausgegeben. Dieser wird angezeigt, wenn 
man mit dem Mauszeiger &uuml;ber dem Wort "Feiertag" verweilt. Au&szlig;erdem setzen wir eine Markierung, da&szlig; das Feld jetzt 
belegt ist.
</p>

<p>
Die n&auml;chste Pr&uuml;fung, die wir durchf&uuml;hren ist, ob es sich um einen Samstag oder Sonntag handelt:
</p>

<pre style="background='silver';">
If bIstBelegt &lt;&gt; True Then
    Select Case WeekDay(IntCounterI &amp; "." &amp; IntMonat &amp; "." &amp; IntAktuellesJahr)
    Case 1
        Response.Write("&lt;div class=""nodate"" title=""Sonntag""&gt;So.&lt;/div&gt;")
        bIstBelegt = True
    Case 7
        Response.Write("&lt;div class=""nodate"" title=""Samstag""&gt;Sa.&lt;/div&gt;")
        bIstBelegt = True
    End Select
End If
</pre>

<p>
Nachdem gepr&uuml;ft wurde, ob das Feld evtl. bereits belegt ist (durch einen Feiertag), wird falls das Feld noch nicht 
belegt ist, mittels der WeekDay-Funktion &uuml;berpr&uuml;ft um welchen Wochentag es sich handelt. Sollte es sich um einen 
Samstag oder Sonntag handeln, so werden die entsprechenden K&uuml;rzel und Titeltexte in die Zelle ausgegeben. 
Auch hier wird, falls etwas in die Zelle geschrieben wurde, die Markierung "bIstBelegt" gesetzt.
</p>

<p>
Kommen wir nun zur Pr&uuml;fung, ob bereits ein Urlaubs- oder Krankheitstag im entsprechenden Array existiert, so da&szlig; dieser 
im Bedarfsfall angezeigt wird.
</p>

<pre style="background='silver';">
For IntCounterX = 0 To UBound(ArrUrlaubsTage)
    If CStr(ArrUrlaubsTage(IntCounterX,0)) = CStr(ArrDatum) Then IntAnzahlTemp = 
        arrurlaubstage(IntCounterX,1)
Next
If IntAnzahlTemp &lt;&gt; "" Then
Response.Write("&lt;div title=""Klicken, um den Urlaub-/Krankheitstag 
    zu l&ouml;schen"" class=button onclick=")
    Response.Write(chr(34))
    Response.Write("doModalDel('" &amp; IntCounterI &amp;"." &amp; IntMonat &amp; "."&amp; 
        IntAktuellesJahr &amp; "'" &amp; "," &amp; "'" &amp; ID &amp; "'" &amp; "," 
            &amp; "'" &amp; StrMAName &amp; "'" &amp; ")" &amp; chr(34))
    If IntAnzahlTemp = 0 Then 
        VarAnzahl = "Krank"
        Arrkranktagemonat(IntMonat - 1) = Arrkranktagemonat(IntMonat - 1) + 1
    Else
        VarAnzahl = FormatNumber(IntAnzahlTemp,1)
    End If
    Response.Write("&gt;" &amp; VarAnzahl &amp;"&lt;/div&gt;")		
    ArrUrlaubsTageMonat(IntMonat - 1) = ArrUrlaubsTageMonat(IntMonat - 1) + IntAnzahlTemp
Else
    If bIstBelegt = False Then
        Response.Write("&lt;div title=""Klicken, um Urlaub-/Krankheitstag 
            einzutragen"" class=button onclick=")
        Response.Write(chr(34))
        Response.Write("doModalAdd('" &amp; IntCounterI &amp;"." &amp; IntMonat &amp; "." 
            &amp; IntAktuellesJahr &amp; "'" &amp; "," &amp; "'" &amp; ID &amp; "'" &amp; "," 
            &amp; "'" &amp; StrMAName &amp; "'" &amp; ")" &amp; chr(34))
        Response.Write("&gt;&amp;nbsp;&lt;/div&gt;")
    End If
End If
IntAnzahlTemp=""
</pre>

<p>
Zun&auml;chst pr&uuml;fen wir wie bereits bei den Feiertagen auf "String-Ebene", ob im Array "ArrUrlaubsTage" 
ein Datumseintrag existiert, der mit dem Datum der aktuellen Zelle &uuml;bereinstimmt. Ist dies der 
Fall, so wird in die Variable "IntAnzahlTemp" die Zahl der Urlaubstage (1 oder 0,5), welche zu 
diesem Datum im Array geh&ouml;rt, gespeichert.
</p>

<p>
Darauf folgt die Abfrage der Variable "IntAnzahlTemp", ob diese leer ist. Ist das nicht der Fall, 
existiert ein Urlaubstag, der in die Zelle eingetragen werden mu&szlig;. Da hierf&uuml;r auch die 
M&ouml;glichkeit geschaffen werden mu&szlig;, den Urlaubstag zu l&ouml;schen, ben&ouml;tigen wir den Aufruf einer 
entsprechenden Funktion im OnClick-Event der Zelle. Hierf&uuml;r verwenden wir wieder einmal Modal 
Dialogs, doch dazu sp&auml;ter mehr - akzeptieren Sie den Aufruf so, wie er im Moment ist. Sollte die 
Zahl in "IntAnzahlTemp" gleich "0" sein, so handelt es sich um einen Krankheitstag. Entsprechend 
wird der Z&auml;hler im Array "Arrkranktagemonat" (das wir bereits dimensioniert haben), f&uuml;r den momentan 
bearbeiteten Monat um den Wert "1" erh&ouml;ht. Ist "IntAnzahlTemp" gleich "0,5" oder "1", so handelt 
es sich um einen Urlaubstag. Entsprechend einem halben (0,5) oder ganzen (1) Urlaubstag wird 
auch hier der Z&auml;hler im Array "ArrUrlaubsTageMonat" um den Faktor "0,5" oder "1" erh&ouml;ht. Sollte 
kein Urlaubs- oder Krankheitstag im Array auffindbar gewesen sein, der dem Datum der Zelle entspricht, 
mu&szlig; in die Zelle die M&ouml;glichkeit integriert werden, einen Urlaubs- oder Krankheitstag zu erzeugen. 
Auch dies geschieht &uuml;ber einen Modal Dialog, dessen Aufruf analog zum vorherigen geschieht.
</p>

<p>
Am Ende dieser &Uuml;berpr&uuml;fung wird die Variable "IntAnzahlTemp" wieder geleert, damit sie f&uuml;r 
den n&auml;chsten Durchlauf der Schleife "initialisiert" ist.
</p>

<p>
Schlie&szlig;lich fehlt noch der Fall, da&szlig; die IsDate-Pr&uuml;fung, von der wir die letzten drei Pr&uuml;fungen 
abh&auml;ngig machten, fehlschlug:
</p>

<pre style="background='silver';">
Else
Response.Write("&lt;div class=""nodate2"" title=""Tag nicht 
    vorhanden in diesem Monat""&gt;&amp;nbsp;&lt;/div&gt;")
End If
</pre>

<p>
Sollte das der Fall sein, so lassen wir eine Zelle generieren, welche im Titeltext angibt, 
da&szlig; der entsprechende Tag kein Tag des Monats ist.
</p>

<p>
Nachdem unsere beiden Schleifen von "1" bis "31" und von "1" bis "12" komplett durchlaufen 
wurden, haben wir die Hauptarbeit an unserem Urlaubsplaner bereits geschafft. Was jetzt 
noch fehlt, ist die Summierung der Urlaubs- und Krankheitstage der jeweiligen Monate und 
die schlu&szlig;endliche Anzeige.
</p>

<p>
Beginnen wir mit der Anzeige der Urlaubstage je Monat. Diese folgt direkt im Anschlu&szlig; 
unter dem Kalender:
</p>

<pre style="background='silver';">
Response.Write "&lt;tr&gt;"
Response.Write "	&lt;td class=""headline""&gt;Urlaub&lt;/td&gt;"
For IntCounterI = 0 To 11
    Response.Write "&lt;td class=""tage""&gt;" &amp; FormatNumber(ArrUrlaubsTageMonat
        (IntCounterI),1) &amp; "&lt;/td&gt;"
Next
Response.Write "&lt;/tr&gt;"
</pre>

<p>
Hierzu lassen wir einfach in einer Schleife von "0" bis "11" (bei 0 beginnend, da Arrays 0-basierend sind, 
wir erhalten also 12 Durchl&auml;ufe) den Inhalt des Arrays "ArrUrlaubsTageMonat" ausgeben.
</p>

<p>
In der n&auml;chsten Zeile des Urlaubsplaners befindet sich die Ausgabe des Resturlaubs nach Abzug des Urlaubs 
des Monats. Au&szlig;erdem wird eventuell ausbezahlter Urlaub (welcher bisher als ausgetragener Urlaub 
bezeichnet wurde) abgezogen:
</p>

<pre style="background='silver';">
Response.Write " &lt;td class=""headline""&gt;Rest&lt;/td&gt;"
For IntCounterI = 0 To 11
    Response.Write "    &lt;td class=""tage""&gt;"
    IntAustrag = 0
    StrSQLAustrag = "SELECT * FROM urlaubaustrag WHERE (MAID = " &amp; ID &amp; ") 
        AND (Monat= " &amp; (IntCounterI + 1) &amp; ") AND (Jahr = " &amp; IntAktuellesJahr &amp; ")"
    Set rsAustrag = Conn.Execute(StrSQLAustrag)
    If Not rsAustrag.Eof Then IntAustrag = rsAustrag("Austrag")
    IntGesamtJahrverbleibend = IntGesamtJahrverbleibend - 
        (ArrUrlaubsTageMonat(IntCounterI) + IntAustrag)
    rsAustrag.Close
    Response.Write(FormatNumber(IntGesamtJahrverbleibend,1))
    Response.Write "&lt;/td&gt;"
Next
</pre>

<p>
Hierzu erzeugen wir wieder eine Schleife, die von "0" bis "11" z&auml;hlt. Innerhalb dieser Schleife 
lassen wir aus der Datenbanktabelle "Urlaubaustrag" den f&uuml;r den jeweiligen Monat ausgetragenen 
Urlaub lesen. Danach lassen wir von dem urspr&uuml;nglich verf&uuml;gbaren Jahresurlaub 
"IntGesamtJahrverbleibend" den genommenen Urlaub des jeweiligen Monats und den Urlaubaustrag 
aus der Datenbank abziehen. Den erhaltenen Wert lassen wir dann als Resturlaub f&uuml;r 
diesen Monat ausgeben.
</p>

<p>
In der dritten Zeile befindet sich die M&ouml;glichkeit, Urlaub auszutragen, falls der Mitarbeiter z.B. 
Urlaub ausbezahlt bekommt, oder Urlaub verfallen sollte. Der entsprechende Code sieht wie folgt aus:
</p>

<pre style="background='silver';">
Response.Write "&lt;tr&gt;"
Response.Write " &lt;td class=""headline""&gt;Austrag&lt;/td&gt;"
For IntCounterI = 0 To 11
    Response.Write "    &lt;td class=""tage""&gt;"
    IntAustrag = 0
    StrSQLAustrag = "SELECT * FROM urlaubaustrag WHERE (MAID = " &amp; ID &amp; ") 
        AND (Monat= " &amp; (IntCounterI + 1) &amp; ") AND (Jahr = " &amp; IntAktuellesJahr &amp; ")"
    Set rsAustrag = Conn.Execute(StrSQLAustrag)
    If Not rsAustrag.Eof Then
        IntAustrag = rsAustrag("Austrag")
        Response.Write "&lt;div title=""Klicken, um den Austrag zu l&ouml;schen"" 
            class=button onclick="
        Response.Write(chr(34))
        Response.Write("doModalAustragDel('" &amp; rsAustrag("ID") 
            &amp;"'" &amp; ")" &amp; chr(34))
        Response.Write("&gt;" &amp; FormatNumber(IntAustrag,1) &amp;"&lt;/div&gt;")
    Else
        Response.Write "&lt;div title=""Klicken, um Urlaub auszutragen 
            / auszubezahlen"" class=button onclick="
        Response.Write(chr(34))
        Response.Write("doModalAustrag('" &amp; (IntCounterI+1) &amp;"'" &amp; "," &amp; "'" 
            &amp; ID &amp; "'" &amp; "," &amp; "'" &amp; IntAktuellesJahr &amp; "'" &amp; "," &amp; "'" &amp; 
            IntGesamtJahrverbleibend &amp; "'" &amp; ")" &amp; chr(34))
        Response.Write("&gt;" &amp; FormatNumber(IntAustrag,1) &amp;"&lt;/div&gt;")
    End If
    rsAustrag.Close	
    Response.Write "&lt;/td&gt;"
Next
Response.Write "&lt;/tr&gt;"
</pre>

<p>
Zun&auml;chst wird der Urlaubaustrag aus der Datenbanktabelle "Urlaubaustrag" gelesen. Ist f&uuml;r den aktuellen Monat 
kein Austrag vorhanden, so wird unter Angabe des f&uuml;r dieses Jahr noch verf&uuml;gbarer Urlaubs sowie der 
Mitarbeiter-ID, dem Monat und dem Jahr die Funktion "doModalAustrag()" aufgerufen. Falls bereits 
Urlaub ausgetragen wurde, besteht mittels "doModalAustragDel()" unter Angabe der ID des Austrags 
die M&ouml;glichkeit, den Austrag zu l&ouml;schen. Das Anlegen und L&ouml;schen des Austrags ist bis auf marginale 
Unterschiede identisch mit dem unter "Speichern und L&ouml;schen von Urlaubs- bzw Krankheitstagen" weiter unten 
im Artikel beschriebenen Vorgang identisch.
</p>

<p>
Schlie&szlig;lich fehlen uns nur noch die Krankheitstage je Monat, welche wir auf dem gleichen Weg erhalten, wie 
die Urlaubstage je Monat:
</p>

<pre style="background='silver';">
Response.Write "    &lt;td class=""headline""&gt;Krank&lt;/td&gt;"
IntKrankGesamt = 0
For IntCounterI = 0 To 11
    Response.Write "&lt;td class=""tage""&gt;" &amp; FormatNumber
        (Arrkranktagemonat(IntCounterI),1) &amp; "&lt;/td&gt;"
    IntKrankGesamt = IntKrankGesamt + Arrkranktagemonat(IntCounterI)
Next
</pre>

<p>
Einzig das verwendete Array unterscheidet sich hier.
</p>

<p>
Nun m&uuml;ssen wir nur noch, wie am Anfang der Erkl&auml;rungen definiert, die Summen der Urlaub- und 
Krankheitstage via JavaScript in die beiden noch leeren Felder "beantragter Urlaub 2001" und  
"Krankheitstage 2001" einf&uuml;gen. Dies erledigt der folgende Code:
</p>

<pre style="background='silver';">
Response.Write "&lt;scr" &amp; "ipt type=""text/javascript""&gt;" &amp; VbCrLf
Response.Write "{" &amp; VbCrLf
Response.Write "genommen.innerHTML="""
Response.Write FormatNumber(IntGesamtJahrFix - IntGesamtJahrverbleibend,1)
Response.Write """" &amp; VbCrLf
Response.Write "krankgesamt.innerHTML="""
Response.Write FormatNumber(IntKrankGesamt,1)
Response.Write """" &amp; VbCrLf
Response.Write "}" &amp; VbCrLf
Response.Write "&lt;/scr" &amp; "ipt&gt;" &amp; VbCrLf
</pre>

<p>
Hiermit wird einfach mittels <a href="http://www.teamone.de/selfhtml/tfba.htm#a4" target="_blank">innerHTML</a> 
auf die definierten Objekte zugegriffen und deren Wert mit den Werten f&uuml;r die Urlaubs- 
und Krankheitstage &uuml;berschrieben.
</p>

<h3>Speichern und L&ouml;schen von Urlaubs- bzw Krankheitstagen</h3>

<p>
Wie bereits erw&auml;hnt verwenden wir f&uuml;r das L&ouml;schen und Speichern von Urlaubs- bzw. 
Krankheitstagen Modal Dialogs. Deren Aufruf erfolgt durch folgende Scripts:
</p>

<pre style="background='silver';">
&lt;SCRIPT&gt;
&lt;!--
function doModalDel(datum,maid,maname){
    var cSearchValue=showModalDialog("delete.asp?datum=" + datum + "&amp;id=" + maid + 
        "&amp;name=" + maname,0,"dialogHeight: 120px; dialogWidth: 450px; dialogTop: ; 
        dialogLeft: px; center: Yes; help: No; resizable: No; scroll: No; status: No;");
	
    if (cSearchValue == 1)
    {
       self.location.reload();
    }
}
--&gt;
&lt;/SCRIPT&gt;
&lt;SCRIPT&gt;
&lt;!--
function doModalAdd(datum,maid,maname){
    var cSearchValue=showModalDialog("change.asp?datum=" + datum + "&amp;id=" + 
        maid + "&amp;name=" + maname,0,"dialogHeight: 120px; dialogWidth: 400px; dialogTop: ; 
        dialogLeft: px; center: Yes; help: No; resizable: No; scroll: No; status: No;");
	
    if (cSearchValue == 1)
    {
       self.location.reload();
    }
}
--&gt;
&lt;/SCRIPT&gt;
</pre>

<p>
Diese erwarten als Parameter jeweils das Datum, f&uuml;r den der Tag eingetragen oder gel&ouml;scht werden soll 
sowie die ID und den Namen des Mitarbeiters.
</p>

<p>
Beginnen wir mit dem Hinzuf&uuml;gen von Urlaubs- und Krankheitstagen. Dies findet, wie in der Funktion 
"<i>doModalAdd()</i>" zu sehen ist, in der Datei <b>change.asp</b> statt.
</p>

<p>
Diese beherbergt zun&auml;chst ein Frameset, aus dem aus dem zweiten Artikel bekannten Problem (Modaldialogs und Formulare). 
Das Frameset beinhaltet nur einen Frame, welcher auf die Datei "change1.asp" verweist. Diese beinhaltet vier 
Buttons, wie im Screenshot zu sehen ist:
</p>

<IMG SRC="Bilder/200109/20010921_10.png" width="399" height="120" alt="" border="0">

<p>
Jedem Button ist eine JavaScript- Funktion zugeordnet, welche beim Klick auf den Button ausgef&uuml;hrt wird. Die ersten drei Buttons f&uuml;hren dazu, da&szlig; die Seite "makeentry.asp" mit der entsprechend Anzahl der einzutragenden Tage (0, 0,5 oder 1) aufgerufen wird. Der Button "Abbrechen" macht seinem Namen alle Ehre und schlie&szlig;t das Popup ohne weitere Aktionen umgehend.
</p>

<p>
Da wir nat&uuml;rlich wissen m&ouml;chten, was sich in der Datei <b>makeentry.asp</b> abspielt, haben wir auf einen der drei 
ersten Buttons geklickt. Der Inhalt der Datei ist allerdings schnell erkl&auml;rt:
</p>

<p>
Nachdem wir die aus der vorangegangenen Seite &uuml;bergebenen Variablen eingelesen haben, speichern wir diese in die 
Datenbanktabelle "Urlaub":
</p>

<pre style="background='silver';">
anzahl=cdbl(tag_zahl)
strDate = DatePart("d",datum) &amp; "." &amp; DatePart("m",datum) 
    &amp; "." &amp; DatePart("yyyy",datum)
SQLQuery = "INSERT INTO urlaub (MaID,Datum,Anzahl) VALUES 
    ('" &amp; int(id) &amp; "','" &amp; strDate &amp; "','" &amp; anzahl1 &amp; "')"
Set RS = Conn.Execute(SQLQuery)
Conn.close
</pre>

<p>
Das folgende, mittels OnLoad-Event-Handler aufgerufene Skript, schlie&szlig;t schlie&szlig;lich das PopUp und &uuml;bergibt an die 
das PopUp &ouml;ffnende "doModalAdd()"-Funktion den Returnvalue "1", wodurch die Anweisung die Seite <b>default.asp</b>
neu l&auml;dt:
</p>

<pre style="background='silver';">
&lt;script&gt;
function doOK() {
    top.returnValue="1";
    top.close();
}
&lt;/script&gt;
</pre>

<p>
Der Aufruf der Funktion "doModalDel()" zum L&ouml;schen von Urlaubs- und Krankheitstagen erfolgt analog und 
unterscheidet sich im wesentlichen nur durch die DELETE-Anweisung in der Seite <b>delentry.asp</b>:
</p>

<pre style="background='silver';">
strDate = DatePart("m",datum) &amp; "/" &amp; DatePart("d",datum) 
    &amp; "/" &amp; DatePart("yyyy",datum)
SQLQuery = "DELETE FROM urlaub WHERE (MaID=" &amp; id &amp; ") 
    AND (datum= #" &amp; strDate &amp; "#)"
Set RS = Conn.Execute(SQLQuery)
Conn.close
</pre>

<h3>Anlegen von Feiertagen</h3>

<p>
Um die in der Tabelle "Feiertage" gespeicherten Feiertag zu administrieren, 
wurde ein weiterer Assistent integriert:
</p>

<IMG SRC="Bilder/200109/20010921_11.png" width="504" height="387" alt="" border="0">

<p>
Der Assistent stellt Ihnen, wie im Screenshot zu sehen ist, die M&ouml;glichkeit zur Verf&uuml;gung Feiertage zu 
definieren bzw. zu l&ouml;schen. Diese stehen dann unter anderem im Urlaubsplaner zur Verf&uuml;gung.
</p>

<p>
Um den Feiertagsassistenten in Betrieb nehmen zu k&ouml;nnen, m&uuml;ssen Sie in der Administrationsseite f&uuml;r die 
Mitarbeiteroptionen eine allgemeine Mitarbeiteroption anlegen, die folgenden Link aufruft:
</p>

<pre style="background='silver';">
javascript:doModalFeiertage()
</pre>

<p>
Die Datei <b>tree.asp</b> wurde um die ben&ouml;tigte Funktion erweitert.
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
Hiermit sind wir am Ende der f&uuml;nfteiligen Artikelserie zur Erstellung eines Intranet mit Active Server Pages 
angelangt. Ich hoffe, da&szlig; Sie aus dem vorgestellten Code sowohl einen theoretischen als auch praktischen Nutzen 
ziehen konnten. Sobald neue Module zu ASPIntranet fertiggestellt werden, wird es hier weitere Artikel zu diesem 
Thema geben.
</p>

<h4>Redaktioneller Hinweis</h4>
<p>
Aufgrund des Umfanges des Intranets - und der damit m&ouml;glichen Fehlerquellen bei der Umsetzung auf den unterschiedlichen
Serverkonfigurationen der Leser - bittet der Autor, die Anfragen &uuml;ber &ouml;ffentliche Foren
(so zum Beispiel <a href="http://www.aspgerman.com/aspgerman/listen/anmelden/aspGerman.asp" target="_blank">aspGerman</a>)
oder die <a href="http://www.aspintranet.de/aspintranet/mailingliste../default.htm?a=106" target="_blank">ASPIntranet Mailingliste</a>
abzuwickeln. Fehler in ASPIntranet können Sie auf der 
<a href="http://www.aspintranet.de/aspintranet/reportabug../default.htm?a=109" target="_blank">Bugreport-Seite</a> 
von ASPIntranet melden.
</p>
<h2>Download des Codes</h2>
<p><a href="../Code/20010921.zip">Klicken Sie hier</a>, um den Download zu starten.</p>
<h2>Verwandte Artikel</h2>
<p>
<a href="20000927.htm">Das Array, unendliche Weiten?</a><br>
<a href="20001023.htm">Das SQL Join Statement</a><br>
<a href="20010917.htm">Erstellung eines Intranets in ASP - Grundlagen</a><br>
<a href="20010918.htm">Erstellung eines Intranets in ASP (Teil 2) - Setup</a><br>
<a href="20010919.htm">Erstellung eines Intranets in ASP (Teil 3) - Navigation</a><br>
<a href="20010920.htm">Erstellung eines Intranets in ASP (Teil 4) - Mitarbeiter</a><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Easpintranet%2Ede%2F">ASPIntranet</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Easpintranet%2Ede%2Faspintranet%2Fdownload%2Fdefault%2Easp%3Fa%3D72">ASPIntranet Download</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fsupport%2Emicrosoft%2Ecom%2Fsupport%2Fkb%2Farticles%2Fq229%2F6%2F90%2Easp">HOWTO: Set the ASP Locale ID Per the Browser's Language Settings</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fmsdn%2Emicrosoft%2Ecom%2Flibrary%2Fdefault%2Easp%3Furl%3D%2Flibrary%2Fen%2Dus%2Fdndude%2Fhtml%2Fdude07232001%2Easp">MSDN: Sort Behavior</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eteamone%2Ede%2Fselfhtml%2Ftfba%2Ehtm%23a4">selfhtml: innerHTML</a><br>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Eteamone%2Ede%2Fselfhtml%2Ftcea%2Ehtm%23a4">selfhtml: THEAD</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20010921" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Erstellung eines Intranets in ASP (Teil 5) - Application Day"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20010921.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Alexander Zeitler"><input type="hidden" name="AuthorEmail" value="azeitler@aspintranet.de"><input type="hidden" name="Artikel" value="20010921"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20010921.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
