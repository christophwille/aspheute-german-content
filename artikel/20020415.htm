<HTML>
<HEAD>
<TITLE>Programmieren mit den Google Web APIs Beta 2</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Ein neuer Web Service sind die Google Web APIs, mit denen man auf Such-, Cache- und Spellingdienste dieser sehr beliebten Suchmaschine zugreifen kann. Heute sehen wir uns, wie man die APIs in seine .NET Anwendungen einbauen kann.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,Web Service,Consumer,Google Web APIs,Suchmaschine,Spelling,Windows Application,Beispiel,Sample">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Programmieren mit den Google Web APIs Beta 2</H1>
<p>
Geschrieben von: <a href="../autoren/christophwille.htm">Christoph Wille</a><br>
Kategorie: <a href="../kategorien/Web%20Services.htm">Web Services</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20020415"></SCRIPT>
</p>
<p>
Langsam aber sicher tauchen die ersten interessanten Web Services am Internet auf. Einer davon sind die
Google Web APIs, mit denen man auf Such-, Cache- und Spellingdienste dieser sehr beliebten Suchmaschine
zugreifen kann. Heute sehen wir uns, wie man die APIs in seine .NET Anwendungen einbauen kann.
</p>
<p>
Das SDK und die Beispiele k&ouml;nnen von <a href="http://www.google.com/apis/" target="_blank">Google Web APIs </a>
downgeloadet werden. Die Registrierung ist kurz und schmerzlos, aber sehr wichtig: nach der Registrierung
bekommt man einen Key zugemailt, den man bei allen Anfragen mitschicken mu&szlig;. Mit diesem Key kann man bis zu maximal
1000 Abfragen pro Tag absetzen.
</p>
<p>
Im SDK findet sich eine Kurzdokumentation in Form eines HTML Dokuments, eine WSDL Datei f&uuml;r Verwendung in beliebigen 
Programmiersprachen, sowie fertige Beispiele (und Klassen) f&uuml;r Java und .NET. Wer sich ein schnelles Erfolgserlebnis 
g&ouml;nnen will, sollte das Beispiel im Order <b>\googleapi\dotnet</b> in VS.NET aufmachen und starten:
</p>

<IMG SRC="Bilder/200204/20020415_4.png" width="384" height="320" alt="" border="0">

<p>
Mit dieser Beispielapplikation kann man in die Programmierung der drei Bereiche - Search, Cache und Spelling - 
hineinschnuppern. Der Sourcecode ist in C# geschrieben, und die Komplexheit h&auml;lt sich in engen Grenzen.
</p>

<h2>Suchanfragen durchf&uuml;hren</h2>
<p>
Die Beispielanwendung ist in letzteren beiden Bereichen ausreichend, aber bei Search kann man einiges mehr machen, als
die Beispielanwendung zeigt. Deshalb habe ich eine kleine Windows Forms Anwendung programmiert, die auch Resultate
abholen kann:
</p>

<IMG SRC="Bilder/200204/20020415_2.png" width="584" height="392" alt="" border="0">

<p>
Es handelt sich hierbei um eine C# Windows Application. Auf der Form befinden sich zwei Textboxen, eine f&uuml;r den Key
und eine f&uuml;r den Abfragebefehl. Durch Klicken auf Start Search wird das Google Web API angestossen, und die Resultate
der Suchanfrage zur&uuml;ckgeholt (maximal zehn pro Roundtrip mit dem Server). Diese werden dann in die ListView eingetragen.
</p>
<p>
Neben der anf&auml;nglichen Designarbeit sind zwei Arbeitsschritte wichtig: das Hinzuf&uuml;gen einer Referenz auf die
<i>System.Web.Services</i> Assembly sowie das Einbinden der Datei <b>GoogleSearchService.cs</b>. Diese Datei kommt
mit der Beispielanwendung aus dem Google Web APIs SDK, und erspart uns die zus&auml;tzliche Arbeit, eine Web Referenz auf
den tats&auml;chlichen Web Service zu erzeugen. Der Solution Explorer sieht dann so aus:
</p>

<IMG SRC="Bilder/200204/20020415_3.png" width="273" height="259" alt="" border="0">

<p>
Bevor man zur Arbeit schreitet, ein kleiner Tip: es gibt im Visual Studio die immer hilfreiche Class View - dort kann man
sich einen &Uuml;berblick &uuml;ber die verschiedenen Klassen der Google Web APIs verschaffen. Zur Referenz hier der vollst&auml;ndig
expandierte Class View mit den vier Klassen <i>GoogleSearchService</i>, <i>GoogleSearchResult</i>, <i>ResultElement</i> und <i>DirectoryCategory</i>.
</p>

<IMG SRC="Bilder/200204/20020415_1.png" width="598" height="674" alt="" border="0">

<p>
Mit diesen Information inklusive des Beispielcodes kann man sich an die Implementierung wagen. Hier meine Version f&uuml;r das
Starten der Suchanfrage:
</p>

<pre style="background='silver';">
private void btnStartSearch_Click(object sender, System.EventArgs e)
{
  GoogleSearchService gss = new GoogleSearchService();
  GoogleSearchResult gsr = null;
  labelEstimatedResults.Text = "";

  // issue the search command
  try
  {
    gsr = gss.doGoogleSearch(txtKey.Text, // Key
      txtSearchString.Text,  // Search string
      0,    // start index
      10,    // max results
      false,  // filter
      "",    // restriction
      false,  // safe search
      "",    // lr
      "",    // ie
      "");  // or
  }
  catch (Exception ex)
  {
    // intention: give a friendly error message for invalid license key
    // note: this will also catch network connectivity problem on starting the search
    string strError = ex.Message;
    if (strError.StartsWith("Exception from service object: Invalid authorization key"))
    {
      strError = "License key for Google search is invalid";
    }
    MessageBox.Show(strError, "Error invoking Google Search Service");
    return;
  }
</pre>

<p>
Der Unterschied zum Beispielcode im SDK ist das Exceptionhandling, das zwei Ziele verfolgt: erstens das Abfangen von
Netzwerkfehlern, zweitens eine freundliche Fehlermeldung auszugeben, wenn man einen falschen Key eingegeben
haben sollte - ein reiner Exceptiontext ist nicht benutzerfreundlich! 
</p>
<p>
Wer den Beispielcode im SDK nicht lesen m&ouml;chte:
die Methode <i>doGoogleSearch</i> der <i>GoogleSearchService</i> Klasse schickt den Abfragebefehl inklusive diverser
Parameter an den Server. Das Result ist eine Instanz der <i>GoogleSearchResult</i> Klasse, mit der wir nun unsere
Suchresultate auslesen k&ouml;nnen:
</p>

<pre style="background='silver';">
  // get the estimated number of results - important for paging
  int nEstimatedResultRow = gsr.estimatedTotalResultsCount;
  labelEstimatedResults.Text = "Estimated # of results: " + 
    nEstimatedResultRow.ToString();

  // get all results that were returned (10 maximum as per API)
  // BeginUpdate and EndUpdate are used to speed up drawing and minimize flickering
  lvResults.BeginUpdate();
  lvResults.Items.Clear();
  ResultElement[] arrResultset = gsr.resultElements;
  for (int i=0; i &lt; arrResultset.Length; i++)
  {
    ListViewItem lvi = new ListViewItem();
    lvi.Text = arrResultset[i].title;
    lvi.SubItems.Add(arrResultset[i].URL);
    lvResults.Items.Add(lvi);
  }
  lvResults.EndUpdate();
}
</pre>

<p>
Zuerst lesen wir die gesch&auml;tzte Anzahl an Resultaten aus, und schreiben diese dann in eine Label-Control. Danach geht
es ans updaten der <i>ListView</i>. Um kein Flackern der ListView zu provozieren, verwende ich hier <i>BeginUpdate</i> und <i>EndUpdate</i>,
die mir eine "Transaktion" rund um alle Befehle der ListView legen - ein Update passiert erst nach <i>EndUpdate</i>.
</p>
<p>
Abgesehen von der ListView Control und deren <i>ListViewItem</i>s arbeite ich hier haupts&auml;chlich mit einem Array aus 
<i>ResultElement</i>s, das ich &uuml;ber die Eigenschaft <i>resultElements</i> ausgelesen habe. Die vollst&auml;ndige Definition der <i>ResultElement</i>
Klasse finden Sie im Screenshot der Class View weiter oben, in diesem Beispiel lese ich nur die <i>title</i> und <i>URL</i>
Eigenschaften aus, und erstelle damit ein <i>ListViewItem</i>. Wenn alle Elemente des Arrays ausgelesen sind, bekommt man
ein Resultat wie hier zu sehen:
</p>

<IMG SRC="Bilder/200204/20020415_2.png" width="584" height="392" alt="" border="0">

<p>
Als kleines zus&auml;tzliches Goodie habe ich noch den Doppelklick in die Applikation eingebaut:
</p>

<pre style="background='silver';">
private void lvResults_DoubleClick(object sender, System.EventArgs e)
{
  if (0 == lvResults.SelectedItems.Count) return;
  ListViewItem lvi = lvResults.SelectedItems[0]; // we only start first one
  string strUrl = lvi.SubItems[1].Text;
  Process.Start(strUrl);
}
</pre>

<p>
Was macht dieser Code? Wenn man auf ein Item der ListView doppelklickt, wird Internet Explorer automatisch mit
der Webadresse des aktuell selektierten Items gestartet. Nur vier Zeilen Code f&uuml;r ein praktisches Feature, praktisch.
</p>
<p>
Ein wichtiges Detail fehlt noch - das Paging durch die Resultate. Wie im Screenshot zu sehen ist, haben wir mit 23
Resultaten zu rechnen. Wie kommt man an die restlichen, weil ich zeige ja immer nur die ersten maximal zehn Resultate
an? Nun, des R&auml;tsels L&ouml;sung liegt in der <i>doGoogleSearch</i> Methode:
</p>

<pre style="background='silver';">
gsr = gss.doGoogleSearch(txtKey.Text, // Key
      txtSearchString.Text,  // Search string
      0,    // start index
      10,    // max results
      false,  // filter
      "",    // restriction
      false,  // safe search
      "",    // lr
      "",    // ie
      "");  // or
</pre>

<p>
Um weitere Resultate zu erhalten, mu&szlig; man im dritten Parameter den Startindex jeweils um (Seite * Max Results) anpassen. That's it.
</p>


<h2>Schlu&szlig;bemerkung</h2>
<p>
Mit den Google Web APIs gibt es einen Web Service, den man als gutes Beispiel f&uuml;r die Sinnhaftigkeit von Web Services
nehmen kann. Eine tiefe Integration von Google's Suchfunktionen in eigene Anwendungen oder Web Seiten wird dadurch
leicht m&ouml;glich.
</p>
<h2>Download des Codes</h2>
<p><a href="../Code/20020415.zip">Klicken Sie hier</a>, um den Download zu starten.</p>
<h2>Verwandte Artikel</h2>
<p>
<a href="20021029.htm">Amazon.com Web Services 2.0</a><br>
<a href="20021107.htm">Index Server Abfragen per Web Service</a><br>
<a href="20010703.htm">Web Services einfach konsumieren</a><br>
<a href="20010622.htm">Web Services in Anwendungen konsumieren</a><br>

</p>
<h2>Links zu anderen Sites</h2>
<p>
<a target="_blank" href="/REMOVED/3w_link.asp?3wsite=http%3A%2F%2Fwww%2Egoogle%2Ecom%2Fapis%2F">Google Web APIs</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Eine weitere sehr hilfreiche Resource ist das <a href="http://aspxfiles.com/">deutsche ASP.NET Wiki</a>,
das als zentrale Anlaufstelle f&uuml;r Tips, Tricks, Know How und alles N&uuml;tzliche was man in seinem Alltag als 
(ASP).NET-Entwickler so braucht und entdeckt gedacht ist. 
</p>

<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20020415" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Programmieren mit den Google Web APIs Beta 2"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20020415.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Christoph Wille"><input type="hidden" name="AuthorEmail" value="christophw@alphasierrapapa.com"><input type="hidden" name="Artikel" value="20020415"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20020415.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
