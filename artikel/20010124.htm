<HTML>
<HEAD>
<TITLE>Dateiupload mit ASP.NET und VB.NET</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="Mit ASP war und ist es nicht m&ouml;glich ohne eine zus&auml;tzlichen Dritthersteller-Komponente vern&uuml;nftig Dateien auf einen Webserver upzuloaden. Mit ASP.NET steht eine solche Uploadkomponente von Haus aus zur Verf&uuml;gung - gratis.">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,ASP.NET,VB.NET,Upload,Fileupload,Dateiupload,HttpPostedFile,FILE,FileStream,Exception">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Dateiupload mit ASP.NET und VB.NET</H1>
<p>
Geschrieben von: <a href="../autoren/christianholm.htm">Christian Holm</a><br>
Kategorie: <a href="../kategorien/VBdotNET.htm">VB.NET</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20010124"></SCRIPT>
</p>
<p>
Mit ASP war und ist es nicht m&ouml;glich ohne eine zus&auml;tzlichen Dritthersteller-Komponente vern&uuml;nftig 
Dateien auf einen Webserver upzuloaden. Mit ASP.NET steht eine solche Uploadkomponente von Haus aus
zur Verf&uuml;gung - gratis, und wie dieser Artikel zeigt, einfach in der Anwendung.
</p>

<p>
Wie gesagt, unter ASP ben&ouml;tigt man Fremdkomponenten, um mittels ASP Dateien am Webserver
entgegennehmen zu k&ouml;nnen. ASP.NET bietet diese Funktionalit&auml;t mit einer HTML Control namens 
<i>HtmlInputFile</i>, die sich von der bereits bekannten <nobr><i>INPUT TYPE=FILE</i></nobr> 
im Groben nur durch das <i>RUNAT=SERVER</i> Tag unterscheidet. Aber sie ist fixer Bestandteil
des Produkts, managed den Upload f&uuml;r Sie, und verh&auml;lt sich am Browser wie die normale Control
die Sie bereits kennen.
</p>
<p>
In diesem Artikel stelle ich zwei Anwendungsf&auml;lle des Dateiuploads vor:
</p>

<ul>
	<li>Upload in eine Datei
	<li>Upload unter Verwendung des FileStream Objektes
</ul>

<p>
Bei ersterem Ansatz handelt es sich um die einfachste L&ouml;sung, der zweite demonstriert ein
sehr flexibles Konzept wie man die Daten des Uploads selbst in Empfang nehmen und weiterverarbeiten
kann.
</p>
<p>
Voraussetzung um den Sourcecode dieses Artikels verwenden zu k&ouml;nnen ist eine Installation des <i>Microsoft .NET Framework SDK's</i> auf
einem Webserver. Weiters setze ich voraus, da&szlig; der Leser die Programmiersprache VB.NET zu einem gewissen Grad beherrscht.
</p>

<h2>Upload in eine Datei</h2>
<p>
Sehen Sie sich den nachfolgenden Screenshot an - solche Beispiele d&uuml;rften Ihnen vom Dateiupload
unter ASP auch bereits bekannt sein.
</p>
<p><IMG SRC="Bilder/200101/20010124_1.png" width="517" height="315" alt="" border="0"></p>
<p>
Obwohl es von "au&szlig;en" nicht viel anders aussieht, so passiert unter der Haube doch etwas deutlich
anderes als wir es von ASP gewohnt sind. Dazu werden wir jetzt den Sourcecode genauer ansehen (<b>UploadFile.aspx</b>):
</p>

<pre style="background='silver';">
&lt;% @Page Language="VB" %&gt;
&lt;html&gt;
&lt;head&gt;
    &lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;

       Sub btnUpload_Click(sender As Object, e As EventArgs) 
        
          If txtSaveAs.Value = &quot;&quot; Then
             txtInfo.InnerHtml = &quot;Dateiname ben&ouml;tigt!&quot;
             Return
          End If

          If Not IsNothing(File2Upld.PostedFile) Then
         
             Try
                File2Upld.PostedFile.SaveAs(txtSvrPath.Value + txtSaveAs.Value)
                txtInfo.InnerHtml = &quot;Datei erfolgreich am Web Server auf &lt;b&gt;c:\Uploaded Files\&quot; &amp;_
                     txtSaveAs.Value &amp; &quot;&lt;/b&gt; gespeichert&quot;

             Catch Exc As Exception
                txtInfo.InnerHtml = &quot;Fehler beim Speichern in &lt;b&gt;&quot; &amp; txtSvrPath.Value &amp;_
                     txtSaveAs.Value &amp; &quot;&lt;/b&gt;&lt;br&gt;&quot; &amp; Exc.ToString
             End Try
          End If
       End Sub

    &lt;/script&gt;

&lt;/head&gt;
&lt;body&gt;

&lt;form enctype=&quot;multipart/form-data&quot; runat=&quot;server&quot;&gt;

  &lt;table border=&quot;0&quot; cellpadding=&quot;2&quot; cellspacing=&quot;2&quot;&gt;
  &lt;tr&gt;
      &lt;td&gt;Datei: &lt;/td&gt; 
      &lt;td&gt;&lt;input id=&quot;File2Upld&quot; type=file runat=&quot;server&quot;&gt;&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;Web Server Pfad: &lt;/td&gt;
      &lt;td&gt;&lt;input id=&quot;txtSvrPath&quot; type=&quot;text&quot; runat=&quot;server&quot;&gt;&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;Speichern als: &lt;/td&gt;
      &lt;td&gt;&lt;input id=&quot;txtSaveAs&quot; type=&quot;text&quot; runat=&quot;server&quot;&gt;&lt;/td&gt;
   &lt;/tr&gt;
   &lt;tr&gt;
      &lt;td&gt;&lt;input type=button id=&quot;btnUpload&quot; 
                  value=&quot;Upload&quot; OnServerClick=&quot;btnUpload_Click&quot;
                  runat=&quot;server&quot;&gt;&lt;/td&gt;
   &lt;/tr&gt;
&lt;/table&gt;
  &lt;span id=txtInfo runat=&quot;server&quot; /&gt;

&lt;/form&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>
Betrachten wir f&uuml;r den Anfang nur das Formular, das die Datei (und den Namen, den sie am Server
erhalten soll) an den Server schickt. Da wir gemischte Daten schicken, ist der <i>enctype</i> auf
<nobr><i>multipart/form-data</i></nobr> gesetzt. Das ist noch nichts Neues. Das Einzige, das auf ASP.NET 
hinweist ist da&szlig; das Form am Server ausgef&uuml;hrt wird (<i>RUNAT=&quot;SERVER&quot;</i>).
</p>
<p>
In diesem Formular verwende ich im Gegensatz zum Artikel 
<a href="20000728.htm">On-the-fly Generierung von Graphiken</a> keine Web Controls,
sondern HTML Controls - deswegen sieht es auch sehr vertraut aus. Allerdings w&uuml;rde man unter
ASP sicher nicht das finden:
</p>

<pre style="background='silver';">
    &lt;input type=button id=&quot;btnUpload&quot; value=&quot;Upload&quot; 
        OnServerClick=&quot;btnUpload_Click&quot; runat=&quot;server&quot;&gt;
</pre>

<p>
Der Klick auf den Button l&ouml;st am Server ein Event aus, das in der Funktion <i>btnUpload_Click</i>
abgehandelt wird. Und somit sind wir beim Code, der notwendig ist, um eine Datei am Server
erfolgreich abzuspeichern:
</p>

<pre style="background='silver'";>
If Not IsNothing(File2Upld.PostedFile) Then
        
   Try
     File2Upld.PostedFile.SaveAs(txtSvrPath.Value + txtSaveAs.Value)
     txtInfo.InnerHtml = &quot;Datei erfolgreich am Web Server auf &lt;b&gt;c:\Uploaded Files\&quot; &amp;_
         txtSaveAs.Value &amp; &quot;&lt;/b&gt; gespeichert&quot;

   Catch Exc As Exception
      txtInfo.InnerHtml = &quot;Fehler beim Speichern in &lt;b&gt;&quot; &amp; txtSvrPath.Value &amp;_
         txtSaveAs.Value &amp; &quot;&lt;/b&gt;&lt;br&gt;&quot; &amp; Exc.ToString
  
   End Try
   
End If
</pre>

<p>
Das ist zwar nicht exakt der gesamte Sourcecode aus dem Beispiel, allerdings fehlt nur das "Rundherum"
f&uuml;r die Namensvergabe am Server - der Fileupload funktioniert hier ebenso. 
Die <i>if</i> Abfrage &uuml;berpr&uuml;ft, ob eine Datei gepostet wurde, indem sie die Eigenschaft <i>PostedFile</i>
gegen die verneinte <i>IsNothing</i> Funktion pr&uuml;ft. Diese ist das &Auml;quvivalent zu <i>null</i> in C#. 
</p>

<p>
Wird eine Datei upgeloadet, so h&auml;lt diese Eigenschaft eine g&uuml;ltige Referenz
auf ein Objekt vom Typ <i>HttpPostedFile</i>, und ist somit verschieden von <i>Nothing</i>.
</p>

<p>
Nach diesem Sicherheitscheck bleibt uns "nur noch" die Datei zu speichern - ein simpler Aufruf der
Funktion <i>SaveAs</i> auf dem Objekt <i>HttpPostedFile</i> erledigt alles f&uuml;r uns. Sollte etwas schiefgehen,
wird unser Code dar&uuml;ber mit einer Exception benachrichtigt. So einfach ist es in ASP.NET eine Datei
auf den Webserver zu laden.
</p>
<p>
Der Code im Beispiel selbst differiert nur dahingehend, da&szlig; die Datei einen benutzergew&auml;hlten Namen
erhalten kann. Dadurch ist er zwar etwas l&auml;nger, aber bereits sehr flexibel. Der Weiterverwendung
und Erweiterung in eigenen Projekten steht nichts im Wege.
</p>

<h2>Upload unter Verwendung des FileStream Objektes</h2>
<p>
So nett und sch&ouml;n das einfache Speichern der upgeloadeten Datei in eine Datei am Server
auch sein kein, so oft m&ouml;chte man mit den upgeloadeten Daten (den Bits) sofort wieder
weiterarbeiten - ohne den Umweg in eine Datei. Anwendungsf&auml;lle w&auml;ren etwa die Daten in 
die Datenbank zu speichern, die Daten zu parsen, oder irgendeine andere Bearbeitung durchzuf&uuml;hren. 
</p>
<p>
Auch in diesem Fall l&auml;&szlig;t uns ASP.NET und das .NET Framework nicht im Stich. Anstatt die Kontrolle
mit der <i>SaveAs</i> Funktion aus der Hand zu geben, kann man direkten Zugriff auf den FileStream der
upgeloadeten Daten bekommen und mit diesen sofort weiterarbeiten - w&auml;hrend der Upload passiert.
</p>
<p>
Das Beispiel, das ich zu Demonstrationszwecken gebastelt habe, erf&uuml;llt derzeit nur einen
Zweck: die upgeloadeten Daten werden aus dem FileStream ausgelesen und in einer Stringvariablen 
zwischengespeichert - um dann einfach an den Client zur&uuml;ckgeschickt zu werden. F&uuml;r Textuploads
mag das bereits sinnvoll sein, bei bin&auml;ren Uploads (Bilder zum Beispiel) ist der Output nicht
gerade &uuml;berw&auml;ltigend:
</p>
<p><IMG SRC="Bilder/200101/20010124_2.png" width="487" height="377" alt="" border="0"></p>
<p>
Der vorige Screenshot zeigt, da&szlig; mein Sourcecode (<b>UploadFileStream.aspx</b>) auch mit bin&auml;ren 
Daten - in diesem Fall ein kompiliertes C# Executable - korrekt umgehen kann. Dies erreiche ich durch 
eine erzwungene Konvertierung auf den ASCII-Zeichensatz.
Die Details dazu k&ouml;nnen Sie dem Sourcecode und der folgenden Beschreibung entnehmen.
</p>

<pre style="background='silver';">
&lt;html&gt;

&lt;script language=&quot;VB&quot; runat=&quot;server&quot;&gt;

Sub btnFileUpld_Click(sender As Object, e As EventArgs) 

  If Not IsNothing(txtFileName.PostedFile) Then
	
     Try 
		
       const BUFFER_SIZE As Integer = 255 
       Dim nBytesRead As Integer = 0
       Dim Buffer(BUFFER_SIZE) As Byte
       Dim strBFileContent As New StringBuilder(&quot;&quot;)	
       Dim FileStream As Stream = txtFileName.PostedFile.InputStream
			
       nBytesRead = FileStream.Read(Buffer, 0, BUFFER_SIZE)
			
         While 0 &lt;&gt; nBytesRead
	
           strBFileContent.Append(Encoding.ASCII.GetString(Buffer,0,nBytesRead))
           nBytesRead = FileStream.Read(Buffer,0,BUFFER_SIZE)
		
         End While		
        
           txtInfo.InnerHtml = strBFileContent.ToString()
	
     Catch Exc As Exception

               txtInfo.InnerHtml = &quot;Fehler beim Speichern von &lt;b&gt;&quot; + 
               txtFileName.PostedFile.FileName + &quot;&lt;/b&gt;&lt;br&gt;&quot;
               + e.ToString()

     End Try

   End If

End Sub

&lt;/script&gt;

&lt;body&gt;

&lt;table&gt;
&lt;form enctype=&quot;multipart/form-data&quot; runat=&quot;server&quot;&gt;
&lt;tr&gt;
  &lt;td&gt;Datei:&lt;/td&gt;
  &lt;td&gt;&lt;input id=&quot;txtFileName&quot; type=file runat=&quot;server&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
  &lt;td colspan=&quot;2&quot;&gt;
  &lt;input type=button id=&quot;btnFileUpld&quot; 
                            value=&quot;Speichern&quot; 
                            OnServerClick=&quot;btnFileUpld_Click&quot; 
                            runat=&quot;server&quot;&gt;
  &lt;/td&gt;
&lt;/tr&gt;
&lt;/form&gt;
&lt;/table&gt;
    
&lt;span id=txtInfo runat=&quot;server&quot; /&gt;

&lt;/body&gt;
&lt;/html&gt;
</pre>

<p>
Der Formularteil des Scripts ist bereits aus dem vorigen Listing bekannt, einzig und allein das Feld
f&uuml;r die Namensgebung der Datei am Server fehlt - man braucht es nicht mehr. Was sind nun aber
die &Auml;nderungen am Code f&uuml;r den Upload selbst? Im Grunde ist es nur dieser Part:
</p>

<pre style="background='silver';">
const BUFFER_SIZE As Integer = 255 

Dim nBytesRead As Integer = 0
Dim Buffer(BUFFER_SIZE) As Byte
Dim strBFileContent As New StringBuilder(&quot;&quot;)
Dim FileStream As Stream = txtFileName.PostedFile.InputStream
			
nBytesRead = FileStream.Read(Buffer, 0, BUFFER_SIZE)
			
While 0 &lt;&gt; nBytesRead
   strBFileContent.Append(Encoding.ASCII.GetString(Buffer,0,nBytesRead))
   nBytesRead = FileStream.Read(Buffer,0,BUFFER_SIZE)
End While		
</pre>

<p>
Zuerst definiere ich eine Konstante, und instanziere darauffolgend drei Variablen, die in der Bearbeitung
der Streamdaten ben&ouml;tigt werden: eine Variable, die die Anzahl der gelesenen Bytes speichert, der
Puffer f&uuml;r die gelesenen Daten, und der StringBuilder, der dazu verwendet wird, um die auf ASCII
konvertierten eingelesenen Streamdaten zu speichern.
</p>
<p>
Und dann beginnt die Action - zuerst hole ich mir eine Referenz auf den <i>Stream</i>, der &uuml;ber das
Object <i>HttpPostedFile</i> zur Verf&uuml;gung gestellt wird (dieses wiederum &uuml;ber die Eigenschaft <i>PostedFile</i>
des <i>HtmlInputFile</i> Objects). Dadurch erspare ich mir weitere Zugriffe auf Eigenschaften und
fremde Objekte, die nur die Rechenzeit verl&auml;ngern w&uuml;rden.
</p>
<p>
Dann lese ich die ersten Daten ein, und steige damit in die <i>While</i>
Schleife ein. Dort wird der Puffer auf ASCII Zeichensatz konvertiert, und die n&auml;chsten Daten eingelesen. Die
<i>While</i> Schleife wird dann abgebrochen, wenn keine Daten mehr am Server angekommen sind.
</p>
<p>
Ist die <i>While</i> Schleife beendet, habe ich die Daten als String zur Weiterverarbeitung in der Hand -
anstatt sie zur&uuml;ck an den Client zu schicken, k&ouml;nnte ich auch den String parsen - oder in eine 
Datenbank schreiben.
</p>
<p>
&Uuml;brigens: wenn man die unmodifizierten Bin&auml;rdaten verwenden m&ouml;chte, dann
sollte man die Konvertierung auf ASCII unterlassen, und je nach Bedarf den richtigen
&quot;Zwischenspeicher&quot; verwenden - ein gro&szlig;es Bytearray, einen MemoryStream oder eigene Datenstrukturen.
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
In diesem Artikel habe ich Ihnen zwei Methoden des Dateiuploads vorgestellt: das Speichern der
upgeloadeten Datei am Server mit Hilfe der <i>HtmlInputFile.PostedFile Property</i> und der <i>SaveAs</i> 
Methode, sowie das direkte Auslesen der Daten mit Hilfe des <i>FileStream</i> Objekts. Erstere hat aber die 
Einschr&auml;nkung, da&szlig; diese bei einer gr&ouml;&szlig;eren Anzahl von Dateien umst&auml;ndlich wird. Der Grund liegt dabei in den 
Sicherheitsrichtlinien.
</p>
<h2>Download des Codes</h2>
<p><a href="../Code/20010124.zip">Klicken Sie hier</a>, um den Download zu starten.</p>
<h2>Verwandte Artikel</h2>
<p>
<a href="20010510.htm">Beliebige Anzahl von Dateien uploaden</a><br>
<a href="20010221.htm">Dateien auslesen mit VB.NET</a><br>
<a href="20010202.htm">Dateiupload mit ASP und WSC</a><br>
<a href="20000802.htm">Dateiupload mit ASP.NET</a><br>
<a href="20010507.htm">Web-basiertes Dateimanagement mit dem ASP FileMan</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Eine weitere sehr hilfreiche Resource ist das <a href="http://aspxfiles.com/">deutsche ASP.NET Wiki</a>,
das als zentrale Anlaufstelle f&uuml;r Tips, Tricks, Know How und alles N&uuml;tzliche was man in seinem Alltag als 
(ASP).NET-Entwickler so braucht und entdeckt gedacht ist. 
</p>

<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20010124" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Dateiupload mit ASP.NET und VB.NET"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20010124.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Christian Holm"><input type="hidden" name="AuthorEmail" value="office@holmcs.com"><input type="hidden" name="Artikel" value="20010124"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20010124.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
