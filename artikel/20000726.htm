<HTML>
<HEAD>
<TITLE>Datentypen in C#</TITLE>
<META HTTP-EQUIV="content-type: text/html; charset= ISO-8859-1">
<META HTTP-EQUIV="Content-Language" CONTENT="DE">
<META NAME="robots" CONTENT="FOLLOW,INDEX">
<META NAME="generator" CONTENT="Xitra Site Publishing">
<meta name="Author" content="webmaster@aspheute.com">

<META NAME="revisit-after" CONTENT="7 days">
<META NAME="copyright" CONTENT="(c) 2000-2006. Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich geschützt.">
<META HTTP-EQUIV="expires" CONTENT="1999-03-30T00:00:00+00:00"> 
<META HTTP-EQUIV="Pragma" CONTENT="no-cache">
<META HTTP-EQUIV="Cache-Control" CONTENT="no-store">

<meta http-equiv="Description" name="Description" content="In diesem Artikel m&ouml;chte ich Ihnen die Datentypen von C# (sprich "C sharp") erkl&auml;ren. Dies ist zugegebenerma&szlig;en eines der trocken Kapitel aus der C#-Programmierung...">
<meta http-equiv="Keywords" name="Keywords" content="ASP,Active Server Pages,IIS,Internet Information Server,PWS,Personal Web Server,ADO,C#,Datentypen,NGWS,.NET,.NET Framework,framework,int,long,string,array,interface,class,boxing,unboxing">
<link rel="stylesheet" href="../includes/default.css">
</HEAD>
<BODY BGCOLOR="#ffffff"  BACKGROUND="../images/layout/aspheutemainbg.gif" >


<div style="border-bottom: solid 5px white;">
<div class="DotNetGermanCommunityBar">
    <a href="http://www.glengamoi.com">Glengamoi (Forum)</a> &middot;
    <a href="http://www.aspheute.com/" style="font-weight: bold">AspHeute</a> &middot;
    <a href="http://dotnetheute.com/">.NET Heute (RSS-Suche)</a> &middot;
    <a href="http://aspxfiles.com/">AspxFiles (Wiki)</a> &middot;
    <a href="http://blogs.dotnetgerman.com/">.NET Blogs</a>
</div>
</div>


<MAP NAME="titlebar">
<!--<AREA SHAPE=RECT COORDS="116,46,191,61" HREF="http://www.aspaktuell.com" ALT="ASP Aktuell">-->
<!--<AREA SHAPE=RECT COORDS="192,46,255,61" HREF="http://www.aspwelt.com" ALT="ASP Welt">-->
<AREA SHAPE=RECT COORDS="256,46,432,61" HREF="http://www.aspgerman.com/aspgerman/" ALT="ASP German">
<AREA SHAPE=RECT COORDS="115,15,269,42" HREF="../default.htm" ALT="Homepage">
<AREA SHAPE=RECT COORDS="278,26,587,42" HREF="../default.htm" ALT="Homepage">
</MAP>

<div style="position:absolute;left:0px;top:30px">
<table border=0 cellspacing=0 cellpadding=0>
<tr>
<td background="../images/layout/aspheutetitle.gif">
<img src="../images/layout/blind.gif" width="715" height="73" usemap="#titlebar" border="0">
</td>
<td width="100%" background="../images/layout/aspheutetitleext.gif">
&nbsp;
</td>
<td background="../images/layout/aspheutetitleend.gif">
<img src="../images/layout/blind.gif" width="25" height="1">
</td>
</tr>
</table>
</div>

<div style="position:absolute;left:1px;top:115px">
<table width="110" border="0" cellspacing="0" cellpadding="0">
<tr><td width="110"><img src="../Images/spacer.gif" width="110" height="1" alt="" border="0"></td></tr>
<tr>
<td background="../images/layout/aspheuteheader.gif" class="header" height=16 width="110">
<p>Liste</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">

<p class="content">
<a href="../kategorien/dotNET%202dot0.htm">.NET 2.0 (1)</a><br>
<a href="../kategorien/dotNET%20Allgemein.htm">.NET Allgemein (16)</a><br>
<a href="../kategorien/dotNET%20Fu.htm">.NET Fu (5)</a><br>
<a href="../kategorien/ADOdotNET.htm">ADO.NET (11)</a><br>
<a href="../kategorien/Aprilscherz.htm">Aprilscherz (3)</a><br>
<a href="../kategorien/ASP%20Grundlagen.htm">ASP Grundlagen (44)</a><br>
<a href="../kategorien/ASP%20Tricks.htm">ASP Tricks (83)</a><br>
<a href="../kategorien/ASPdotNET.htm">ASP.NET (44)</a><br>
<a href="../kategorien/ASPIntranetdotde.htm">ASPIntranet.de (5)</a><br>
<a href="../kategorien/Csharp.htm">C# (28)</a><br>
<a href="../kategorien/Datenbank.htm">Datenbank (44)</a><br>
<a href="../kategorien/Dokumentation.htm">Dokumentation (4)</a><br>
<a href="../kategorien/IIS%206dot0.htm">IIS 6.0 (1)</a><br>
<a href="../kategorien/Komponenten.htm">Komponenten (29)</a><br>
<a href="../kategorien/Optimierung.htm">Optimierung (10)</a><br>
<a href="../kategorien/Server.htm">Server (21)</a><br>
<a href="../kategorien/Sicherheit.htm">Sicherheit (34)</a><br>
<a href="../kategorien/Tee%20Off.htm">Tee Off (6)</a><br>
<a href="../kategorien/VBdotNET.htm">VB.NET (6)</a><br>
<a href="../kategorien/WAP.htm">WAP (8)</a><br>
<a href="../kategorien/Web%20Services.htm">Web Services (11)</a><br>
<a href="../kategorien/XML.htm">XML (9)</a><br>


<br>
<a href="/syndication/rss.xml"><img src="../Images/rss_small.png" width="25" height="10" alt="RSS 2.0 - Die neuesten f&uuml;nf Artikel auf AspHeute.com" border="0"></a>

</p><!-- </p> remains -->


<br>

</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearch.gif" class="header" height=16 width="110">
<p>Suchen</p>
</td>
</tr>
<tr>
<td background="../images/layout/aspheutesearchext.gif" class="header" width="110">
<form class="content" ACTION="REMOVED" METHOD="GET">
<div>
<input class="Newsletter" type="text" size="10" name="CiRestriction">
<span class="spacer2"><br></span>
<span class="spacer4"><br></span>
<INPUT TYPE="HIDDEN" NAME="CiMaxRecordsPerPage" VALUE="10">
<INPUT TYPE="HIDDEN" NAME="CiSort" VALUE="rank[d]">
<INPUT TYPE="HIDDEN" NAME="HTMLQueryForm" VALUE="../default.htm">
<img src="../images/layout/blind.gif" width="41" height="1"><input type="image" src="../images/layout/aspheutesearchenter.gif" border="0" width="49" height="14"><br>
<span class="spacer4"><br></span>
</div>
</form>
</td>
</tr>
<tr>
<td class="empty" width="110">
&nbsp;
</td>
</tr>
<tr>
<td background="../images/layout/aspheuteheaderext.gif" class="header" width="110">
<p class="content">
<a href="/REMOVED/" title="Our most popular articles translated into English">English Articles</a><br>
<a href="/REMOVED/" title="Visit our Chinese content section">Chinese Articles</a><br>
<a href="../autoren/UnsereAutoren.htm" title="Unsere Autoren">Unsere Autoren</a><br>
&nbsp;<br>
<a href="/REMOVED/link2us.asp" title="Setzen Sie einen Link zu AspHeute!">Link zu AspHeute</a><br>
<a href="/REMOVED/impressum.asp" title="Das Impressum von AspHeute">Impressum</a><br>
<a href="/REMOVED/advertise.asp" title="Werben auch Sie auf AspHeute">Werben</a><br>
<a href="/REMOVED/kontakt.asp" title="Teilen Sie uns Ihre W&uuml;nsche, Beschwerden und Anregungen mit">Anfragen</a><br>
</p>
</td>
</tr>
</table>
</div>



<!-- Content starts here  -->
<div style="position:absolute;left:120px;top:108px">
<table cellspacing="0" cellpadding="0"><!--Tabelle aussen-->
<tr><!--Tabelle aussen, 1/2-->
<td><!--Tabelle aussen, 1/1-->
    <table border=0 align=center><tr><td align=center>


</td></tr></table>

<H1>Datentypen in C#</H1>
<p>
Geschrieben von: <a href="../autoren/christianholm.htm">Christian Holm</a><br>
Kategorie: <a href="../kategorien/Csharp.htm">C#</a><br>
<SCRIPT src="/service/artikelbewertung.asp?Artikel=20000726"></SCRIPT>
</p>
<p>
In diesem Artikel m&ouml;chte ich Ihnen die Datentypen von C# (sprich "C sharp") erkl&auml;ren. Obwohl C# mit 
C++ verwandt ist, hat sich auch einiges in der Definition und in der Behandlung der Datentypen 
ge&auml;ndert. 
So einfach sich dieses Thema vielleicht auch anh&ouml;ren mag, Datentypen stellen unter anderem die 
Grundstruktur eines Programmes dar, und k&ouml;nnen bei falscher Implementation zu &auml;rgerlichen 
Compilerfehlern f&uuml;hren.
</p>
<p>
<b>Anmerkung:</b> Dadurch da&szlig; in C#, wie auch in C++, der Sourcecode in Englisch gehalten ist, werde 
ich die sprachspezifischen Befehle, Schl&uuml;sselw&ouml;rter etc., unver&auml;ndert lassen und gegebenfalls das 
deutsche &Auml;quivalent verwenden; z.B. floating point- / Flie&szlig;komma-.
</p>


<h2>Einteilung der Datentypen</h2>
<p>
Grunds&auml;tzlich lassen sich die Datentypen wie folgt in drei Kategorien einteilen:
<ul>
	<li><i>value-type</i>
	<li><i>reference-type</i>
	<li><i>pointer-type</i>
</ul>
</p>

<p>
<b>Anmerkung zu &quot;pointer-types&quot;:</b>
Diese Typen k&ouml;nnen <i>nur</i> im sogenannten Unsafe Code verwendet werden. Pointer (Zeiger)
beinhalten Adressen zu Speicherorten. Da in dieser Hinsicht in C# Vereinfachungen f&uuml;r den Entwickler
getroffen wurden (u. a. der Garbage Collector, kurz GC, der nun die Speicherverwaltung &uuml;ber hat) 
sollten 
diese nur mehr eingeschr&auml;nkt verwendet werden, um Kollisionen mit gesch&uuml;tztem Speicherbereich oder 
"Exception Errors" zu vermeiden.
</p>
<p>Der Unterschied zwischen value-types und reference-types liegt darin, da&szlig; value-types die 
tats&auml;chlichen Daten
enthalten und reference-types einen Bezug auf die Daten beinhalten.<br>
Mit den reference-types ist es z.B. m&ouml;glich, da&szlig; zwei Variablen sich auf ein und dasselbe Objekt beziehen. 
Damit ist man in der Lage das Objekt mit der einen Variable manipulieren, w&auml;hrend die &Auml;nderung in 
beiden Variablen sichtbar ist.
</p>
<p>
Da jeder value-type eine eigene Kopie der Daten besitzt, k&ouml;nnen Manipulationen an der einen Variable  
die andere nicht beeinflu&szlig;en.</p>
<p>

<h3>Value-Types</h3>
<p>
Dieser Datentyp ist entweder ein <i>struct</i>-Typ oder ein <i>enumeration</i>-Typ. C# enth&auml;lt 
vordefinierte struct-types welche auch <i>simple-types</i> genannt werden. 
Eine Variable enth&auml;lt immer einen Wert im Datentyp der ihr zugewiesen wurde. Bevor Sie in C# eine 
Variable verwenden k&ouml;nnen, m&uuml;ssen Sie diese zwingend vorher deklarieren.
</p>
<p>
In C# werden die Variablen-Typen nun eingeteilt in:
<ul>	
	<li><i>simple-types</i>
	<li><i>struct-types</i> 
	<li><i>enumeration-types</i>
</ul>
</p>
<p>
Besprechen wir nun die <i>simple-types</i>:
Diese unterteilen sich in 
<ul>
	<li><i>integral-types</i> (Integer Datentyp)
	<li><i>decimal-types</i> 
	<li><i>floating point-types</i> (Flie&szlig;komma Datentyp) 
	<li><i>bool-types</i>
	<li><i>char-type</i>
</ul>
</p>
<p><b>Die wichtigsten Datentypen seien hier ausf&uuml;hrlicher beschrieben:</b></p>

<h4><i>Integral Types</i></h4>

<p>In C# gibt es neun integral-types: byte, sbyte, short, ushort, int, uint, long und ulong. Der Typ char 
soll sp&auml;ter extra beschrieben werden. Die aufgez&auml;hlten Datentypen haben folgende Eigenschaften:</p>
<p>
<table cellspacing="5" cellpadding="2" border="1">
<tr>
    <td>Daten-Typ</td>
    <td>G&uuml;ltigkeitsbereich</td>
    <td>Bitgr&ouml;&szlig;e</td>
</tr>
<tr>
    <td>byte</td>
    <td>0 bis 255</td>
    <td>Unsigned 8-bit integer </td>
</tr>
<tr>
    <td>sbyte</td>
    <td>-128 bis 127</td>
    <td>Signed 8-bit Integer</td>
</tr>
<tr>
    <td>short</td>   
    <td>-32.768 bis 32.767</td>
    <td>Signed 16-bit Integer</td>
</tr>
<tr>
    <td>ushort</td>
    <td>0 bis 65.535</td>
    <td>Unsigned 16-bit Integer</td>
</tr>
<tr>
    <td>int</td>
    <td>-2.147.483.648 bis 2.147.483.647</td>
    <td>Signed 32-bit Integer</td>
</tr>
<tr>
    <td>uint</td>
    <td>0 bis 4.294.967.295</td>
    <td>Unsigned 32-bit Integer</td>
</tr>
<tr>
    <td>long</td>
    <td>&#150;9.223.372.036.854.775.808 bis 9.223.372.036.854.775.807</td>
    <td>Signed 64-bit Integer</td>
</tr>
<tr>
    <td>ulong</td>
    <td>0 bis 18.446.744.073.709.551.615</td>
    <td>Unsigned 64-bit Integer</td>
</tr>
<tr>
    <td>char</td>
    <td>U+0000 bis U+ffff</td>
    <td>Unicode 16-bit Zeichen</td>
</tr>
</table>
</p>

<p><b>Beachte:</b>
Wie Ihnen sicher schon aufgefallen ist, haben <i>integer</i> und <i>long</i> andere
G&uuml;ltigkeitsbereiche als in C++. 
In C# ist <i>integer</i> nicht mehr von einem <i>word</i> abh&auml;ngig und <i>long</i> hat jetzt eine 
Bitgr&ouml;&szlig;e von 64 bit.
</p>

<h4><i>Decimal Type</i></h4>

<p>Der Decimal Datentyp hat eine Gr&ouml;&szlig;e von 128 Bit. Er weist also eine hohe Genauigkeit gegen&uuml;ber dem 
floating point-type auf, hat aber im Vergleich zum floating point-type einen engeren 
G&uuml;ltigkeitsbereich. Dieser Datentyp ist dienlich f&uuml;r finanzmathematische Berechungen oder 
W&auml;hrungsumrechungen. Der G&uuml;ltigkeitsbereich geht von 1,0 * 10^-28 bis 7,9 * 10^28 mit 28-29 
signifikanten Stellen. </p>

<p><b>Beachte:</b> Die Genauigkeit ist in signifikanten Stellen gegeben und nicht in Dezimalstellen. </p>

<p>Rechenoperationen sind bis zu 28 Dezimalstellen genau. Auf Grund der besprochenen Unterschiede zwischen 
decimal und floating-point sollten sie auch vorsichtig beim umcasten (umwandeln) in die anderen Typen sein. Denn in 
die eine Richtung generieren sie m&ouml;glicherweise einen &Uuml;berlauf, in die andere verlieren Sie die 
Genauigkeit.</p>

<p>Bei der Variablendeklaration ist folgendes zu beachten:
Wenn Sie bei <i>decimal</i> Kommastellen benutzen wollen, so m&uuml;ssen Sie das mit einem <i>m</i> als 
Suffix angeben.</p>

<p>
Beispiel: decimal Wert = 3.4m; (Im C# Source Code gilt: Im Englischen gilt der Punkt als Komma!)
Falls Sie den Suffix nicht angeben, wird die Variable vom Compiler als <i>double</i> behandelt
</p>


<h4><i>floating point Types</i></h4>

<p>Es gibt hierbei zwei unterschiedliche Typen <i>float</i> und <i>double</i>. Wie nicht anders 
zu erwarten unterscheiden sie sich im G&uuml;ltigkeitsbereich und in der Genauigkeit.</p>
<p>
<table cellspacing="5" cellpadding="2" border="1">
<tr>
    <td>Daten-Typ</td>
    <td>G&uuml;ltigkeitsbereich</td>
    <td>Genauigkeit</td>
</tr>
<tr>
    <td>float</td>
    <td>1.5*10^-45 bis 3.4*10^38</td>
    <td>7 stellig</td>
</tr>
<tr>
    <td>double</td>
    <td>5*10^-324 bis 1.7*10^308</td>
    <td>15 bis 16 stellig</td>
</tr>
</table>
</p>


<h4><i>bool Type</i></h4>

<p>Dieser verdient in C# Beachtung: im Gegensatz zu C++ sind boolsche Datentypen und 
Integer Datentypen nicht mehr ident! Das hei&szlig;t, der boolsche Datentyp umfa&szlig;t <b>nur</b> mehr die Werte 
<i>true</i> oder <i>false</i>, und nicht mehr Null (0) oder einen von Null (0) ungleichen Wert.
</p>

<h4><i>char Type</i></h4>

<p>Dieser Datentyp stellt ein Zeichen im Unicodeformat dar. Ein Unicodezeichen hat eine Gr&ouml;&szlig;e von 16 bit 
und ist f&uuml;r die meisten Sprachen verwendbar. Um einer char-Variablen einen Wert zuzuweisen, geht man 
so vor, da&szlig; man den Buchstaben mit einfachen Anf&uuml;hrungszeichen umgibt.
</p>
<p>
In C# sieht dies dann so aus:
<pre style="background='silver';">
<i>char Variablenname = 'Unicode Zeichen';</i>  // z.B char zeichen='C';
</pre>
</p>
<p>Zwei weitere Darstellungsm&ouml;glichkeiten f&uuml;r Unicode Zeichen sollen hier nur am Rande erw&auml;hnt 
werden - die M&ouml;glichkeit der 
<ul>
<li>hexadezimalen Escape-Sequenz mittles Pr&auml;fix "\x" <br>z.B.: char zeichen = '\x<i>EscSequenz</i>';
<li>Unicodeersatzzeichen mittles Pr&auml;fix "\u"<br>z.B.: char zeichen = '\u<i>UnicodeSequenz</i>';
</ul>
</p>

<p><b>Beachte:</b> Wenn Sie den <i>char</i> Datentyp umcasten wollen, m&uuml;ssen Sie das auch explizit tun (im 
Gegensatz zu C++), indem sie eine extra Anweisung schreiben.</p>

<h4><i>struct Type</i></h4>

<p>Ein struct Datentyp kann Konstanten, Felder, Methoden, Eigenschaften, Indexer, etc. deklarieren. Anders 
als in C++ werden in C# structs als Wert aufgefa&szlig;t und Klassen als Referenztyp. Der Grundgedanke bei 
der Verwendung von struct ist, da&szlig; man damit "Objekte" erstellt, die wesentlich weniger Speicherplatz 
als echte Objekte ben&ouml;tigen. Das kommt dadurch, da&szlig; keine zus&auml;tzliche Speicherreferenzen ben&ouml;tigt 
werden wie f&uuml;r Klassen.</p>

<h4><i>enumeration Type</i></h4>
<p>
Wenn Sie einen spezielle Datentyp suchen, der eine Reihe von vordefinierten Konstanten enthalten kann, dann 
sollten Sie den Datentyp enumeration verwenden. Jeder enumeration-type hat seinen untergeordenten 
Datentyp (z.B. byte, short, integer oder long).
</p>

<p>Beispiel: <i>enum Variablenname {Menge};</i></p>

<p>
<pre style="background='silver';">
enum Woche {Montag, Dienstag, Mittwoch, Donnerstag, Freitag, 
	Samstag, Sonntag};
</pre>
</p>			

<p>
Sie k&ouml;nnen nat&uuml;rlich auch in der Mengenangabe einen anderen Datentyp angeben:
</p>
<p>
Beispiel: <i>enum Variablenname : Datentyp {Menge};</i>
</p>
<p>enum Woche : byte {Montag, Dienstag, Mittwoch, Donnerstag, Freitag, Samstag, Sonntag};</p>


<h3>Reference Types</h3>
<p>
Ein reference-type kann eine Klasse, ein interface-type oder ein Array sein. Ein reference-type ist 
die Refernz zu einer Instanz, und damit letzlich zu einem Objekt.
Der Wert <i>null</i> ist kompatibel mit allen Reference types und bedeutet die Nonexistenz einer 
Instanz.
</p>

<p>Der reference-type gliedert sich in folgende Untertypen:
<ul>
<li>Interface types</li>
<li>Class types</li>
<li>Delegate types</li>
<li>Array types</li>
<li>Object type</li>
<li>String type</li>
</ul>
</p>

<h4>Class types</h4>
<p>
Der Class type definiert eine Datenstruktur welche Daten-Member (Konstanten, Felder und 
Events) und Funktions-Member (Methoden, Eigenschaften, Indexer, Operatoren, Konstruktoren und 
Destruktoren) beeinhaltet. Class types unterst&uuml;tzen Vererbung; das bedeutet, da&szlig; hergeleitete 
Classes die Base Class erweitern und spezialisieren k&ouml;nnen.
</p>
	
<h4>Delegate types</h4>
<p>
Ein delegate ist ein Referenztyp der sich auf eine Methode oder auf eine Objektinstanz 
und die Instanzmethode dieses Objektes bezieht. Der n&auml;chste Verwandte zum delegate in C oder C++ ist der 
Funktionspointer (addressof in VB), wobei ein Funktionspointer nur statische Funktionen referenziert, der delegate jedoch 
statische und Instanzmethoden. Der delegate speichert nicht nur den Methodenanfangspunkt sondern auch 
eine Referenz zum Instanzobjekt um die Methode aufzurufen.
</p>

<h4>Array types</h4>
<p>
Ein Array ist eine Datenstruktur welche eine Anzahl von Variablen beeinhaltet die durch 
berechnete Indizes zug&auml;nglich ist. Die Variablen die sich in einem Array befinden, werden auch als 
Elemente eines Arrays bezeichnet und sind alle vom selben Typ. Dieser Typ wird als "Elementtyp des 
Arrays" bezeichnet. Mehr Informationen zu Arrays erhalten Sie in einem unserer n&auml;chsten Artikel.
</p>

<h4>Object type</h4>
<p>
Der Object Type ist die ultimative Base class aller anderen Typen. Jeder Typ in C# l&auml;&szlig;t 
sich direkt oder indirekt vom Object Type herleiten.
Das <i>object</i> Schl&uuml;sselwort ist einfach nur ein angenommener(anderer) Name f&uuml;r die vordefinierte 
<i>System.Object</i> Klasse. Das Keyword object ist genau das gleiche wie System.Object und umgekehrt.
</p>

<h4>String type</h4>
<p>
Der String type ist ein abgeschlossener Class type welcher direkt von Object abgeleitet ist. 
Instanzen der String Class repr&auml;sentieren Unicode Zeichenfolgen. Das <i>string</i> keyword ist einfach nur 
ein anderer Name f&uuml;r die vordefinierte <i>System.String</i> Class. Der Keyword <i>string</i> ist genau das selbe wie 
<i>System.String</i> und umgekehrt.
</p>

<h4>Interfaces</h4>
<p>
Ein Interface definiert einen Referenztyp der nur abstrakte Members (Mitglieder) hat. Ein interface wird 
dazu verwendet, um eine Schnittstellen-Vereinbarung zu schaffen. Eine Klasse oder ein struct, welches ein Interface 
implementiert, mu&szlig; die Vereinbarung einhalten. Ein interface kann Methoden, Eigenschaften oder Indexer 
enthalten.
</p>

<h3>Boxing und Unboxing</h3>	
<p>
Boxing und Unboxing ist ein zentraler Teil im Type-System von C# (und der Runtime). Es stellt ein Bindeglied zwischen 
value-types und reference-types zur Verf&uuml;gung. Value-types haben den Vorteil, da&szlig; sie wenig Speicherplatz 
ben&ouml;tigen. In manchen F&auml;llen ist es jedoch von Vorteil, da&szlig; value-types auch die die Eigenschaften von 
Objekten haben. Diese &Uuml;bereinkunft macht den Hauptteil von C# aus, da&szlig; die Verkn&uuml;pfung zwischen 
value-types und reference-types dadurch geschieht, da&szlig; ein value-type aus einem und in ein Objekt 
ungewandelt werden kann. Unter dem Motto "Es ist zwar alles ein Objekt, aber nur dann wenn es eines sein 
mu&szlig;."
</p>

<h4><b>Boxing Vorgang</b></h4>
<p>
Der Boxing Vorgang beschreibt die Umwandlung von einem value-type zu einem Objekt. 
Bei dem Boxing Vorgang wird die Instanz eines Objekts erstellt und der urspr&uuml;ngliche 
Wert des value-types wird in das neue Objekt kopiert.
</p>
<p>Ein Beispiel:
<pre style="background='silver';">
...
int nVariable = 1; 
object oVariable = nVariable;
...
</pre>
</p>
<p>
Hier geschieht folgendes: in der ersten Sourcecodezeile wird die Variable "nVariable" als integer 
Datentyp deklariert, und diese bekommt zus&auml;tzlich den Wert 1 zugewiesen. In der zweiten Zeile wird nun 
eine neue Instanz for das Objekt oVariable erstellt und ihr der Wert der Variable <i>nVariable</i> zugewiesen. 
Durch diesen Kopiervorgang erhalte ich 2 v&ouml;llig unabh&auml;ngige Variablen.
Das hei&szlig;t, wenn der Wert des Objekts oVariable ge&auml;ndert wird, dann hat sich der Wert von 
nVariable <b>nicht</b> &auml;ndert.
</p>
<p>Die folgende kleine Anweisung beweist dies:
<pre style="background='silver';">
int nVariable = 1;
object oVariable = nVariable;
oVariable = 2;
Console.WriteLine("{0} {1}", nVariable, oVariable);
</pre>
</p>
<p>
Die Werte, die ausgegeben werden sind einmal 1, und das zweite mal 2.
</p>

<h4><b>Unboxing Vorgang</b></h4>
<p>
Man k&ouml;nnte sagen, dies sei der umgekehrte Vorgang. Beim Unboxing Vorgang wird ein
value type aus einem Objekt extrahiert. Der C# Compiler &uuml;berpr&uuml;ft zus&auml;tzlich, ob die von Ihnen 
angeforderte Variable, welche Sie aus dem Objekt extrahieren wollen, tats&auml;chlich den angeforderten
unboxed Type entsprechen kann.
</p>
<p>Ein Beispiel:
<pre style="background='silver';">
...
int nVariable = 1;
object oVariable = nVariable;
int nUBVariable = (int)oVariable;
...
</pre>
</p>
<p>
W&uuml;rde hier ein anderer Typ als <i>int</i> f&uuml;r die Unboxing Operation angefordert, bek&auml;me man eine Exception.
</p>

<h2>Schlu&szlig;bemerkung</h2>
<p>
Dies ist zugegebenerma&szlig;en eines der trocken Kapitel aus der C#-Programmierung.
In diesem Artikel habe ich versucht Ihnen die verschieden Datentypen vorzustellen und das umcasten von 
Variablen zu Objekten (boxing) und umgekehrt (unboxing).  Obwohl C# einige, f&uuml;r den Programmierer vereinfachende Funktionen und 
Dienstleistungen zur Verf&uuml;gung stellt, ist der richtige Umgang mit Datentypen von grundlegender 
Bedeutung.
</p><h2>Verwandte Artikel</h2>
<p>
<a href="20000713.htm">A Brief History of C#</a><br>
<a href="20020507.htm">Deutsche Personalausweisnummern verifizieren</a><br>
<a href="20000823.htm">Die Hashtable Klasse</a><br>
<a href="20010215.htm">Enums lesbar machen</a><br>
<a href="20020705.htm">Formularbasierte Authentifizierung in f&uuml;nf Minuten</a><br>
<a href="20020207.htm">Unions in C#</a><br>
<a href="20020125.htm">Variable Parameterlisten in Funktionen</a><br>
<a href="20000731.htm">Verwendung von Arrays in C#</a><br>
<a href="20010621.htm">Web Services 101 in ASP.NET</a><br>
<a href="20010802.htm">Web.Config 101</a><br>
<a href="20020905.htm">Wochenberechnung mit .NET</a><br>

</p>

<h2>Wenn Sie jetzt Fragen haben...</h2>
<p>
Wenn Sie Fragen rund um die in diesem Artikel vorgestellte Technologie haben, dann schauen Sie einfach bei uns
in den <a href="http://glengamoi.com/forums/">Community Foren der deutschen .NET Community</a> vorbei. Die Teilnehmer 
helfen Ihnen gerne, wenn Sie sich zur im Artikel vorgestellten Technologie weiterbilden m&ouml;chten.
</p>

<p>
<a href="http://glengamoi.com/forums/"><img src="../images/glengamoi.com_250.gif" width="250" height="80" alt="" border="0"></a>
</p>


<p>
Eine weitere sehr hilfreiche Resource ist das <a href="http://aspxfiles.com/">deutsche ASP.NET Wiki</a>,
das als zentrale Anlaufstelle f&uuml;r Tips, Tricks, Know How und alles N&uuml;tzliche was man in seinem Alltag als 
(ASP).NET-Entwickler so braucht und entdeckt gedacht ist. 
</p>

<p>
Haben Sie Fragen die sich direkt auf den Inhalt des Artikels beziehen, dann schreiben Sie dem Autor! Unsere Autoren
freuen sich &uuml;ber Feedback zu ihren Artikeln. Ein einfacher Klick auf die <i>Autor kontaktieren</i>
Schaltfl&auml;che (weiter unten) und schon haben Sie ein f&uuml;r diesen Artikel personalisiertes Anfrageformular.
</p>

<p>&nbsp;</p>
<p>
Und zu guter Letzt m&ouml;chten wir Sie bitten, den Artikel zu bewerten. Damit helfen Sie uns, 
die Qualit&auml;t der Artikel zu verbessern - und anderen Lesern bei der Auswahl der Artikel,
die sie lesen sollten.
</p>

<FORM METHOD="POST" STYLE="margin-bottom: 0px;" NAME="formRating" ACTION="/service/bewerten.asp">
<INPUT TYPE="HIDDEN" NAME="ArticleId" VALUE="20000726" />
<CENTER>
<TABLE BORDER="0" CELLSPACING="0" CELLPADDING="0">
<TR>
	<TD ALIGN="CENTER" VALIGN="MIDDLE" COLSPAN="7">Bewerten Sie diesen Artikel</TD>
</TR>
<TR>
	<TD><EM>&nbsp;Sehr gut&nbsp;</EM></TD>
	<TD><INPUT TYPE="radio" value="1" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="2" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="3" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="4" NAME="radioRating" /></TD>
	<TD><INPUT TYPE="radio" value="5" NAME="radioRating" /></TD>
	<TD ALIGN="right"><EM>&nbsp;Nicht gen&uuml;gend</EM></TD>
	<TD ROWSPAN="2" VALIGN="middle">&nbsp;<INPUT TYPE="submit" VALUE="Werten!" /></TD>
</TR>
<TR>
	<TD>&nbsp;</TD>
	<TD ALIGN="CENTER">&nbsp;1</TD>
	<TD ALIGN="CENTER">&nbsp;2</TD>
	<TD ALIGN="CENTER">&nbsp;3</TD>
	<TD ALIGN="CENTER">&nbsp;4</TD>
	<TD ALIGN="CENTER">&nbsp;5</TD>
	<TD>&nbsp;</TD>
</TR>
</TABLE>
</FORM>
</center>
&nbsp;<P>
<center>
<p><table><tr><td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="pagetitle" value="Datentypen in C#"><input type="hidden" name="pageurl" value="http://www.aspheute.com/artikel/20000726.htm"><input type="image" src="../images/layout/senden.png" width="107" height="20" border="0" alt="Schicken Sie diese Seite einem Freund!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top>
<form action="REMOVED" method="GET"><input type="hidden" name="Author" value="Christian Holm"><input type="hidden" name="AuthorEmail" value="office@holmcs.com"><input type="hidden" name="Artikel" value="20000726"><input type="image" src="../images/layout/kontakt.png" width="107" height="20" border="0" alt="Kontaktieren Sie den Autor!" style="cursor='hand';"></form>
<td>&nbsp;&nbsp;</td>
<td valign=top><a href="../PrinterFriendly/20000726.htm"><img src="../images/layout/druck.png" width="118" height="20" border="0" alt="F&uuml;r Ausdruck optimierte Seite"></a></td>
</tr></table></p>
</center>

<center>
<p class="content">
&copy;2000-2006 <A HREF="../service/copyright.htm" title="Copyright Informationen">AspHeute.com</A><br>
Alle Rechte vorbehalten. Der Inhalt dieser Seiten ist urheberrechtlich gesch&uuml;tzt.<br>
Eine &Uuml;bernahme von Texten (auch nur auszugsweise) oder Graphiken bedarf unserer schriftlichen Zustimmung.
<hr>
</p>
</center>

</td>
</tr><!--Tabelle aussen, 2/2-->
</table><!--Tabelle aussen-->
</div>

</BODY>
</HTML>
